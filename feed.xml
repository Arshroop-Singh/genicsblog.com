<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://genicsblog.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://genicsblog.com/" rel="alternate" type="text/html"/><updated>2022-01-26T16:43:20+00:00</updated><id>https://genicsblog.com/feed.xml</id><title type="html">Genics Blog</title><subtitle>An open source developer publication aimed at sharing well explained tutorials on various topics for the developer community</subtitle><entry><title type="html">5 projects you can make to become a better web developer</title><link href="https://genicsblog.com/five-projects-to-become-better-at-webdev" rel="alternate" type="text/html" title="5 projects you can make to become a better web developer"/><published>2022-01-26T00:00:00+00:00</published><updated>2022-01-26T00:00:00+00:00</updated><id>https://genicsblog.com/five-projects-to-become-better-at-webdev</id><content type="html" xml:base="https://genicsblog.com/five-projects-to-become-better-at-webdev"><![CDATA[<p>The demand for web developers is growing as web development becomes more popular in the market. Web development has evolved as a viable field, attracting students and professionals from a wide range of academic and professional backgrounds.</p> <p>Working on web development projects is the ideal approach to gain experience in this sector if you’re also interested in it. Your skills will improve the more you practise and experiment with web development projects.</p> <h2 id="1-simple-clock">1. Simple Clock</h2> <p>It’s a simple app that you can develop using HTML and CSS. In this project, you have to build a simple webpage and then update the time.</p> <p>To make it more attractive, you can add start, stop features. Also, you can add an alarm function, ringtone function for alarms, Etc.</p> <div class="mb-6 aspect-video"> <iframe class="w-full h-full rounded-xl" scrolling="no" src="https://codepen.io/rainboestrykr/embed/preview/MWOWyNJ?default-tab=html%2Cresult&amp;theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true"> </iframe> </div> <h2 id="2-weathernews-app">2. Weather/News App</h2> <p>Making a weather/news app will test your skills, and in this project, you can use two APIs:</p> <ul> <li>One to get the user’s location.</li> <li>Another to fetch weather data based on the user’s location.</li> </ul> <p>As a beginner, having this project in your resume will help you stand apart from the crowd.</p> <h2 id="3-to-do-list">3. To-do list</h2> <p>It’s one of the best and simple projects that you can develop using HTML, CSS and JS. This project will help you to store your personal to-do lists and it will be saved in your local storage, which can be accessed anytime.</p> <p>Moreover, even if you host the app, the data will be stored in the user’s computer’s local storage which will maintain privacy.</p> <div class="mb-6 aspect-video"> <iframe class="w-full h-full rounded-xl" scrolling="no" src="https://codepen.io/rainboestrykr/embed/preview/mdqdPvv?default-tab=html%2Cresult&amp;theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true"> </iframe> </div> <h2 id="4-forms">4. Forms</h2> <p>HTML, CSS, and JavaScript can all be used to make forms. You can create a gorgeous landing page design with a little effort and attention. You can begin with a modest project, such as designing a survey form or a consultation form, depending on the type of business you’re starting.</p> <p>Name, address, e-mail, date of birth, phone number, and other pertinent information can be included in the form. You can send the form to your friends and see what they have to say!</p> <p>Companies nowadays use survey forms to gather information from their target audiences. In addition, having a landing page project on your resume will be a bonus!</p> <h2 id="5-coinflip">5. Coinflip</h2> <p>This is the most unexpected item on the list but it can prove to be very helpful in the long run. You can learn about using the random method to derive a random result from an array of options.</p> <div class="mb-6 aspect-video"> <iframe class="w-full h-full rounded-xl" scrolling="no" src="https://codepen.io/rainboestrykr/embed/preview/ExbxyvR?default-tab=html%2Cresult&amp;theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true"> </iframe> </div> <h2 id="conclusion">Conclusion</h2> <p>These were the top 5 web development projects. All of the projects listed are beginner-friendly, and working on them will help you improve your web development abilities and enhance your career.</p> <h3 id="thank-you-for-reading">Thank you for reading</h3> <p>If you liked this post, you can subscribe to my <a href="https://abhirajbhowmick.substack.com/" rel="dofollow">newsletter</a> to never miss out on <a href="https://abhiraj.co" rel="dofollow">my blogs</a>, product launches, and tech news. Follow me on <a href="https://twitter.com/rainboestrykr">Twitter</a> for daily threads on web dev resources.</p>]]></content><author><name>abhiraj</name></author><category term="web"/><category term="web-development"/><category term="tips"/><category term="beginners"/><summary type="html"><![CDATA[If you are interested in web development, the best way to create experience in this field is to work on web development projects.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/151173908-5358883e-7e44-41d3-bc5c-c7cea7086795.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/151173908-5358883e-7e44-41d3-bc5c-c7cea7086795.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Intro to GraphQL with Node.js and TypeScript</title><link href="https://genicsblog.com/dhruva/intro-to-graphql-with-node-and-typescript" rel="alternate" type="text/html" title="Intro to GraphQL with Node.js and TypeScript"/><published>2022-01-26T00:00:00+00:00</published><updated>2022-01-26T00:00:00+00:00</updated><id>https://genicsblog.com/dhruva/intro-to-graphql-with-node-and-typescript</id><content type="html" xml:base="https://genicsblog.com/dhruva/intro-to-graphql-with-node-and-typescript"><![CDATA[<p>In this post, I’ll help you get a solid understanding of working with GraphQL in Node.js and TypeScript using a library called <a href="https://typegraphql.com">TypeGraphQL</a>.</p> <p>TypeGraphQL is an awesome way to create your GraphQL resolvers and it has seamless integration capabilities with ORMs like <code class="language-plaintext highlighter-rouge">TypeORM</code> (we’ll be using it in this post!) and mikro-orm. It uses classes and decorators to beautifully generate our schemas using very less code.</p> <p>Also stick around till the end to find some challenges to reinforce your skills!</p> <h1 id="what-were-gonna-do">What we’re gonna do</h1> <ul> <li>First, we’ll setup a basic TypeScript project</li> <li>Then, we’ll configure <strong>TypeORM</strong>, to interact with our database</li> <li>We’ll create a <code class="language-plaintext highlighter-rouge">Task</code> database entity and hook it up with TypeORM</li> <li>After that, we’ll set up a basic Apollo/Express web server</li> <li>And finally, we’ll create our own GraphQL resolver using TypeGraphQL with CRUD (create, read, update, delete) functionality</li> </ul> <p>Alright, let’s get started!</p> <h1 id="setting-up-a-typescript-project">Setting up a TypeScript project</h1> <p>First let’s create an empty directory called <code class="language-plaintext highlighter-rouge">graphql-crud</code>.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>graphql-crud
</code></pre></div></div> <p>And you can open this directory with the editor of your choice (I’ll be using Visual Studio Code).</p> <p>Now let’s initialize this as an NPM project using</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm init <span class="nt">-y</span>
</code></pre></div></div> <p>This creates a basic <code class="language-plaintext highlighter-rouge">package.json</code>.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"graphql-crud"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"index.js"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"echo </span><span class="se">\"</span><span class="s2">Error: no test specified</span><span class="se">\"</span><span class="s2"> &amp;&amp; exit 1"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"keywords"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
  </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ISC"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Alright cool!</p> <p>So now since we have an NPM project set up, we can install TypeScript and the type definitions for Node:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add typescript
</code></pre></div></div> <p>and</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add <span class="nt">-D</span> @types/node
</code></pre></div></div> <p><strong>Note:</strong> I’ll be using Yarn throughout this post, feel free to use NPM.</p> <p>Also we need to make a <code class="language-plaintext highlighter-rouge">tsconfig.json</code> file to configure the TypeScript compiler, so to do that we’ll use a library called <code class="language-plaintext highlighter-rouge">tsconfig.json</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx tsconfig.json
</code></pre></div></div> <p>Select <code class="language-plaintext highlighter-rouge">node</code> from the options</p> <p><img src="https://i.imgur.com/cSC9N19.png" alt="Untitled"/></p> <p>And now, it will create a TSConfig in your root directory.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es2017"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"commonjs"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lib"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"dom"</span><span class="p">,</span><span class="w"> </span><span class="s2">"es6"</span><span class="p">,</span><span class="w"> </span><span class="s2">"es2017"</span><span class="p">,</span><span class="w"> </span><span class="s2">"esnext.asynciterable"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"skipLibCheck"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"sourceMap"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"outDir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./dist"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"moduleResolution"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"removeComments"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noImplicitAny"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"strictNullChecks"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"strictFunctionTypes"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noImplicitThis"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noUnusedLocals"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noUnusedParameters"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noImplicitReturns"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noFallthroughCasesInSwitch"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"allowSyntheticDefaultImports"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"esModuleInterop"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"emitDecoratorMetadata"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"experimentalDecorators"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"resolveJsonModule"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"baseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"."</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"exclude"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"node_modules"</span><span class="p">],</span><span class="w">
  </span><span class="nl">"include"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"./src/**/*.ts"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Now, let’s create a simple TypeScript file.</p> <p><code class="language-plaintext highlighter-rouge">src/index.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hellooooo</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> <p>We cannot run this file directly using Node, so we need to compile this into JavaScript. To do this, let’s create a <code class="language-plaintext highlighter-rouge">watch</code> script in our <code class="language-plaintext highlighter-rouge">package.json</code> to watch our TypeScript files for changes and compile them to JavaScript in the <code class="language-plaintext highlighter-rouge">dist/</code> directory.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"graphql-crud"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"index.js"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"watch"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsc -w"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"keywords"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
  </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ISC"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Now if we run <code class="language-plaintext highlighter-rouge">npm watch</code> in our terminal, it will create a <code class="language-plaintext highlighter-rouge">dist</code> folder with our compiled JavaScript code. We’ll create a <code class="language-plaintext highlighter-rouge">dev</code> command to run this compiled code with the following script:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"watch"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsc -w"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"dev"</span><span class="p">:</span><span class="w"> </span><span class="s2">"nodemon dist/index.js"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div> <p>By the way, make sure you install <code class="language-plaintext highlighter-rouge">nodemon</code> either globally or in this project for this command to work.</p> <p>Now to run this code you will run both <code class="language-plaintext highlighter-rouge">yarn watch</code> and <code class="language-plaintext highlighter-rouge">yarn dev</code> together, to compile our TypeScript and run the compiled code automatically.</p> <p>Alright, now our TypeScript project is ready to go! 🔥🔥</p> <h1 id="setting-up-typeorm">Setting up TypeORM</h1> <p><a href="https://typeorm.io">TypeORM</a> is an amazing ORM, which we can use to interact with various databases. It also has really good TypeScript support and the way we define database entities in TypeORM will be very useful when we setup TypeGraphQL later in this post.</p> <p>In this tutorial, I will be using PostgreSQL as my database and really you can follow along with any relational database which you have set up.</p> <p>Let’s install TypeORM and the native Postgres driver for Node:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add typeorm pg
</code></pre></div></div> <p>Now we can replace the code in <code class="language-plaintext highlighter-rouge">src/index.ts</code> to this:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">pass</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p>This basically just specifies all the options for your database connection. We are using a <code class="language-plaintext highlighter-rouge">main</code> function because top-level awaits are not a thing unless you’re using ES7 or something like that.</p> <h1 id="creating-our-entity">Creating our <code class="language-plaintext highlighter-rouge">Entity</code></h1> <p>First things first, I think some people don’t exactly know what an Entity is, so I’ll just explain that part a bit now.</p> <p>As you should already know, SQL databases (like Postgres, MySQL etc.) are made up of <strong>Tables</strong> and <strong>Columns.</strong> Like an Excel spreadsheet. Each table will contain fields related to it. For example:</p> <ul> <li>A table of <strong>Cars,</strong> may have columns like <strong>Manufacturer</strong>, <strong>Engine Type</strong>, <strong>Color</strong> etc.</li> </ul> <p>An <code class="language-plaintext highlighter-rouge">Entity</code> basically defines the structure of a database table and its corresponding columns. In this post, we’ll perform our CRUD operations with Tasks or Todos. So lets create an entity for a <strong>Task.</strong></p> <p>First off, create a new file in the <code class="language-plaintext highlighter-rouge">src/entities</code> directory.</p> <p>To keep it simple, we’re going to have 2 columns for our <code class="language-plaintext highlighter-rouge">Task</code> table:</p> <ul> <li>The <strong>title</strong> of the task</li> <li>The <strong>description</strong> of the task</li> </ul> <p>We’ll also have an <code class="language-plaintext highlighter-rouge">id</code> , a <code class="language-plaintext highlighter-rouge">created</code> , and an <code class="language-plaintext highlighter-rouge">updated</code> column.</p> <p>We won’t really use the created and updated column, but its kind of a best practice 😉</p> <p><code class="language-plaintext highlighter-rouge">src/entities/Task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span>
  <span class="nx">BaseEntity</span><span class="p">,</span>
  <span class="nx">Column</span><span class="p">,</span>
  <span class="nx">CreateDateColumn</span><span class="p">,</span>
  <span class="nx">Entity</span><span class="p">,</span>
  <span class="nx">PrimaryGeneratedColumn</span><span class="p">,</span>
  <span class="nx">UpdateDateColumn</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Entity</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">Task</span> <span class="kd">extends</span> <span class="nx">BaseEntity</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">PrimaryGeneratedColumn</span><span class="p">()</span>
  <span class="nx">id</span><span class="o">!</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">CreateDateColumn</span><span class="p">()</span>
  <span class="nx">created</span><span class="p">:</span> <span class="nb">Date</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">UpdateDateColumn</span><span class="p">()</span>
  <span class="nx">updated</span><span class="p">:</span> <span class="nb">Date</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">Column</span><span class="p">()</span>
  <span class="nx">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">Column</span><span class="p">()</span>
  <span class="nx">description</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Woah, woah, what is that?!</p> <p>This my friend, is the ✨ magic of decorators ✨</p> <p>This code is extremely clean and self-documenting:</p> <ul> <li>We are creating a class called <code class="language-plaintext highlighter-rouge">Task</code> with the <code class="language-plaintext highlighter-rouge">Entity</code> decorating specifying that this class is an Entity.</li> <li>We are extending this class from <code class="language-plaintext highlighter-rouge">BaseEntity</code> so that some useful methods like <code class="language-plaintext highlighter-rouge">create</code>, <code class="language-plaintext highlighter-rouge">delete</code> etc. will be exposed to us with this class. You’ll see what I mean later on.</li> <li>Then we’re creating a primary column, for our ID. This is ID field is an integer and its automatically generated by TypeORM!</li> <li>Next is the created and updated column and this too is automatically generated by TypeORM.</li> <li>The <code class="language-plaintext highlighter-rouge">title</code> and <code class="language-plaintext highlighter-rouge">description</code> is a normal column, containing the title and the description of our task.</li> </ul> <p>And don’t forget to add the <code class="language-plaintext highlighter-rouge">Task</code> entity to your <code class="language-plaintext highlighter-rouge">entities</code> array in your TypeORM config:</p> <p><code class="language-plaintext highlighter-rouge">src/index.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./entities/Task</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[</span><span class="nx">Task</span><span class="p">],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p>Phew! Finally, let’s get started with the GraphQL part!</p> <h1 id="setting-up-express-with-apollo-server">Setting up Express with Apollo Server</h1> <p>We’ll be using Express as our server and we’ll tell Express to use Apollo Server as middleware.</p> <p>But, what <strong>is</strong> Apollo Server??</p> <p>To understand what Apollo Server does, you’ll need to know how GraphQL works at its core. Basically, in an API there will be a REST endpoint for the GraphQL stuff (kinda ironic but yeah) from where you can run Queries and Mutations from your Resolvers.</p> <p>What Apollo Server does, is just create an endpoint for your GraphQL to be served with some extra dev tools, like GraphQL Playground which helps you test your GraphQL queries in a cool environment.</p> <p>So let’s start!</p> <p>We’ll install these libraries:</p> <ul> <li><code class="language-plaintext highlighter-rouge">express</code></li> <li><code class="language-plaintext highlighter-rouge">apollo-server-express</code>: Express middleware for Apollo Server</li> <li><code class="language-plaintext highlighter-rouge">graphql</code>: The JavaScript implementation of GraphQL</li> <li><code class="language-plaintext highlighter-rouge">type-graphql</code></li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add express apollo-server-express graphql type-graphql 
</code></pre></div></div> <p>Let’s also install the type definitions for express:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add <span class="nt">-D</span> @types/express
</code></pre></div></div> <p>Cool!</p> <p>Let’s now create our Express app:</p> <p><code class="language-plaintext highlighter-rouge">src/index.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">express</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Express</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./entities/Task</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>

  <span class="kd">const</span> <span class="na">app</span><span class="p">:</span> <span class="nx">Express</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`server started on port </span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p>Let’s also create a test route to see that everything’s working properly:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">express</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Express</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./entities/Task</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[</span><span class="nx">Task</span><span class="p">],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>

  <span class="kd">const</span> <span class="na">app</span><span class="p">:</span> <span class="nx">Express</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">_req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">you have not screwed up!</span><span class="dl">"</span><span class="p">));</span>

  <span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`server started on port </span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p><strong>Note:</strong> I am using an <code class="language-plaintext highlighter-rouge">_</code> in front of <code class="language-plaintext highlighter-rouge">req</code> because I won’t be using that variable and if you don’t use a variable you can prefix it with an underscore.</p> <p>Now let’s open up our browser and go to <code class="language-plaintext highlighter-rouge">[localhost:8000/](http://localhost:8000/)</code> and you should see something like this:</p> <p><img src="https://i.imgur.com/pKpSU2B.png" alt="Untitled"/></p> <p>To add Apollo Server as a middleware for Express, we can add the following code:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">express</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Express</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ApolloServer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">apollo-server-express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">buildSchema</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>

  <span class="kd">const</span> <span class="nx">apolloServer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ApolloServer</span><span class="p">({</span>
    <span class="na">schema</span><span class="p">:</span> <span class="k">await</span> <span class="nx">buildSchema</span><span class="p">({</span>
      <span class="na">resolvers</span><span class="p">:</span> <span class="p">[],</span>
      <span class="na">validate</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="p">}),</span>
  <span class="p">});</span>

  <span class="k">await</span> <span class="nx">apolloServer</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
  <span class="kd">const</span> <span class="na">app</span><span class="p">:</span> <span class="nx">Express</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

  <span class="nx">apolloServer</span><span class="p">.</span><span class="nx">applyMiddleware</span><span class="p">({</span> <span class="nx">app</span> <span class="p">});</span>

  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">_req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">you have not screwed up!</span><span class="dl">"</span><span class="p">));</span>

  <span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`server started on port </span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p>Now you’ll get TypeScript yelling at you because the <code class="language-plaintext highlighter-rouge">resolvers</code> array is empty but bear with me for a sec.</p> <p>Here what we’re basically doing is, creating an instance of <code class="language-plaintext highlighter-rouge">ApolloServer</code> and passing our GraphQL schema as the <code class="language-plaintext highlighter-rouge">buildSchema</code> function from <code class="language-plaintext highlighter-rouge">type-graphql</code>.</p> <p>So what TypeGraphQL does is it converts our GraphQL resolvers (TypeScript classes) which are present in the <code class="language-plaintext highlighter-rouge">resolvers</code> arrays into SDL or GraphQL Schema Definition Language, and passes this SDL as our final GraphQL schema to Apollo Server.</p> <p>Lets also quickly create a simple GraphQL Resolver:</p> <p>For those of you who don’t know what a Resolver is:</p> <blockquote> <p>Resolver is <strong>a collection of functions that generate response for a GraphQL query</strong>. In simple terms, a resolver acts as a GraphQL query handler.</p> <p>~ tutorialspoint.com</p> </blockquote> <p><code class="language-plaintext highlighter-rouge">src/resolvers/task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Query</span><span class="p">,</span> <span class="nx">Resolver</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Resolver</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">TaskResolver</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">Query</span><span class="p">()</span>
  <span class="nx">hello</span><span class="p">():</span> <span class="kr">string</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>That’s all there is to it!</p> <p>Of course, now we should add this resolver in our <code class="language-plaintext highlighter-rouge">resolvers</code> array:</p> <p><code class="language-plaintext highlighter-rouge">src/index.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">express</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Express</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ApolloServer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">apollo-server-express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">buildSchema</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./entities/Task</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">TaskResolver</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./resolvers/task</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[</span><span class="nx">Task</span><span class="p">],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>

  <span class="kd">const</span> <span class="nx">apolloServer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ApolloServer</span><span class="p">({</span>
    <span class="na">schema</span><span class="p">:</span> <span class="k">await</span> <span class="nx">buildSchema</span><span class="p">({</span>
      <span class="na">resolvers</span><span class="p">:</span> <span class="p">[</span><span class="nx">TaskResolver</span><span class="p">],</span>
      <span class="na">validate</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="p">}),</span>
  <span class="p">});</span>

  <span class="k">await</span> <span class="nx">apolloServer</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
  <span class="kd">const</span> <span class="na">app</span><span class="p">:</span> <span class="nx">Express</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

  <span class="nx">apolloServer</span><span class="p">.</span><span class="nx">applyMiddleware</span><span class="p">({</span> <span class="nx">app</span> <span class="p">});</span>

  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">_req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">you have not screwed up!</span><span class="dl">"</span><span class="p">));</span>

  <span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`server started on port </span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p>Cool! Now let’s look at our output in the terminal aaaandd…</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">UnmetGraphQLPeerDependencyError</span><span class="p">:</span> <span class="nx">Looks</span> <span class="nx">like</span> <span class="nx">you</span> <span class="nx">use</span> <span class="nx">an</span> <span class="nx">incorrect</span> <span class="nx">version</span> <span class="k">of</span> <span class="nx">the</span> <span class="dl">'</span><span class="s1">graphql</span><span class="dl">'</span> <span class="kr">package</span><span class="p">:</span> <span class="dl">"</span><span class="s2">16.2.0</span><span class="dl">"</span><span class="p">.</span> <span class="nx">Please</span> <span class="nx">ensure</span> <span class="nx">that</span> <span class="nx">you</span> <span class="nx">have</span> <span class="nx">installed</span> <span class="nx">a</span> <span class="nx">version</span> <span class="nx">that</span> <span class="nx">meets</span> <span class="nx">TypeGraphQL</span><span class="dl">'</span><span class="s1">s requirement: "^15.3.0".
    at Object.ensureInstalledCorrectGraphQLPackage (/Users/dhruvasrinivas/Documents/graphql-crud/node_modules/type-graphql/dist/utils/graphql-version.js:20:15)
    at Function.checkForErrors (/Users/dhruvasrinivas/Documents/graphql-crud/node_modules/type-graphql/dist/schema/schema-generator.js:47:27)
    at Function.generateFromMetadataSync (/Users/dhruvasrinivas/Documents/graphql-crud/node_modules/type-graphql/dist/schema/schema-generator.js:26:14)
    at Function.generateFromMetadata (/Users/dhruvasrinivas/Documents/graphql-crud/node_modules/type-graphql/dist/schema/schema-generator.js:16:29)
    at buildSchema (/Users/dhruvasrinivas/Documents/graphql-crud/node_modules/type-graphql/dist/utils/buildSchema.js:10:61)
    at main (/Users/dhruvasrinivas/Documents/graphql-crud/dist/index.js:23:54)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
</span></code></pre></div></div> <p>UH OH! We have an error! But it’s pretty obvious what we have to do to fix it. We just have to use the specified version of the graphql package in our <code class="language-plaintext highlighter-rouge">package.json</code></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"graphql-crud"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"index.js"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"watch"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsc -w"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"dev"</span><span class="p">:</span><span class="w"> </span><span class="s2">"nodemon dist/index.js"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"keywords"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
  </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ISC"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"@types/node"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^17.0.10"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"apollo-server-express"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^3.6.2"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"express"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.17.2"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"graphql"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^15.3.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"pg"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^8.7.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type-graphql"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.1.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"typeorm"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^0.2.41"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"typescript"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.5.5"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"devDependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"@types/express"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.17.13"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Now let’s reinstall all of our dependencies:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn
</code></pre></div></div> <p>Now if we run our code, we shouldn’t get any errors!</p> <p>Apollo Server serves our GraphQL at the <code class="language-plaintext highlighter-rouge">/graphql</code> endpoint.</p> <p>So let’s open it up in our browser.</p> <p><img src="https://i.imgur.com/uYKIjOp.png" alt="apollo propaganda page"/></p> <p>And oof we’re greeted by Apollo Server’s propaganda page 💀</p> <p>Fun fact: This is actually a new Apollo Server update, earlier it used to directly open up GraphQL Playground, an interactive environment to test our GraphQL queries.</p> <p>No worries though, we can spin up GraphQL playground using this Apollo Server Plugin:</p> <p><code class="language-plaintext highlighter-rouge">src/index.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">express</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Express</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ApolloServer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">apollo-server-express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">buildSchema</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./entities/Task</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">TaskResolver</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./resolvers/task</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ApolloServerPluginLandingPageGraphQLPlayground</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">apollo-server-core</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[</span><span class="nx">Task</span><span class="p">],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>

  <span class="kd">const</span> <span class="nx">apolloServer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ApolloServer</span><span class="p">({</span>
    <span class="na">schema</span><span class="p">:</span> <span class="k">await</span> <span class="nx">buildSchema</span><span class="p">({</span>
      <span class="na">resolvers</span><span class="p">:</span> <span class="p">[</span><span class="nx">TaskResolver</span><span class="p">],</span>
      <span class="na">validate</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="p">}),</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="nx">ApolloServerPluginLandingPageGraphQLPlayground</span><span class="p">()],</span>
  <span class="p">});</span>

  <span class="k">await</span> <span class="nx">apolloServer</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
  <span class="kd">const</span> <span class="na">app</span><span class="p">:</span> <span class="nx">Express</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

  <span class="nx">apolloServer</span><span class="p">.</span><span class="nx">applyMiddleware</span><span class="p">({</span> <span class="nx">app</span> <span class="p">});</span>

  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">_req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">you have not screwed up!</span><span class="dl">"</span><span class="p">));</span>

  <span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`server started on port </span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p>Now, if you refresh you can find something like this:</p> <p><img src="https://i.imgur.com/eKHWisM.png" alt="Untitled"/></p> <p>Now let’s run our <code class="language-plaintext highlighter-rouge">hello</code> query:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="n">hello</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>And you’ll see our output:</p> <p><img src="https://i.imgur.com/fRSycbD.png" alt="Untitled"/></p> <p>Awesome!!</p> <h1 id="building-crud-functionality">Building CRUD functionality</h1> <p>Now, let’s get to the main part, which is building out our CRUD functionality. Let’s start with the easiest, which is to fetch all the posts:</p> <p>BUT WAIT A MINUTE! Remember that <code class="language-plaintext highlighter-rouge">Task</code> entity we made? Like a hundred years back? Yep, that one.</p> <p>That is a database <strong>Entity</strong>, but when we get all tasks we have to return a <code class="language-plaintext highlighter-rouge">Task</code> and we can’t return an <strong>Entity</strong> cause that’s dumb. So what we’re gonna have to do is, to make <code class="language-plaintext highlighter-rouge">Task</code> a GraphQL type.</p> <p>Before you start complaining, remember that I told you that TypeGraphQL can integrate with TypeORM well? Let’s see that in action!</p> <p><code class="language-plaintext highlighter-rouge">src/entities/Task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Field</span><span class="p">,</span> <span class="nx">Int</span><span class="p">,</span> <span class="nx">ObjectType</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
  <span class="nx">BaseEntity</span><span class="p">,</span>
  <span class="nx">Column</span><span class="p">,</span>
  <span class="nx">CreateDateColumn</span><span class="p">,</span>
  <span class="nx">Entity</span><span class="p">,</span>
  <span class="nx">PrimaryGeneratedColumn</span><span class="p">,</span>
  <span class="nx">UpdateDateColumn</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Entity</span><span class="p">()</span>
<span class="p">@</span><span class="nd">ObjectType</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">Task</span> <span class="kd">extends</span> <span class="nx">BaseEntity</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">PrimaryGeneratedColumn</span><span class="p">()</span>
  <span class="p">@</span><span class="nd">Field</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">Int</span><span class="p">)</span>
  <span class="nx">id</span><span class="o">!</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">CreateDateColumn</span><span class="p">()</span>
  <span class="p">@</span><span class="nd">Field</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">)</span>
  <span class="nx">created</span><span class="p">:</span> <span class="nb">Date</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">UpdateDateColumn</span><span class="p">()</span>
  <span class="p">@</span><span class="nd">Field</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">)</span>
  <span class="nx">updated</span><span class="p">:</span> <span class="nb">Date</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">Column</span><span class="p">()</span>
  <span class="p">@</span><span class="nd">Field</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">,</span> <span class="p">{</span> <span class="na">nullable</span><span class="p">:</span> <span class="kc">false</span> <span class="p">})</span>
  <span class="nx">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">Column</span><span class="p">()</span>
  <span class="p">@</span><span class="nd">Field</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">,</span> <span class="p">{</span> <span class="na">nullable</span><span class="p">:</span> <span class="kc">false</span> <span class="p">})</span>
  <span class="nx">description</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Get a load of that ✨ decorator magic ✨</p> <p>What we’re essentially doing here is:</p> <ul> <li>Specifying that this <code class="language-plaintext highlighter-rouge">Task</code> class is <strong>also a GraphQL type!</strong></li> <li>We are then decorating each column with the <code class="language-plaintext highlighter-rouge">Field</code> decorator, saying that each of these columns are also Fields of the <code class="language-plaintext highlighter-rouge">Task</code> type.</li> <li>We are also explicitly stating the GraphQL type of each <code class="language-plaintext highlighter-rouge">Field</code> , which are all coming from <code class="language-plaintext highlighter-rouge">type-graphql</code></li> <li>We are also specifying that the title and description field <strong>has to have a value and can never be declared as null.</strong></li> </ul> <p>The cool thing about defining your entity and GraphQL type like this is that you may have a column in your database like a password which <strong>you don’t want to expose</strong> in a response and you can just not decorate it with a <code class="language-plaintext highlighter-rouge">Field</code> to do this!</p> <h2 id="getting-all-tasks">Getting all tasks</h2> <p>Now, let’s fetch all of our Tasks:</p> <p><code class="language-plaintext highlighter-rouge">src/resolvers/task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Query</span><span class="p">,</span> <span class="nx">Resolver</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../entities/Task</span><span class="dl">"</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Resolver</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">TaskResolver</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">Query</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nx">Task</span><span class="p">])</span>
  <span class="k">async</span> <span class="nx">tasks</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Task</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">find</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Here you can see that we’re specifying the GraphQL return type as an array of <code class="language-plaintext highlighter-rouge">Task</code>s since we also made it a GraphQL type.</p> <p>One fault you may find with this approach is that we’re defining the return types <strong>twice:</strong> once for the GraphQL return type, and once for the function’s return type. But that’s just how we do things in the TypeGraphQL world 😅</p> <p>Ok cool, let’s now run our query:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="n">tasks</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="w">
    </span><span class="n">created</span><span class="w">
    </span><span class="n">updated</span><span class="w">
    </span><span class="n">title</span><span class="w">
    </span><span class="n">description</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>And we will get a response like this:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"tasks"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>The array is empty because we haven’t created any tasks yet.</p> <h2 id="creating-a-task">Creating a task</h2> <p>Now I’d like to ask you a question, if we use a <code class="language-plaintext highlighter-rouge">Query</code> to fetch data, will we be able to use the same <code class="language-plaintext highlighter-rouge">Query</code> to change (create, update, delete) data? No, we can’t. We will use something called a <code class="language-plaintext highlighter-rouge">**Mutation</code>** to achieve our task.</p> <p>One more thing you might be thinking is how exactly do we take inputs because when we create a task, we’ll need to provide the title and description of the task, right? Guess what, TypeGraphQL has a decorator for it!</p> <p>Let’s see all of this in action. We’ll define a new function in our task resolver.</p> <p><code class="language-plaintext highlighter-rouge">src/resolvers/task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Arg</span><span class="p">,</span> <span class="nx">Mutation</span><span class="p">,</span> <span class="nx">Query</span><span class="p">,</span> <span class="nx">Resolver</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../entities/Task</span><span class="dl">"</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Resolver</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">TaskResolver</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">Query</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nx">Task</span><span class="p">])</span>
  <span class="k">async</span> <span class="nx">tasks</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Task</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">find</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="p">@</span><span class="nd">Mutation</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">Task</span><span class="p">)</span>
  <span class="nx">createTask</span><span class="p">(</span>
    <span class="p">@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">title</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">)</span> <span class="nx">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
    <span class="p">@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">)</span> <span class="nx">description</span><span class="p">:</span> <span class="kr">string</span>
  <span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Task</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span> <span class="nx">title</span><span class="p">,</span> <span class="nx">description</span> <span class="p">}).</span><span class="nx">save</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>I’ll walk you through this new function line by line since it’s a bit confusing at first.</p> <ul> <li>We are first declaring this <code class="language-plaintext highlighter-rouge">createTask</code> as a GraphQL mutation, which returns the GraphQL <code class="language-plaintext highlighter-rouge">Task</code> type which we created. We are returning a <code class="language-plaintext highlighter-rouge">Task</code> because after the task is saved to the database we want to show that it has successfully added it.</li> <li>Then we have 2 variables, <code class="language-plaintext highlighter-rouge">title</code> and <code class="language-plaintext highlighter-rouge">string</code> decorated with <code class="language-plaintext highlighter-rouge">Arg</code>. This <code class="language-plaintext highlighter-rouge">Arg</code> specifies that these two variables will be passed as arguments when we are running this mutation (which we will do in a sec). The GraphQL type is given as <code class="language-plaintext highlighter-rouge">String</code> but this is optional because in most cases TypeGraphQL can <strong>infer</strong> the GraphQL type after looking at the variable’s TypeScript type.</li> <li>Then we’re creating a Task using <code class="language-plaintext highlighter-rouge">Task.create</code> and passing the title and description variables to it and then we’re calling <code class="language-plaintext highlighter-rouge">.save</code>.</li> </ul> <p>But why are we doing both <code class="language-plaintext highlighter-rouge">.create</code> and <code class="language-plaintext highlighter-rouge">.save</code>?</p> <p>What <code class="language-plaintext highlighter-rouge">.create</code> essentially does is, that it <strong>creates an instance of the <code class="language-plaintext highlighter-rouge">Task</code> class!</strong></p> <p>Something like this:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">task</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Task</span><span class="p">(....)</span> 
</code></pre></div></div> <p>And <code class="language-plaintext highlighter-rouge">.save</code> actually saves this new instance to our Postgres database.</p> <p>You might also be wondering why we’re specifying the name of the variable both as an argument for <code class="language-plaintext highlighter-rouge">@Arg</code> and for the TypeScript variable. What we’re specifying as the string is actually the name we’re going to use to provide GraphQL with the argument. For example:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">myrandomarg</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">)</span> <span class="nx">arg</span><span class="p">:</span> <span class="kr">string</span>
</code></pre></div></div> <p>To run this mutation we would do it like this:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">mutation</span><span class="w"> </span><span class="p">{</span><span class="w">
	</span><span class="n">myQuery</span><span class="p">(</span><span class="n">myrandomarg</span><span class="p">:</span><span class="w"> </span><span class="s2">"val"</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="p">...</span><span class="w">
	</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Since we got all of that cleared, let’s run our mutation!</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">mutation</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">createTask</span><span class="p">(</span><span class="w">
    </span><span class="n">title</span><span class="p">:</span><span class="w"> </span><span class="s2">"my first post!"</span><span class="p">,</span><span class="w">
    </span><span class="n">description</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
  </span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="w">
    </span><span class="n">created</span><span class="w">
    </span><span class="n">updated</span><span class="w">
    </span><span class="n">title</span><span class="w">
    </span><span class="n">description</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w"> 
</span></code></pre></div></div> <p>And we get our response back!</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"createTask"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"created"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1643090973749"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"updated"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1643090973749"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my first post!"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Awesome!</p> <p>Another thing we can do now is since we have created a post, we can try fetching all of our posts again.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"tasks"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
        </span><span class="nl">"created"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1643090973749"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"updated"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1643090973749"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my first post!"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>And it’s all working yay 🎉</p> <h2 id="getting-a-single-post-by-id">Getting a single post by ID</h2> <p>This should be pretty straight-forward since we already know how to include an argument.</p> <p><code class="language-plaintext highlighter-rouge">src/resolvers/task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Query</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">Task</span><span class="p">,</span> <span class="p">{</span> <span class="na">nullable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span>
<span class="k">async</span> <span class="nx">task</span><span class="p">(@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">Int</span><span class="p">)</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Task</span> <span class="o">|</span> <span class="kc">undefined</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> <span class="nx">id</span> <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div> <p>Here we’re saying that this <code class="language-plaintext highlighter-rouge">Query</code> returns a single <code class="language-plaintext highlighter-rouge">Task</code> and it can return a <code class="language-plaintext highlighter-rouge">null</code> if a post with this ID is not found.</p> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">Int</code> comes from <code class="language-plaintext highlighter-rouge">type-graphql</code></p> <p>Also the TypeScript return type is:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Task</span> <span class="o">|</span> <span class="kc">undefined</span><span class="o">&gt;</span>
</code></pre></div></div> <p>This basically says that this function can either return a Promise of a Task if a post with such and such ID is found, but otherwise it will return an <code class="language-plaintext highlighter-rouge">undefined</code>.</p> <p>And we’re using <code class="language-plaintext highlighter-rouge">Task.findOne()</code> to get a single task and providing the ID as the search query.</p> <p>So, if we run this query using:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="n">task</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="w">
    </span><span class="n">title</span><span class="w">
    </span><span class="n">description</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>We’ll get this response:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"task"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my first post!"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>And if we provide an ID that doesn’t exist, we’ll get a null as the response:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="n">task</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="mi">1717</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="w">
    </span><span class="n">title</span><span class="w">
    </span><span class="n">description</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"task"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my first post!"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="deleting-a-post">Deleting a post</h2> <p>Deleting a post is quite similar to the function we created for getting a single post.</p> <p><code class="language-plaintext highlighter-rouge">src/resolvers/task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Mutation</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nb">Boolean</span><span class="p">)</span>
<span class="k">async</span> <span class="nx">deleteTask</span><span class="p">(@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">Int</span><span class="p">)</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">await</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> <span class="nx">id</span> <span class="p">}))</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">Task</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Here we are returning the <code class="language-plaintext highlighter-rouge">Boolean</code> GraphQL type. We first check if a post with the ID provided exists, then we delete it and return <code class="language-plaintext highlighter-rouge">true</code>, but if it doesn’t, we return <code class="language-plaintext highlighter-rouge">false</code>.</p> <p>Let’s run this mutation:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">mutation</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">deleteTask</span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> 
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p><strong>Note:</strong> First, create another Task and then run this mutation.</p> <p>And you will get this response!</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"deleteTask"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Now, finally we’re gonna create one final function to update our Task.</p> <h2 id="updating-a-task">Updating a Task</h2> <p>To update a task, we’ll need to get:</p> <ul> <li>the ID of the task</li> <li>the new title</li> <li>the new description</li> </ul> <p>And then we’ll need to check if a post with the mentioned ID exists, if it doesn’t we will return <code class="language-plaintext highlighter-rouge">null</code></p> <p>Then we will check if a title or a description if provided and if it is, we will update the Task using <code class="language-plaintext highlighter-rouge">Task.update</code></p> <p><code class="language-plaintext highlighter-rouge">src/resolvers/task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Mutation</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">Task</span><span class="p">,</span> <span class="p">{</span> <span class="na">nullable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span>
<span class="k">async</span> <span class="nx">updateTask</span><span class="p">(</span>
  <span class="p">@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">title</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">,</span> <span class="p">{</span> <span class="na">nullable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span> <span class="nx">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
  <span class="p">@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">,</span> <span class="p">{</span> <span class="na">nullable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span> <span class="nx">description</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
  <span class="p">@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">Int</span><span class="p">)</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">number</span>
<span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Task</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">task</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">findOne</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">task</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">title</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">undefined</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span> <span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">title</span> <span class="p">});</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">description</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">undefined</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span> <span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">description</span> <span class="p">});</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">task</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>All this is familiar code, it’s just that the complexity of our operation is a bit higher. Let’s now test this mutation:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">mutation</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">updateTask</span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">title</span><span class="p">:</span><span class="w"> </span><span class="s2">"first post by me!"</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="w">
    </span><span class="n">title</span><span class="w">
    </span><span class="n">description</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>And we’ll get our response:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"updateTask"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my first post!"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>If we run the get task by ID query we can see our updated Task:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="n">task</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="w">
    </span><span class="n">title</span><span class="w">
    </span><span class="n">description</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Response:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"task"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"first post by me!"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>And that’s it!! We’re done with our CRUD!! 🚀🚀</p> <h1 id="challenge">Challenge</h1> <p>As promised, you can try implementing the features listed below to improve your understanding of the concept 💪</p> <ul> <li>Make an <code class="language-plaintext highlighter-rouge">isComplete</code> boolean field in the <code class="language-plaintext highlighter-rouge">Task</code> entity</li> <li>Make a <code class="language-plaintext highlighter-rouge">markComplete</code> mutation to change the value of <code class="language-plaintext highlighter-rouge">isComplete</code> of a Task</li> <li>You can also make a simple <code class="language-plaintext highlighter-rouge">filter</code> query to search for tasks based on the <code class="language-plaintext highlighter-rouge">title</code> arg given by the user.</li> </ul> <p>If you need help implementing any of these, leave a comment and I’ll answer your query!</p> <p>You can find the source code <a href="https://github.com/carrotfarmer/graphql-crud">here</a>.</p> <p>And that’s it for this post, see ya in the next one!</p>]]></content><author><name>dhruva</name></author><category term="backend"/><category term="api"/><category term="node-js"/><category term="web-development"/><summary type="html"><![CDATA[The complete guide to working with GraphQL using TypeGraphQL and building a basic CRUD functionality with TypeORM and Postgres.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/151178959-781d2ea4-a4dc-4f89-90d9-b98d62821944.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/151178959-781d2ea4-a4dc-4f89-90d9-b98d62821944.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">6 Free websites to learn Web 3.0</title><link href="https://genicsblog.com/6-free-websites-to-learn-web3" rel="alternate" type="text/html" title="6 Free websites to learn Web 3.0"/><published>2022-01-25T00:00:00+00:00</published><updated>2022-01-25T00:00:00+00:00</updated><id>https://genicsblog.com/6-free-websites-to-learn-web3</id><content type="html" xml:base="https://genicsblog.com/6-free-websites-to-learn-web3"><![CDATA[<p>Hi everyone, I have some great websites for you to learn <strong>web3.0</strong>, which I found when I was searching for web3 knowledge.</p> <p>Let’s have some basic understanding of what <a href="/category/web3/">web3</a> is before we dive into this awesome list. <a href="https://eshita.mirror.xyz/H5bNIXATsWUv_QbbEz6lckYcgAa2rhXEPDRkecOlCOI">Eshita’s article</a> describes it in a very simple way:</p> <ul> <li>Web1 <em>(read only)</em> 😬</li> <li>Web2 <em>(read and write)</em> 😨</li> <li>Web3 <em>(read, write, and own)</em> 😱</li> </ul> <p>We are currently in the middle of this transition from <a href="/category/web/">web2</a> to web3. For me, web3 is not just hype. Web3 was here a long time ago waiting for us to adapt, transition, and accept the future of the internet.</p> <p>You should start learning web3 right now and while it is early, we have nothing to lose. If you know both Web2 and web3, it would be better than anything!</p> <p>Here’s the list of resources to learn web3:</p> <h3 id="1-buildspace">1. <a href="https://buildspace.so">BuildSpace</a></h3> <p><img src="https://user-images.githubusercontent.com/46792249/150972372-92d2553f-816d-472c-bf13-7c5abcf6e4e1.png" alt="BuildSpace.so website"/></p> <p>Let’s start this awesome list with BuildSpace! This is indeed a top notch place to learn and build real-world web3 projects.</p> <p>Why is BuildSpace on the top? It offers different kinds of projects for you to start hacking your way through web3!</p> <p>You’ll earn free exclusive and unique NFTs when you’re able to complete a project tutorial. On top of that, you’ll get a special Discord role in their official Discord community to represent what you’ve learned and where you enroll!</p> <p>With every project you complete, you’ll gain the required experience that can get you a full-time remote job at popular web3 company!</p> <h3 id="2-odyssey-dao">2. <a href="https://odysseydao.com">Odyssey DAO</a></h3> <p><img src="https://user-images.githubusercontent.com/46792249/150972450-295b1999-a9e4-44fa-bbde-5210b685a918.png" alt="OdysseyDAO.com website"/></p> <p>Another personal favorite! This is a good alternative to BuildSpace. The only difference is that this is a learning DAO community. <strong>DAO means a decentralized autonomous organization</strong> and Odyssey is a pretty good definition of this.</p> <blockquote> <p>A DAO is a community that’s owned and managed by its members.</p> <p>~ <a href="https://www.odysseydao.com/articles/what-is-dao">odysseydao.com</a></p> </blockquote> <p>Here’s a good thing about Odyssey, they made it possible to provide <strong>100% free web3 education</strong> with the help of their community by offering NFTs and tokens!</p> <p>For me, this is a great use of NFTs and tokens because they’re using NFTs and tokens for a good cause, not just because they want to trade them.</p> <h3 id="3-cryptozombies">3. <a href="https://cryptozombies.io">CryptoZombies</a></h3> <p><img src="https://user-images.githubusercontent.com/46792249/150972618-5bf2879b-664b-461b-b0cc-93a561efa6fd.png" alt="CryptoZombies.io website"/></p> <p>Honestly, unlike BuildSpace and Odyssey, CryptoZombies is a pretty good place to learn web3 in a <em>fun and interactive way</em> for free. And guess what, <strong>it is open-source <a href="https://github.com/genicsblog">like us</a></strong>!</p> <p>On a side note, it is recommended and also helpful to have a little bit of technical background in programming, but that’s not absolutely required for you to start learning blockchain development. Just go with the flow and take their courses and learn as much as possible.</p> <p>Currently, they offer 4 learning paths — <strong>Solidity, Advance Solidity, Chainlink, and Beyond Ethereum</strong>, which are enough for you to be considered as a blockchain developer once you complete them.</p> <p>With the help of these paths, you will be able to develop your own smart contracts, launch NFTs, and build NFT games on your own!</p> <h3 id="4-cryptodevhub">4. <a href="https://cryptodevhub.io">CryptoDevHub</a></h3> <p><img src="https://user-images.githubusercontent.com/46792249/150972763-e7b87a32-4ac3-4759-ad54-43c3e0ba46f3.png" alt="CryptoDevHub.io website"/></p> <p>If you like the wiki-style of learning about web3 then this is the right place for you.</p> <p>CryptoDevHub is a <strong>wiki-type website</strong> where you can find tons of information about web3. It also offers guides for you to get started with web3 development. There is a community around it where web3 learners, developers hang out by helping each other to build web3 apps.</p> <h3 id="5-nft-school">5. <a href="https://nftschool.dev">NFT School</a></h3> <p><img src="https://user-images.githubusercontent.com/46792249/150972831-fae80e24-b787-4007-80c3-2fe6b10900ca.png" alt="NFTSchool.dev website"/></p> <p>NFT is one of the features of web3 so why not add related resources to the list. <strong>NFT School can be described as the web3 version of W3 School but for NFTs.</strong></p> <p>Wait, what is NFT? Well, <strong>NFT stands for <a href="https://nftschool.dev/concepts/non-fungible-tokens/#a-bit-of-history">Non-Fungible Tokens</a></strong>.</p> <p>To keep it simple, NFTs are just like a ticket to a concert where you can buy it and keep it forever. You might also sell it to collectors in the future since it retains value, which holds the same idea with paintings and artworks.</p> <h3 id="6-useweb3">6. <a href="https://useweb3.xyz">UseWeb3</a></h3> <p><img src="https://user-images.githubusercontent.com/46792249/150972909-6a8c9012-aab9-4031-b773-63056158c662.png" alt="UseWeb3.xyz"/></p> <p>UseWeb3 is a great opensource community-contributed resource for web3 enthusiasts like you. Better to check this out and bookmark it to your favorite browser because you’re gonna use it on your entire web3 journey!</p> <p>It is a simple website that has a list of very useful information related to web3 space.</p> <p>No more to say, they are very useful web3 resource!</p> <h3 id="bonus-content">Bonus Content</h3> <p>Imagine if you could build web3 applications without coding :eyes:</p> <p>That’s actually possible with the help of <a href="https://thirdweb.com">thirdweb</a>!</p> <p>It enables no-code developers to participate in web3 space without knowing Solidity or Rust to interact with smart contracts.</p> <p>Aside from being a no-code platform itself, you can actually use the programming language you already know such as JavaScript, Python, and many more… just to build some web3 cool stuff!</p> <p>Check out <a href="https://thirdweb.com/portal/guides/release-an-nft-drop-with-no-code">this guide</a> to get started!</p> <p>In addition, <strong>Hashnode is currently hosting a <a href="https://townhall.hashnode.com/thirdweb-hackathon">web3 hackathon event</a> together with thirdweb</strong> (at the time of writing this article). So it is better to check that out and win some cool prizes.</p> <p><strong>Are there any web3 resources that we forgot too add? Let us know in the comments below!</strong></p> <p>Thanks for reading, good luck with your web3 journey! 💖</p>]]></content><author><name>adityasingh</name></author><category term="web3"/><category term="blockchain"/><category term="beginners"/><summary type="html"><![CDATA[An awesome list of 6 free websites to learn Web 3.0 development.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/76763565/150826259-e68d86cd-1164-4d6c-98d7-0e2251874f3e.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/76763565/150826259-e68d86cd-1164-4d6c-98d7-0e2251874f3e.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Add google analytics to your Next.js app ✨</title><link href="https://genicsblog.com/avneesh/add-google-analytics-to-your-next-js-app" rel="alternate" type="text/html" title="Add google analytics to your Next.js app ✨"/><published>2022-01-24T00:00:00+00:00</published><updated>2022-01-24T00:00:00+00:00</updated><id>https://genicsblog.com/avneesh/add-google-analytics-to-your-next-js-app</id><content type="html" xml:base="https://genicsblog.com/avneesh/add-google-analytics-to-your-next-js-app"><![CDATA[<p>Wassup everyone, let’s see how to add google analytics to your Next.js site. Google Analytics will help you to see the performance of each page, how well the site is doing in countries, different devices, etc.</p> <h2 id="setup-google-analytics">Setup Google Analytics</h2> <p>Go to <a href="https://analytics.google.com/analytics/web/#/report-home/a215528627w297101680p257398486">Google Analytics</a> and click on admin in the sidebar.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642347546151/V_VNBwjDM.png" alt="image.png"/></p> <p>After clicking on admin you will see a screen similar to this-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642347749350/EkD2EHa3Z.png" alt="image.png"/></p> <p>Click on “Create Property”, now fill in the form with your details.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642347967831/C2JOHnX-W.png" alt="image.png"/></p> <p>You also need to give basic business details.</p> <p>After you click submit your property will be created! You will see this screen and as we are using Next.js, select web-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642348270857/uZb1Ioz8s.png" alt="image.png"/></p> <p>Fill in your website URL and title-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642348443210/En2V_kUHK.png" alt="image.png"/></p> <p>Click on add on Add new on-page inside <strong>Tagging instructions</strong>-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642348649689/0fbjYdwFL.png" alt="image.png"/></p> <p>Copy the ID that you see and copy it as we are going to need it!</p> <h2 id="using-google-analytics-in-nextjs-app">Using Google Analytics in Next.js app</h2> <p>Go inside <code class="language-plaintext highlighter-rouge">pages/_app.tsx</code> and these two Next.js Scripts-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">&lt;</span><span class="nc">Script</span>
    <span class="na">strategy</span><span class="p">=</span><span class="s">"lazyOnload"</span>
    <span class="na">src</span><span class="p">=</span><span class="si">{</span><span class="s2">`https://www.googletagmanager.com/gtag/js?id=</span><span class="p">${</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_GOOGLE_ANALYTICS</span><span class="p">}</span><span class="s2">`</span><span class="si">}</span>
  <span class="p">/&gt;</span>

  <span class="p">&lt;</span><span class="nc">Script</span> <span class="na">id</span><span class="p">=</span><span class="s">"google-analytics"</span> <span class="na">strategy</span><span class="p">=</span><span class="s">"lazyOnload"</span><span class="p">&gt;</span>
    <span class="si">{</span><span class="s2">`
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', '</span><span class="p">${</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_GOOGLE_ANALYTICS</span><span class="p">}</span><span class="s2">', {
              page_path: window.location.pathname,
            });
                `</span><span class="si">}</span>
  <span class="p">&lt;/</span><span class="nc">Script</span><span class="p">&gt;</span>
</code></pre></div></div> <p>This is going to load google analytics via this script. As you can see we are using env variables for the google-analytics tag because it must remain a secret 🤫, so if you don’t already have a <code class="language-plaintext highlighter-rouge">.env.local</code> file create one and add the following-</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NEXT_PUBLIC_GOOGLE_ANALYTICS=YOUR_GOOGLE_ANALYTICS_ID
</code></pre></div></div> <p>Paste in the ID that we copied in the last step! Since we are changing the env variables you need to restart the server too.</p> <p>As we are using the Next.js script we also need to import it-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">Script</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next/script</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div> <p>Open your localhost app in one tab and google analytics in another. If you click on Real-time inside of Reports you will see that you have 1 user!</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642350505812/oMFfF0elgj.png" alt="image.png"/></p> <h2 id="conclusion">Conclusion</h2> <p>Adding google analytics to your Next.js app was this easy! Hope you found it useful and insightful. See ya next time ✌️</p> <h3 id="useful-links">Useful links</h3> <p><a href="https://analytics.google.com/analytics/web/#/report-home/a215528627w297101680p257398486">Google Analytics</a></p> <p><a href="https://nextjs.org/">Next.js</a></p> <p><a href="https://links.avneesh.tech/">Connect with me</a></p>]]></content><author><name>avneesh</name></author><category term="web"/><category term="analytics"/><category term="next-js"/><summary type="html"><![CDATA[Learn how to add Google Analytics script to your Next.js app.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/150820378-8ba79cd6-b0e9-484b-93b7-6445b0680cd1.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/150820378-8ba79cd6-b0e9-484b-93b7-6445b0680cd1.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Metamask authentication in Next.js with Clerk 🔒</title><link href="https://genicsblog.com/avneesh/metamask-authentication-in-next-js-with-clerk" rel="alternate" type="text/html" title="Metamask authentication in Next.js with Clerk 🔒"/><published>2022-01-24T00:00:00+00:00</published><updated>2022-01-24T00:00:00+00:00</updated><id>https://genicsblog.com/avneesh/metamask-authentication-in-next-js-with-clerk</id><content type="html" xml:base="https://genicsblog.com/avneesh/metamask-authentication-in-next-js-with-clerk"><![CDATA[<p>Hello everyone! As you have seen web3 is very popular right now. Clerk has recently released metamask authentication. So let’s take a look at how to implement it in our app!</p> <h2 id="what-is-clerk">What is Clerk?</h2> <p><a href="https://clerk.dev/">Clerk</a> is one of the best ways to add authentication to a Next.js or a react application. It gives us things that are a pain to handle on our own like user management and multiple sessions.</p> <p>Why use Clerk?</p> <ul> <li>Easy to work with</li> <li>Customizable</li> <li>2-step verification</li> <li>New device notifications</li> <li>Single sign-on</li> <li>Passwordless sign-in</li> <li>Multi-sessions</li> </ul> <h2 id="setup">Setup</h2> <h3 id="setting-up-our-nextjs-app">Setting up our Next.js app</h3> <p>Creating a new Next.js app</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx create-next-app next-clerk-demo
</code></pre></div></div> <p>Installing <a href="https://clerk.dev/">Clerk</a></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i @clerk/clerk-react <span class="c"># npm</span>
yarn add @clerk/clerk-react <span class="c"># yarn</span>
</code></pre></div></div> <h3 id="setting-up-clerk">Setting up Clerk</h3> <p>Go to <a href="https://clerk.dev">Clerk</a>, sign up/in, then create a new app. Select “Sign in with Metamask” as the Authentication strategy-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642933471226/6hFpFKly_.png" alt="image.png"/></p> <p>If you now go to “API Keys” in the sidebar, you will be able to see your frontend API key. Copy it as we are going to need it soon.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642933643582/0uZGe5OP1.png" alt="image.png"/></p> <h2 id="integrating-clerk-into-nextjs">Integrating Clerk into Next.js</h2> <h3 id="configuring-clerk">Configuring Clerk</h3> <p>Inside <code class="language-plaintext highlighter-rouge">_app.js</code> wrap the in a ClerkProvider-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">ClerkProvider</span>
  <span class="na">frontendApi</span><span class="p">=</span><span class="si">{</span><span class="nx">clerkFrontendApi</span><span class="si">}</span>
  <span class="na">navigate</span><span class="p">=</span><span class="si">{</span><span class="p">(</span><span class="nx">to</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">router</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">to</span><span class="p">)</span><span class="si">}</span>
<span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nc">Component</span> <span class="si">{</span><span class="p">...</span><span class="nx">pageProps</span><span class="si">}</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nc">ClerkProvider</span><span class="p">&gt;</span>
</code></pre></div></div> <p>Get router from useRouter-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">useRouter</span><span class="p">();</span>
</code></pre></div></div> <p>Import useRouter and ClerkProvider-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ClerkProvider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@clerk/clerk-react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useRouter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next/router</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div> <p>As you can see we also need the <code class="language-plaintext highlighter-rouge">clerkFrontendApi</code>, so create a new variable-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">clerkFrontendApi</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_CLERK_FRONTEND_API</span><span class="p">;</span>
</code></pre></div></div> <p>We are going to use env variables for the API key, so create a new file <code class="language-plaintext highlighter-rouge">.env.local</code>, and add <code class="language-plaintext highlighter-rouge">NEXT_PUBLIC_CLERK_FRONTEND_API</code>-</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NEXT_PUBLIC_CLERK_FRONTEND_API=YOUR_API_KEY
</code></pre></div></div> <p>Paste in the API key that you got from the clerk dashboard. You also going to restart the dev server-</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run dev <span class="c"># npm</span>

yarn dev <span class="c"># yarn</span>
</code></pre></div></div> <h3 id="creating-the-sign-in-button">Creating the sign-in button</h3> <p>Inside <code class="language-plaintext highlighter-rouge">index.js</code> add the following-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">SignedOut</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nc">SignInWithMetamaskButton</span><span class="p">&gt;</span>Sign in with Metamask<span class="p">&lt;/</span><span class="nc">SignInWithMetamaskButton</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nc">SignedOut</span><span class="p">&gt;</span>
</code></pre></div></div> <p>You also need to import the following-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span>
  <span class="nx">SignedIn</span><span class="p">,</span>
  <span class="nx">SignedOut</span><span class="p">,</span>
  <span class="nx">SignInWithMetamaskButton</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@clerk/clerk-react</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div> <p>Now, if you go to <a href="http://localhost:3000/">http://localhost:3000/</a>, you will be able to see a sign-in button!</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642936017421/NM4fTVnvBE.png" alt="image.png"/></p> <p>If you try clicking on it, it works 🥳.</p> <h3 id="showing-userprofile-and-address-if-the-user-is-logged-in">Showing UserProfile and address if the user is logged in</h3> <p>Show a User component if the user is SignedIn-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">SignedIn</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nc">User</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nc">SignedIn</span><span class="p">&gt;</span>
</code></pre></div></div> <p>Create a new component in the components folder as <code class="language-plaintext highlighter-rouge">User.js</code> and add the following-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">UserButton</span><span class="p">,</span> <span class="nx">useUser</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@clerk/clerk-react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">useUser</span><span class="p">();</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">UserButton</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">user</span><span class="p">.</span><span class="nx">web3Wallets</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">web3Wallet</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">User</span><span class="p">;</span>
</code></pre></div></div> <p>Clerk provides a <code class="language-plaintext highlighter-rouge">useUser</code> hook which allows us to access the user’s details like the wallet address.</p> <p>If you now login into the app then, it would show you a profile picture and your address-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642936338400/cP77poM852.png" alt="image.png"/></p> <p>If you click on the user profile, it will show you a popup. You can click on manage account to add details like name, email, profile picture, etc.</p> <h3 id="keeping-the-users-on-our-site">Keeping the user’s on our site</h3> <p>When you clicked on manage account, you might have noticed that the URL was completely different and was not looking good. So let’s see how to keep users on our site itself!</p> <p>Create the sign in, sign up, and the user page Inside the <code class="language-plaintext highlighter-rouge">pages</code> folder we will create 3 folders named</p> <ul> <li>sign-in</li> <li>sign-up</li> <li>user</li> </ul> <p>Inside all the folders we will create a file named <code class="language-plaintext highlighter-rouge">[[…index]].js</code> Here is the code for all the files-</p> <p><strong><code class="language-plaintext highlighter-rouge">sign-in/[[…index]].js</code></strong></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">SignIn</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@clerk/clerk-react</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">SignInPage</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">SignIn</span> <span class="na">path</span><span class="p">=</span><span class="s">"/sign-in"</span> <span class="na">routing</span><span class="p">=</span><span class="s">"path"</span> <span class="p">/&gt;;</span>
<span class="p">}</span>
</code></pre></div></div> <p><strong><code class="language-plaintext highlighter-rouge">sign-up/[[…index]].js</code></strong></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">SignUp</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@clerk/clerk-react</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">SignUpPage</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">SignUp</span> <span class="na">path</span><span class="p">=</span><span class="s">"/sign-up"</span> <span class="na">routing</span><span class="p">=</span><span class="s">"path"</span> <span class="p">/&gt;;</span>
<span class="p">}</span>
</code></pre></div></div> <p><strong><code class="language-plaintext highlighter-rouge">user/[[…index]].js</code></strong></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">UserProfile</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@clerk/clerk-react</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">UserProfilePage</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">UserProfile</span> <span class="na">path</span><span class="p">=</span><span class="s">"/user"</span> <span class="na">routing</span><span class="p">=</span><span class="s">"path"</span> <span class="p">/&gt;;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Now, go to the clerk dashboard, and click on paths in the sidebar. Now edit the URLs with the following-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642936667724/670892Zym.png" alt="image.png"/></p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642936685668/_fkztjnDg.png" alt="image.png"/></p> <p>If you now try signing in, signing up, or viewing your profile then the user will be on the website itself (localhost in development).</p> <div class="mb-6 aspect-video"> <iframe src="https://www.loom.com/embed/f43d9d81f60947f28b30f7346f0d8ae0?hide_owner=true&amp;hide_share=true&amp;hide_title=true&amp;hideEmbedTopBar=true" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen="" class="w-full h-full rounded-xl" loading="lazy"> </iframe> </div> <h2 id="useful-links">Useful links</h2> <p><a href="https://clerk.dev/">Clerk</a></p> <p><a href="https://github.com/avneesh0612/Next-Clerk-metamask">GitHub Repo</a></p> <p><a href="https://blog.avneesh.tech/mastering-clerk-authentication-with-the-nextjs-standard-setup">Read more about Clerk</a></p> <p><a href="https://links.avneesh.tech/">Let’s connect</a></p>]]></content><author><name>avneesh</name></author><category term="web3"/><category term="authentication"/><category term="next-js"/><summary type="html"><![CDATA[Learn how to use add Metamask authentication to your Next.js app using Clerk.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/76690419/150726058-5520a79a-8f2a-4cac-8ceb-48a8ae2ac501.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/76690419/150726058-5520a79a-8f2a-4cac-8ceb-48a8ae2ac501.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How to build a REST API using NodeJS</title><link href="https://genicsblog.com/kira/how-to-build-a-rest-api-using-nodejs" rel="alternate" type="text/html" title="How to build a REST API using NodeJS"/><published>2022-01-23T00:00:00+00:00</published><updated>2022-01-23T00:00:00+00:00</updated><id>https://genicsblog.com/kira/how-to-build-a-rest-api-using-nodejs</id><content type="html" xml:base="https://genicsblog.com/kira/how-to-build-a-rest-api-using-nodejs"><![CDATA[<p>👋 Hey everyone, in this blog post we are doing to build a REST API that would serve as a source of motivation for developers using NodeJS and MongoDB. So let’s get started 🏄‍♂️</p> <p><img src="https://c.tenor.com/r3XdvPsAV3kAAAAS/despicable-me-minions.gif" alt=""/></p> <h1 id="whats-an-api-">What’s an API? 🤔</h1> <p>API stands for “Application Programming Interface” which is a tool that allows two applications to talk to each other 📞. Let’s understand the meaning of API by some real-life examples ✨</p> <p>So you have built an amazing e-store application and you wanted other developers to build applications on it. Now you have to build some sort of software that communicates between your web service and the developer’s application and that’s where API comes in.</p> <p><img src="https://user-images.githubusercontent.com/26124625/104198884-ca1bcf80-544c-11eb-94d1-22548426ad4d.png" alt=""/></p> <h2 id="whats-a-rest-api-">What’s a REST API? 🤔</h2> <p>Now as you have let’s talk something about “REST APIs”. REST stands for <strong>Representational State Transfer</strong>, it’s one of the most popularly known type of API architecture. These types of APIs follow the client-server model, where one program sends a request and the other response with some data. The requests are HTTP methods such as POST, GET, PUT, DELETE…</p> <p><img src="https://user-images.githubusercontent.com/26124625/104204412-431e2580-5453-11eb-9827-29a65aa6ff82.png" alt=""/></p> <p>You would have a more clear understanding of APIs and REST APIs when we build a project 👀. So what are we waiting for, let’s dive started into coding 👨‍💻.</p> <h1 id="setting-up-the-project-">Setting up the project 🛠</h1> <p>Let’s set up our project so that we can start coding 👨‍💻.</p> <ol> <li> <p>Creating a separate folder for our project</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>dev-credits-api
</code></pre></div> </div> </li> <li> <p>Navigate into the folder</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>dev-credits-api
</code></pre></div> </div> </li> <li> <p>Initializing the project</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm init
</code></pre></div> </div> </li> <li> <p>Installing the required packages</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install </span>mongoose express dotenv cors

<span class="c"># or</span>

<span class="nv">$ </span>yarn add mongoose express dotenv cors
</code></pre></div> </div> <ul> <li>Express is the framework by which we are going to our REST API</li> <li> <p>Mongoose is the tool that we are going to use to communicate with our MongoDB database</p> <p>4.1. Installing nodemon as a dev dependency</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install </span>nodemon <span class="nt">-D</span>

<span class="c"># or</span>

<span class="nv">$ </span>yarn add nodemon <span class="nt">-D</span>
</code></pre></div> </div> <ul> <li>Nodemon is used for automatically restarting the server on file changes detected in the directory. This would be helpful as we would not be restarting the server each time we do changes</li> </ul> </li> </ul> </li> </ol> <h1 id="building-the-rest-api-">Building the REST API 👨‍💻</h1> <p>As we have completed the setup for our project, let’s get started building the REST API.</p> <p>Create a new file named <code class="language-plaintext highlighter-rouge">index.js</code></p> <p>Here is the boilerplate code for a basic express app</p> <p><code class="language-plaintext highlighter-rouge">index.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Server is running at port </span><span class="p">${</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>Let’s breakdown it into and understand each part:</p> <ul> <li> <p>We are requiring the express package into our file so that we can use it.</p> </li> <li> <p>We are assigning some value to the variable port, the port where our server would be running. You might be thinking why is there a <code class="language-plaintext highlighter-rouge">process.env.PORT</code>? 🤔. It’s because during deployment on services such as Heroku the port number might vary, it may not be 3000 so we are telling that if there is a PORT environment variable then use that else use <code class="language-plaintext highlighter-rouge">3000</code>.</p> </li> <li> <p>The last piece of code is telling to which port the server should listen, in our case it’s the <code class="language-plaintext highlighter-rouge">PORT</code> variable.</p> </li> </ul> <p>Let’s add a new script named <code class="language-plaintext highlighter-rouge">start</code> to the <code class="language-plaintext highlighter-rouge">package.json</code> file which uses nodemon to automatically restart the server on file changes detected. So after the changes our scripts in <code class="language-plaintext highlighter-rouge">package.json</code> would look something like this:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
   </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"nodemon index.js"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Let’s start our server by running the <code class="language-plaintext highlighter-rouge">npm start</code> command. The server would be running at <a href="http://localhost:3000">http://localhost:3000</a>. You prompted with an error something like this:</p> <p><img src="https://imgur.com/XeUfz0l.png" alt=""/></p> <p>This is happening because we haven’t defined the <code class="language-plaintext highlighter-rouge">/</code> (aka the root route)</p> <h2 id="http-methods-explained">HTTP methods explained</h2> <p>Let’s take a break from coding and understand what do they do and what’s the success and error status so that it would be easy for debugging 😎</p> <h3 id="get">GET</h3> <p><strong>What it does</strong>: Request data from a specified resource</p> <p><strong>Successful response</strong>: 200 OK</p> <p><strong>Error response</strong>: 404 not found</p> <h3 id="post">POST</h3> <p><strong>What it does</strong>: Send data to the server to create a new resource</p> <p><strong>Successful response</strong>: 201 Created</p> <p><strong>Error response</strong>: 404 not found or 409 conflict - if the resource already exists</p> <h3 id="put">PUT</h3> <p><strong>What it does</strong>: Send data to the server to update a pre-existing resource</p> <p><strong>Successful response</strong>: 200 OK</p> <p><strong>Error response</strong>: 204 no content, 404 not found or 405 method not allowed</p> <h3 id="delete">DELETE</h3> <p><strong>What it does</strong>: Deletes a resource from the server</p> <p><strong>Successful response</strong>: 200 OK</p> <p><strong>Error response</strong>: 404 not found or 405 method not allowed</p> <p>Check out <a href="https://http.cat/">http.cat</a> for understanding what each HTTP status code means via funny cat images 😹</p> <h2 id="adding-routes-">Adding routes 🛣</h2> <p>Routes are different URL paths of an express app that are associated with different HTTP methods, such as <code class="language-plaintext highlighter-rouge">GET</code>, <code class="language-plaintext highlighter-rouge">POST</code>, <code class="language-plaintext highlighter-rouge">DELETE</code>, <code class="language-plaintext highlighter-rouge">PUT</code>.</p> <p>Let’s get started by creating <code class="language-plaintext highlighter-rouge">/</code> which sends “Hello, World!”</p> <p>Add the below piece of code above the line where we declared the <code class="language-plaintext highlighter-rouge">port</code> variable</p> <p><code class="language-plaintext highlighter-rouge">index.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello, World!</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>Let’s breakdown this piece of code:</p> <ul> <li>The <code class="language-plaintext highlighter-rouge">get</code> method specifies the HTTP method for that route. You could use other HTTP methods like <code class="language-plaintext highlighter-rouge">post</code>, <code class="language-plaintext highlighter-rouge">delete</code>… <ul> <li>There is a special routing method <code class="language-plaintext highlighter-rouge">all</code> which is used for the routes which handle all kinds of HTTP methods</li> </ul> </li> <li>There is a callback method that is called when the server receives a request from that endpoint with that specified HTTP method</li> </ul> <p>🥳 Horray! “Hello, World” is now visible in the <code class="language-plaintext highlighter-rouge">/</code> route</p> <p><img src="https://imgur.com/Lw35Azu.png" alt=""/></p> <h2 id="setting-up-mongodb">Setting up MongoDB</h2> <p>Let’s get in the MongoDB database now 😎.</p> <p>Head over <a href="https://www.mongodb.com/">MongoDB</a> and sign up/sign in and create a new project</p> <p><img src="https://imgur.com/P1PiZ7r.png" alt=""/></p> <p>You could your co-worker into the project if you wanted too.</p> <p>After the creation of the project, click on <code class="language-plaintext highlighter-rouge">Build a Database</code></p> <p><img src="https://imgur.com/COT14kz.png" alt=""/></p> <p>You would be shown with a screen something like this:</p> <p><img src="https://imgur.com/gLTxjxN.png" alt=""/></p> <p>Let’s go ahead and choose the free plan 👀</p> <p>You would be shown some more options about the cloud provider and the location</p> <p>Let’s choose the nearest region and move forward.</p> <p>You would be asked to create a user. This is required as you would need the username and password to generate a connection URL which is then used to connect MongoDB with your NodeJS app.</p> <p>The creation of the cluster would take 1 - 3 minutes. So let’s grab a cup of coffee until then ☕. Ahh… it’s been successfully created so let’s get back to coding 👨‍💻</p> <p>Click on <code class="language-plaintext highlighter-rouge">Connect</code></p> <p><img src="https://imgur.com/YXMw142.png" alt=""/></p> <p>Click on <code class="language-plaintext highlighter-rouge">Connect your application</code></p> <p><img src="https://imgur.com/26S40MA.png" alt=""/></p> <p>Copy the connection URL</p> <p><img src="https://imgur.com/YqtMG1i.png" alt=""/></p> <p>Create a <code class="language-plaintext highlighter-rouge">.env</code> file and replace <code class="language-plaintext highlighter-rouge">&lt;password&gt;</code> with the password of the user which you have replaced previously</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MONGODB_URL="mongodb+srv://kira272921:&lt;password&gt;@dev-credits-api.t5tkf.mongodb.net/myFirstDatabase?retryWrites=true&amp;w=majority"
</code></pre></div></div> <p>Let’s head back to the good old <code class="language-plaintext highlighter-rouge">index.js</code> file</p> <h2 id="connecting-express-app-to-mongodb">Connecting Express app to MongoDB</h2> <p>Let’s start by requiring <code class="language-plaintext highlighter-rouge">mongoose</code> and <code class="language-plaintext highlighter-rouge">dotenv</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">dotenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">dotenv</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div> <p>Let’s configure dotenv as well</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">();</span>
</code></pre></div></div> <p>Let’s finally add the piece of code which connects our express application to MongoDB</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">mongoose</span>
  <span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGODB_URL</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">useNewUrlParser</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">useUnifiedTopology</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Connected to MongoDB</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
  <span class="p">});</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">index.js</code> file show looks something like this now</p> <p><code class="language-plaintext highlighter-rouge">index.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">dotenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">dotenv</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">mongoose</span>
  <span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGODB_URL</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">useNewUrlParser</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">useUnifiedTopology</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Connected to MongoDB</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
  <span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello, World!</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Server is running at port </span><span class="p">${</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>🥳 We successfully connected our express app to the MongoDB database.</p> <h2 id="creating-schema-and-model-">Creating Schema and Model 📝</h2> <p>A Schema is the structure of the documents in our database. It tells what fields are required, what’s the data type of each field.</p> <p>A model provides a programming interface for interacting with the database (read, insert, update, etc).</p> <p>Let’s create a new folder named <code class="language-plaintext highlighter-rouge">model</code> and inside it let’s create a <code class="language-plaintext highlighter-rouge">model.js</code> where we will define our schema</p> <p><code class="language-plaintext highlighter-rouge">model/model.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
  <span class="na">credits</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
    <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">id</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
    <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">});</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="dl">'</span><span class="s1">devCredits</span><span class="dl">'</span><span class="p">,</span> <span class="nx">devCredits</span><span class="p">);</span>
</code></pre></div></div> <p>Let’s breakdown it down and understand</p> <ul> <li>We imported the <code class="language-plaintext highlighter-rouge">mongoose</code> package into the <code class="language-plaintext highlighter-rouge">model/model.js</code> file</li> <li>We created a new schema named <code class="language-plaintext highlighter-rouge">devCredits</code>. The structure has the <code class="language-plaintext highlighter-rouge">credits</code> and <code class="language-plaintext highlighter-rouge">id</code>. Credits are the number of dev credits the person has and the id is the discord id of the user (This API was initially created for a discord bot <a href="https://github.com/Kira272921/dev-credits-bot">Dev credits bot</a> so the schema of the database is kinda based on discord 🤷‍♂️)</li> <li>We have finally created a model named “devCredits”</li> </ul> <h2 id="adding-more-features-">Adding more features 😎</h2> <p>Let’s add more routes to our REST API. Let’s add routes where we can get the total dev credits of a user via their discord ID and give dev credits to other users using another route.</p> <h3 id="giving-dev-credits-to-other-devs">Giving dev credits to other devs</h3> <p>Let’s import our model which we have just created into the <code class="language-plaintext highlighter-rouge">index.js</code> file.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./model/model.js</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div> <p>Let’s add a new POST route in the <code class="language-plaintext highlighter-rouge">index.js</code> file</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/post</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">credit</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">devCredits</span><span class="p">({</span>
    <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="na">credits</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">credits</span><span class="p">,</span>
  <span class="p">});</span>

  <span class="nx">devCredits</span><span class="p">.</span><span class="nx">countDocuments</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">devCredits</span><span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">(</span>
        <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">$inc</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">credits</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">credits</span><span class="p">,</span>
          <span class="p">},</span>
        <span class="p">},</span>
        <span class="p">{</span> <span class="na">new</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
        <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">devCredit</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
          <span class="p">}</span> <span class="k">else</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">devCredit</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">credit</span><span class="p">.</span><span class="nx">save</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">credits</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">credits</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div> <p>Let’s understand what exactly is going on:</p> <ul> <li>We have created a new POST route (<code class="language-plaintext highlighter-rouge">/post</code>)</li> <li>We validate the data which we receive from the client using our model</li> <li>In the next piece of code we are checking if the user (user id) already exists in the database or not <ul> <li>If exists then we are going to increment the credits value</li> <li>Else we are going to create a new document with the user id and add the credits</li> </ul> </li> </ul> <h3 id="how-to-test-the-api">How to test the API?</h3> <p>We have successfully created added a new feature in our API 🥳. But wait how are we going to test it out 🤔</p> <p>👀 We are going to use a VSCode extension called <a href="https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client">Thunder Client</a>, which is used for API testing. So let’s quickly download it and test our new feature in our API 🥳.</p> <p>After the completion of the download, you are going to see a thunder icon in your sidebar 👀</p> <p><img src="https://imgur.com/xpDcJ9t.png" alt=""/></p> <p>Click the thunder icon and you are going to see a section something like this</p> <p><img src="https://imgur.com/FEa3FBo.png" alt=""/></p> <p>Click on <code class="language-plaintext highlighter-rouge">New Request</code>. You would be prompted to screen something like this</p> <p><img src="https://imgur.com/8Df3YZO.png" alt=""/></p> <p>Let’s test out our <code class="language-plaintext highlighter-rouge">/post</code> route now 🥳. Change the URL in the input box from to <code class="language-plaintext highlighter-rouge">localhost:3000/post</code></p> <p>Change the request method from <code class="language-plaintext highlighter-rouge">GET</code> to <code class="language-plaintext highlighter-rouge">POST</code></p> <p><img src="https://imgur.com/ID9Ieie.png" alt=""/></p> <p>Navigate to the <code class="language-plaintext highlighter-rouge">Body</code> tab, this is the section where we are going to write the body of the request.</p> <p>I have added my discord ID and gave 100 dev credits to it, <em>cuz why not</em></p> <p><img src="https://imgur.com/RUfKWjt.png" alt=""/></p> <p>Let’s click and hope that it works 🤞</p> <p>🥁🥁🥁🥁🥁 and we got an error</p> <p><img src="https://imgur.com/LP7dnOb.png" alt=""/></p> <p>This happened because we didn’t have any middleware so let’s them quickly</p> <p><code class="language-plaintext highlighter-rouge">index.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cors</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="na">extended</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}));</span>
</code></pre></div></div> <p><strong>NOTE</strong>: We had installed cors as a separated package, so don’t forget to import it as well</p> <p>Let’s try again now so that it works now 🤞</p> <p>🎉 <strong>TADA</strong>! We have successfully created our first feature in the API which interacts with the MongoDB database</p> <p><img src="https://imgur.com/JIJUj9f.png" alt=""/></p> <h3 id="getting-the-total-dev-credits-of-a-user">Getting the total dev credits of a user</h3> <p>Let’s import our model which we have just created into the <code class="language-plaintext highlighter-rouge">index.js</code> file.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./model/model.js</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div> <p>Let’s add a new route in the <code class="language-plaintext highlighter-rouge">index.js</code> file</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/get/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">devCredits</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="na">_id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">__v</span><span class="p">:</span> <span class="mi">0</span> <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div> <p>Let’s breakdown this down</p> <ul> <li>We have created a new route with the GET method</li> <li>We are finding in the database for the ID given in the parameters</li> </ul> <p>Let’s test it out again using Thunder Client 👀.</p> <p>🎉<strong>TADA</strong>! It’s works</p> <p><img src="https://imgur.com/GBIj7Xk.png" alt=""/></p> <h2 id="cleaning-up-the-codebase">Cleaning up the codebase</h2> <p>Let’s clean up the codebase a bit 😅.</p> <p>Let’s create a new folder called <code class="language-plaintext highlighter-rouge">routes</code> and inside it let’s create a new file <code class="language-plaintext highlighter-rouge">router.js</code> which contains the routes</p> <p><code class="language-plaintext highlighter-rouge">routes/router.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">).</span><span class="nx">Router</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../model/model.js</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/get/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">devCredits</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="na">_id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">__v</span><span class="p">:</span> <span class="mi">0</span> <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/post</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">credit</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">devCredits</span><span class="p">({</span>
    <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="na">credits</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">credits</span><span class="p">,</span>
  <span class="p">});</span>

  <span class="nx">devCredits</span><span class="p">.</span><span class="nx">countDocuments</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">devCredits</span><span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">(</span>
        <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">$inc</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">credits</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">credits</span><span class="p">,</span>
          <span class="p">},</span>
        <span class="p">},</span>
        <span class="p">{</span> <span class="na">new</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
        <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">devCredit</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
          <span class="p">}</span> <span class="k">else</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">devCredit</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">credit</span><span class="p">.</span><span class="nx">save</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">credits</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">credits</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</code></pre></div></div> <p>We have imported the <code class="language-plaintext highlighter-rouge">routes/router.js</code> file into the <code class="language-plaintext highlighter-rouge">index.js</code> file and used it</p> <p><code class="language-plaintext highlighter-rouge">index.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">dotenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">dotenv</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">cors</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">cors</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./routes/router.js</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cors</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="na">extended</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}));</span>

<span class="nx">mongoose</span>
  <span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGODB_URL</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">useNewUrlParser</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">useUnifiedTopology</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Connected to MongoDB</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
  <span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello, World!</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Server is running at port </span><span class="p">${</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>Let’s test it out so that we are sure that our code and we didn’t mess up by cleaning up the mess 😆</p> <p>🥳 Horray! There isn’t any error and the code still works as it was before</p> <p><img src="https://imgur.com/Jj9ee1L.png" alt=""/></p> <p>😅 Doesn’t <code class="language-plaintext highlighter-rouge">routes/router.js</code> seem kinda filled up with the logic and make it kinda messy?</p> <p>Let’s create a new folder named <code class="language-plaintext highlighter-rouge">controllers</code>. In this folder, we will store the logic related to each route.</p> <p>Let’s get started by creating a new file in the <code class="language-plaintext highlighter-rouge">controllers</code> folder named <code class="language-plaintext highlighter-rouge">getCredits.js</code> and <code class="language-plaintext highlighter-rouge">postCredits.js</code> which contains the logic related to the <code class="language-plaintext highlighter-rouge">/get</code> route and <code class="language-plaintext highlighter-rouge">/post</code> route respectively</p> <p><code class="language-plaintext highlighter-rouge">controllers/getCredits.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../model/model.js</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">getCredits</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">devCredits</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="na">_id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">__v</span><span class="p">:</span> <span class="mi">0</span> <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">getCredits</span><span class="p">;</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">controllers/postCredits.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../model/model.js</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">postCredits</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">credit</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">devCredits</span><span class="p">({</span>
    <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="na">credits</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">credits</span><span class="p">,</span>
  <span class="p">});</span>

  <span class="nx">devCredits</span><span class="p">.</span><span class="nx">countDocuments</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">devCredits</span><span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">(</span>
        <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">$inc</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">credits</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">credits</span><span class="p">,</span>
          <span class="p">},</span>
        <span class="p">},</span>
        <span class="p">{</span> <span class="na">new</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
        <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">devCredit</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
          <span class="p">}</span> <span class="k">else</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">devCredit</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">credit</span><span class="p">.</span><span class="nx">save</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">image</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">image</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">postCredits</span><span class="p">;</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">routes/router.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">).</span><span class="nx">Router</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../model/model.js</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">getCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../controllers/getCredits.js</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">postCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../controllers/postCredits.js</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/get/:id</span><span class="dl">'</span><span class="p">,</span> <span class="nx">getCredits</span><span class="p">);</span>

<span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/post</span><span class="dl">'</span><span class="p">,</span> <span class="nx">postCredits</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</code></pre></div></div> <p>Phew, that was a lot of work 😹</p> <h2 id="adding-rate-limit">Adding rate limit</h2> <p>You don’t want some random guy to just spam your entire database 😆. So let’s add a rate limit to our API when restricts the client to perform only a few requests every x minutes</p> <p>Let’s install <a href="https://www.npmjs.com/package/express-rate-limit">express-rate-limit</a> package</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install </span>express-rate-limit

<span class="c"># or</span>

<span class="nv">$ </span>yarn add express-rate-limit
</code></pre></div></div> <p>Let’s create a <code class="language-plaintext highlighter-rouge">middleware</code> folder that contains all the middlewares of our API. Create a file named <code class="language-plaintext highlighter-rouge">rateLimiter.js</code> under the <code class="language-plaintext highlighter-rouge">middleware</code> folder</p> <p><code class="language-plaintext highlighter-rouge">middleware/rateLimiter.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">rateLimit</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express-rate-limit</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">rateLimiter</span> <span class="o">=</span> <span class="nx">rateLimit</span><span class="p">({</span>
  <span class="na">windowMs</span><span class="p">:</span> <span class="mi">1</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span> <span class="c1">// 1 minute</span>
  <span class="na">max</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
  <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Bonk 🔨</span><span class="dl">'</span><span class="p">,</span>
<span class="p">});</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">rateLimiter</span><span class="p">;</span>
</code></pre></div></div> <p>Let’s understand what this piece of code is doing?</p> <ul> <li>We are importing the <code class="language-plaintext highlighter-rouge">express-rate-limit</code> package</li> <li>The <code class="language-plaintext highlighter-rouge">windowMs</code> specifies the duration</li> <li>The <code class="language-plaintext highlighter-rouge">max</code> specifies the max amount of requests the client can make in the duration specified</li> <li>The <code class="language-plaintext highlighter-rouge">message</code> is the message which is shown to the client when he exceeds the max limit</li> </ul> <p>So let’s import into the <code class="language-plaintext highlighter-rouge">index.js</code> file and test it out</p> <p><code class="language-plaintext highlighter-rouge">index.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">rateLimiter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./middleware/rateLimiter.js</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">rateLimiter</span><span class="p">);</span>
</code></pre></div></div> <p>😹 I got bonked by myself</p> <p><img src="https://imgur.com/zDzExMZ.png" alt=""/></p> <h1 id="deploying-our-api-on-heroku">Deploying our API on Heroku</h1> <p>👀 We have successfully built an API but how would other developers use it if it isn’t deployed?</p> <p>Let’s deploy it on Heroku 🚀.</p> <p>Get started by initializing a git repository in the directory. Create a new GitHub repository and push your changes into that repository 👀</p> <p>Let’s create a new file named <code class="language-plaintext highlighter-rouge">Procfile</code> which is just a file that tells Heroku which command is need to be run. Add the below content to the <code class="language-plaintext highlighter-rouge">Procfile</code> file</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>web: node index.js
</code></pre></div></div> <p><strong>NOTE</strong>: nodemon doesn’t work in the production stage. It only works in the development stage, so we have to use the good old <code class="language-plaintext highlighter-rouge">node index.js</code></p> <p>Create an account on <a href="https://herokuapp.com/">Heroku</a> and click on <code class="language-plaintext highlighter-rouge">Create new app</code>, give some cool name to your API</p> <p><img src="https://imgur.com/pqdLULG.png" alt=""/></p> <p>Head over to the settings tab and click <code class="language-plaintext highlighter-rouge">Reveal Config Vars</code></p> <p>These are the environment variables <img src="https://imgur.com/aj7mHCD.png" alt=""/></p> <p>Add a new config var with the key as <code class="language-plaintext highlighter-rouge">MONGODB_URL</code> and the value as your MongoDB connection URL</p> <p>Head back to the deploy tab and connect the GitHub repository which you have created just before to your Heroku application</p> <p><img src="https://imgur.com/eBgS6pU.png" alt=""/></p> <p>Click the <code class="language-plaintext highlighter-rouge">Deploy branch</code> button. <strong>TADA</strong> 🚀 You have successfully created a REST API and deployed it as well :D</p> <p>The entire source code for this tutorial will be available on <a href="https://github.com/Kira272921/dev-credits-api">my GitHub</a>.</p> <p><a href="https://devcredits-api.herokuapp.com">Check out the API</a> which we built today.</p> <p>That’s it for this blog folks 🤞. Meet y’all in the next blog post</p>]]></content><author><name>kira</name></author><category term="backend"/><category term="node-js"/><category term="mongodb"/><category term="api"/><summary type="html"><![CDATA[The guide to teach you how to build a REST API from beginning till deployment.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/90365542/150640432-993a9fd8-4472-457c-9074-9e6fbd273743.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/90365542/150640432-993a9fd8-4472-457c-9074-9e6fbd273743.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">5 CSS methodologies you need to know in 2022</title><link href="https://genicsblog.com/five-css-methodologies-you-need-to-know-in-2022" rel="alternate" type="text/html" title="5 CSS methodologies you need to know in 2022"/><published>2022-01-21T00:00:00+00:00</published><updated>2022-01-21T00:00:00+00:00</updated><id>https://genicsblog.com/five-css-methodologies-you-need-to-know-in-2022</id><content type="html" xml:base="https://genicsblog.com/five-css-methodologies-you-need-to-know-in-2022"><![CDATA[<p>In large, complicated, rapidly-iterated systems, CSS is notoriously difficult to maintain. The lack of a built-in scoping mechanism in CSS is one of the reasons.</p> <p>In CSS, everything is global. Until CSS gets its native scoping mechanism, we need to devise our own system for locking down styles to specific sections of an HTML document. CSS methodologies are the solution.</p> <p>In this article, we will take a look at the CSS methodologies you need to know in 2022!</p> <h2 id="1-object-oriented-css">1. Object-oriented CSS</h2> <p><a href="http://oocss.org/">OOCSS</a> concepts help us write components that are flexible, modular and interchangeable.</p> <p>For example, the style of your button elements might be set via two classes that you have given the class of:</p> <ul> <li><code class="language-plaintext highlighter-rouge">.button</code> — Provides the button’s basic structure.</li> <li><code class="language-plaintext highlighter-rouge">.grey-btn</code> — Applies colors and other visual properties.</li> </ul> <p>CSS:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.button</span> <span class="p">{</span>
    <span class="nl">box-sizing</span><span class="p">:</span> <span class="n">border-box</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">50px</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.grey-btn</span> <span class="p">{</span>
    <span class="nl">background</span><span class="p">:</span> <span class="m">#EEE</span><span class="p">;</span>
    <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="m">#DDD</span><span class="p">;</span>
    <span class="nl">box-shadow</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.5</span><span class="p">)</span> <span class="m">1px</span> <span class="m">1px</span> <span class="m">3px</span><span class="p">;</span>
    <span class="nl">color</span><span class="p">:</span> <span class="m">#555</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>HTML:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"button grey-btn"</span><span class="nt">&gt;</span>
    Click me!
<span class="nt">&lt;/button&gt;</span>
</code></pre></div></div> <h2 id="2-atomic-css">2. Atomic CSS</h2> <p><a href="https://acss.io/">Atomic CSS</a> is the approach to CSS architecture that favors small, single-purpose classes with names based on visual function.</p> <p>Example:</p> <p>Colors are set using hexadecimal values. Alpha transparency is created by appending the opacity value to the hex color.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"Bgc(#0280ae.5) C(#fff) P(20px)"</span><span class="nt">&gt;</span>
    Lorem ipsum
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <h2 id="3-bem">3. BEM</h2> <p><a href="http://getbem.com/">Block Element Modifier</a> is a methodology that helps you to create reusable components and code sharing in front-end development.</p> <p>Example:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">class=</span><span class="s">"loginform loginform--errors"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"loginform__username loginform__username--error"</span><span class="nt">&gt;</span> 
        Username <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"username"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"loginform__password"</span><span class="nt">&gt;</span>
        Password <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"password"</span> <span class="na">name=</span><span class="s">"password"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"loginform__btn loginform__btn--inactive"</span><span class="nt">&gt;</span>
        Sign in
    <span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">.loginform</code> class is a block composed of three elements:</p> <table> <thead> <tr> <th>Element</th> <th>Purpose</th> </tr> </thead> <tbody> <tr> <td>loginform__username</td> <td>Takes in the username</td> </tr> <tr> <td>loginform__password</td> <td>Takes in the password</td> </tr> <tr> <td>loginform__btn</td> <td>Allow the user to submit the web form</td> </tr> </tbody> </table> <h2 id="4-sma-css">4. SMA CSS</h2> <p><a href="http://smacss.com/">SMACSS</a> is a way to examine your design process and as a way to fit those rigid frameworks into a flexible thought process.</p> <p>Example:</p> <p>Let’s say our layout is called <code class="language-plaintext highlighter-rouge">.l-footer</code>. We have a search form module inside it. The search form has already been submitted at least once by the user.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"l-footer"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">class=</span><span class="s">"search is-submitted"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"search"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">value=</span><span class="s">"Search"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/section&gt;</span>
</code></pre></div></div> <h2 id="5-systematic-css">5. Systematic CSS</h2> <p><a href="https://www.yumpu.com/en/document/read/47573458/systematic-css">Systematic CSS</a> shares many of the principles and ideas you can find in OOCSS, BEM, SMACSS, SUIT CSS, and other CSS methodologies. Systematic CSS is meant to be a simpler alternative to existing CSS methodologies.</p> <p>Example:</p> <p>Here’s the markup for two widgets that render a navigation bar and search form:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- navigation bar --&gt;</span> 
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"NavBar"</span><span class="nt">&gt;</span>
   <span class="nt">&lt;ul&gt;</span>
      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"./"</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"about.html"</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"learn/"</span><span class="nt">&gt;</span>Learn<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"extend/"</span><span class="nt">&gt;</span>Extend<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"share/"</span><span class="nt">&gt;</span>Share<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
   <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="c">&lt;!-- search form --&gt;</span> 
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"SearchBox"</span><span class="nt">&gt;</span>
   <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"search.html"</span> <span class="na">method=</span><span class="s">"get"</span><span class="nt">&gt;</span>
       <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"input-search"</span><span class="nt">&gt;</span>Search<span class="nt">&lt;/label&gt;</span>
       <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">"q"</span> <span class="na">type=</span><span class="s">"search"</span> <span class="na">id=</span><span class="s">"input-search"</span> <span class="nt">/&gt;</span>
       <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>Search<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <p>Content — in the form of widgets and naked HTML elements — is then placed within the layout. Finally, modifier classes are added to vary the default presentation of things.</p> <h2 id="conclusion">Conclusion</h2> <p>By providing a class-based approach for dividing up large web designs into many small, modular, distinct components, all CSS techniques address the scalability and maintainability challenge in CSS.</p> <p>Each UI module can be reused throughout a design and even ported from one project to the next if the CSS methodologies are the same. CSS approaches do a lot more than just solving the CSS scalability issue.</p> <h3 id="thank-you-for-reading">Thank you for reading</h3> <p>If you liked this post, subscribe to <a href="https://abhirajbhowmick.substack.com" rel="dofollow">my newsletter</a> to never miss out on <a href="https://abhiraj.co" rel="dofollow">my articles</a>, product launches, and tech news!</p>]]></content><author><name>abhiraj</name></author><category term="web"/><category term="beginners"/><category term="web-development"/><summary type="html"><![CDATA[CSS methodogies lets us author CSS in a way that allows us to develop, maintain and scale the front-end as a set of small, isolated modules.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/150502332-2a32ea09-672f-4d7d-935f-619130c53fd8.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/150502332-2a32ea09-672f-4d7d-935f-619130c53fd8.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How to Secure API tokens</title><link href="https://genicsblog.com/MaheshtheDev/how-to-secure-api-tokens" rel="alternate" type="text/html" title="How to Secure API tokens"/><published>2022-01-20T00:00:00+00:00</published><updated>2022-01-20T00:00:00+00:00</updated><id>https://genicsblog.com/MaheshtheDev/how-to-secure-api-tokens</id><content type="html" xml:base="https://genicsblog.com/MaheshtheDev/how-to-secure-api-tokens"><![CDATA[<p>If you are into the tech world for a while, I’m sure you heard about the word <code class="language-plaintext highlighter-rouge">API</code>. It stands for Application Program Interface. For example, Google has API which gives user details access to third party software.</p> <p>Basically, API acts as a bridge to pass information to authenticated third-party software. To authenticate these third parties, an API token is required.</p> <p>Many contributors use this API tokens to create some unique products like creating Telegram Bot, Slack Bot. Although the product gets built successfully, contributors can get organized by open-sourcing their code. But it’s very important that they secure the API token before they publish it to GitHub!</p> <p>Different ways of Securing API:</p> <ol> <li>Securing API tokens on Windows</li> <li>Securing API tokens on GitHub</li> <li>Securing API on Heroku</li> </ol> <h1 id="securing-api-tokens-on-windows">Securing API tokens on Windows:</h1> <p>To secure API token you need to define them in the environment variables.</p> <ol> <li>Search the <code class="language-plaintext highlighter-rouge">Environment Variables</code> you will find Edit the Environment variables, open it. There, you will find these settings:</li> </ol> <p><img src="https://miro.medium.com/max/824/1*AvRoS1MbBRl4oe2q7Tq-rA.png" alt=""/></p> <ol> <li>Then go to Environment Variables. Click on the New button then add the API token with some variable name and take note of it:</li> </ol> <p><img src="https://miro.medium.com/max/1306/1*hRrygxDz_d5EbPRZfsDh6w.png" alt=""/></p> <ol> <li>After adding this Variable then restart it.</li> </ol> <p>Now you can use this API token across any code in your local system!</p> <h1 id="securing-api-tokens-on-github">Securing API tokens on GitHub:</h1> <ol> <li>You need to have the code pushed to GitHub. Open the Your Repo Settings tab as shown below.</li> </ol> <p><img src="https://miro.medium.com/max/2666/1*wpoSrUMBBM05WfZrSEXOrA.png" alt=""/></p> <ol> <li> <p>Then open Secrets on the left side as shown in the above picture.</p> </li> <li> <p>Then add new Secret with the key name and API token.</p> </li> <li> <p>Now this key works across the repository.</p> </li> </ol> <p>Secret Keys won’t be disclosed to any other users or third parties by GitHub.</p> <h1 id="securing-api-tokens-on-heroku">Securing API tokens on Heroku:</h1> <p>In Heroku, you can do this in two ways either through Heroku CLI or Dashboard.</p> <h2 id="heroku-cli">Heroku CLI</h2> <ol> <li>Open CMD and login to Heroku with Heroku login</li> <li>Go to your Project Folder</li> <li>Then use this command: <code class="language-plaintext highlighter-rouge">heroku config:set &lt;Key&gt;=&lt;Value&gt; &lt;Key&gt;=&lt;Value&gt;</code></li> </ol> <p>Now you can use the key name anywhere in the project!</p> <h2 id="heroku-dashboard">Heroku Dashboard:</h2> <ol> <li>First Create an app in the Heroku</li> <li>Go to the App settings tab</li> <li>Go to Config Vars and add your API tokens</li> </ol> <p><img src="https://miro.medium.com/max/2480/1*MJWNVqZQpfWIpiLm9wTwsg.png" alt=""/></p> <p>That’s it for the post. I hope this post is helpful to you!</p>]]></content><author><name>MaheshtheDev</name></author><category term="web"/><category term="API"/><category term="security"/><category term="web-development"/><summary type="html"><![CDATA[Securing API tokens is important to avoid their misuse. This post will show you how to secure your API tokens!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.techfunnel.com/wp-content/uploads/2021/07/application-programming-interface.png"/><media:content medium="image" url="https://www.techfunnel.com/wp-content/uploads/2021/07/application-programming-interface.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Metamask authentication with ThirdWeb in Next.JS</title><link href="https://genicsblog.com/anurag/metamask-authentication-with-thirdweb-in-nextjs" rel="alternate" type="text/html" title="Metamask authentication with ThirdWeb in Next.JS"/><published>2022-01-15T00:00:00+00:00</published><updated>2022-01-15T00:00:00+00:00</updated><id>https://genicsblog.com/anurag/metamask-authentication-with-thirdweb-in-nextjs</id><content type="html" xml:base="https://genicsblog.com/anurag/metamask-authentication-with-thirdweb-in-nextjs"><![CDATA[<p>Hey There! What’s up!</p> <p><img src="https://media.giphy.com/media/zSHERzpaQ9x8k/giphy.gif" alt="hello"/></p> <p>So Web3 has been in total hype these days, and a lot of developers have been trying out web3 lately, including me.</p> <p>And, Authentication is one of the most skeptical parts of a Full Stack application! And in Web 3.0, this flow is managed by wallets, and Metamask is the most popular among them.</p> <p>So, in this article, I’m going to show how you can integrate Metamask auth with ThirdWeb in NextJS!</p> <h3 id="demo-of-what-we-are-building-today">Demo of what we are building today:</h3> <div class="mb-6 aspect-video"> <iframe src="https://www.loom.com/embed/d28cd1093e8046a8b9475777d3bf65ac?hide_owner=true&amp;hide_share=true&amp;hide_title=true&amp;hideEmbedTopBar=true" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen="" class="w-full h-full rounded-xl" loading="lazy"> </iframe> </div> <h3 id="installing-a-new-nextjs-app">Installing a new NextJS app</h3> <p>First, create a NextJS app. I’m also using Tailwind CSS as my UI preference. You can use anything that you like.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx create-next-app <span class="nt">-e</span> with-tailwindcss metamask-auth
</code></pre></div></div> <h4 id="clear-up-the-boilerplate">Clear up the boilerplate</h4> <p>Now, clear up the boilerplate in the <code class="language-plaintext highlighter-rouge">index.js</code> file.</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Home</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>
<span class="p">}</span>
</code></pre></div></div> <h4 id="installing-the-dependencies">Installing the dependencies</h4> <p>Now, we will install the only required dependency for this app, <code class="language-plaintext highlighter-rouge">@3rdweb/hooks</code>. Go ahead and install <code class="language-plaintext highlighter-rouge">@3rdweb/hooks</code> in your project directory.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># for npm</span>
npm i @3rdweb/hooks

<span class="c"># for yarn</span>
yarn add @3rdweb/hooks
</code></pre></div></div> <h3 id="setting-up-the-third-web-provider">Setting up the Third Web Provider</h3> <p>Now, we are going to set up the <code class="language-plaintext highlighter-rouge">ThirdwebWeb3Provider</code> in our <code class="language-plaintext highlighter-rouge">_app.js</code> file:</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">"</span><span class="s2">../styles/globals.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ThirdwebWeb3Provider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@3rdweb/hooks</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="dl">"</span><span class="s2">regenerator-runtime/runtime</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">MyApp</span><span class="p">({</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">pageProps</span> <span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">supportedChainIds</span> <span class="o">=</span> <span class="p">[</span><span class="mi">80001</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>

  <span class="kd">const</span> <span class="nx">connectors</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">injected</span><span class="p">:</span> <span class="p">{},</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">ThirdwebWeb3Provider</span>
      <span class="na">supportedChainIds</span><span class="p">=</span><span class="si">{</span><span class="nx">supportedChainIds</span><span class="si">}</span>
      <span class="na">connectors</span><span class="p">=</span><span class="si">{</span><span class="nx">connectors</span><span class="si">}</span>
    <span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Component</span> <span class="si">{</span><span class="p">...</span><span class="nx">pageProps</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">ThirdwebWeb3Provider</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyApp</span><span class="p">;</span>
</code></pre></div></div> <p>Here, first, we are going to import the provider and <code class="language-plaintext highlighter-rouge">regenerator-runtime/runtime</code> at the top of the script.</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ThirdwebWeb3Provider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@3rdweb/hooks</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="dl">"</span><span class="s2">regenerator-runtime/runtime</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div> <p>Next, in the main function, we are specifying the <code class="language-plaintext highlighter-rouge">supportedChainIds</code> and <code class="language-plaintext highlighter-rouge">connectors</code>. You might be wondering what are these.</p> <p><code class="language-plaintext highlighter-rouge">supportedChainIds</code> contains a list of networks that are supported by our app. Here, <code class="language-plaintext highlighter-rouge">80001</code> is for <code class="language-plaintext highlighter-rouge">Mumbai Testnet Network</code> and <code class="language-plaintext highlighter-rouge">4</code> is for <code class="language-plaintext highlighter-rouge">Rinkeby Testnet Network</code>. You can check the list of all networks and their Chain Ids <a href="Link">here</a> .</p> <p><code class="language-plaintext highlighter-rouge">connectors</code> is basically all the wallet providers we want to support. Here, <code class="language-plaintext highlighter-rouge">injected</code> is for Metamask wallet. This will be used when we are actually making the function to connect wallet.</p> <p>Next, we are wrapping our whole app in <code class="language-plaintext highlighter-rouge">ThirdwebWeb3Provider</code> with <code class="language-plaintext highlighter-rouge">supportedChainIds</code> and <code class="language-plaintext highlighter-rouge">connectors</code> props to specify the configuration.</p> <p>That’s it for the <code class="language-plaintext highlighter-rouge">_app.js</code> file.</p> <h3 id="making-a-ui-in-the-indexjs-file">Making a UI in the <code class="language-plaintext highlighter-rouge">index.js</code> file</h3> <p>Now, let’s first make a UI for the login flow.</p> <p>Head over to <code class="language-plaintext highlighter-rouge">index.js</code> file and make a simple <code class="language-plaintext highlighter-rouge">button</code> to connect wallet.</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Home</span><span class="p">()</span> <span class="p">{</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"flex flex-col items-center justify-center min-h-screen py-2 bg-slate-100"</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span>
          <span class="na">className</span><span class="p">=</span><span class="s">"px-4 py-2 rounded-md bg-purple-600 cursor-pointer hover:bg-purple-500 text-xl font-semibold duration-100 text-white"</span>
        <span class="p">&gt;</span>
          Connect Wallet
        <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>At this point, you will have a basic UI like this:</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641906515845/FMDlG49IA.png" alt="Screenshot (3).png"/></p> <h3 id="building-the-connect-wallet-functionality">Building the connect wallet functionality</h3> <p>Now, let’s build the <code class="language-plaintext highlighter-rouge">connect wallet</code> functionality.</p> <p>First, we will import the <code class="language-plaintext highlighter-rouge">useWeb3</code> hook from <code class="language-plaintext highlighter-rouge">@3rdweb/hooks</code> in our <code class="language-plaintext highlighter-rouge">index.js</code> file:</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useWeb3</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@3rdweb/hooks</span><span class="dl">"</span> 
</code></pre></div></div> <p>Now, inside the <code class="language-plaintext highlighter-rouge">Home</code> component:</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">connectWallet</span><span class="p">,</span> <span class="nx">address</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useWeb3</span><span class="p">();</span>
</code></pre></div></div> <p>Now, we are going to assign the <code class="language-plaintext highlighter-rouge">connectWallet</code> to the connect wallet button:</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">button</span> <span class="na">className</span><span class="p">=</span><span class="s">"px-4 py-2 rounded-md bg-purple-600 cursor-pointer hover:bg-purple-500 text-xl font-semibold duration-100 text-white"</span>
<span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span><span class="o">=&gt;</span><span class="nx">connectWallet</span><span class="p">(</span><span class="dl">"</span><span class="s2">injected</span><span class="dl">"</span><span class="p">)</span><span class="si">}</span>
<span class="p">&gt;</span>
      Connect Wallet
<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</code></pre></div></div> <p>Here, we are passing <code class="language-plaintext highlighter-rouge">injected</code> as a param to the <code class="language-plaintext highlighter-rouge">connectWallet</code> function. If your remember from the above steps, this is used to specify that we are going to use Metamask to authenticate user.</p> <p>Now, at this point, you will have a working connect wallet button.</p> <h4 id="displaying-user-address">Displaying user address:</h4> <p>Now, in the <code class="language-plaintext highlighter-rouge">Home</code> component, we are going to check if the user is authenticated and then render component based on that:</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">return</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"flex flex-col items-center justify-center min-h-screen py-2 bg-slate-100"</span><span class="p">&gt;</span>
    <span class="si">{</span><span class="nx">address</span> <span class="p">?</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">p</span> <span class="na">className</span><span class="p">=</span><span class="s">"px-2 py-1 rounded-full bg-gray-200 hover:bg-gray-300 font-mono font-medium cursor-pointer duration-100"</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="nx">address</span><span class="si">}</span>
      <span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">button</span>
        <span class="na">className</span><span class="p">=</span><span class="s">"px-4 py-2 rounded-md bg-purple-600 cursor-pointer hover:bg-purple-500 text-xl font-semibold duration-100 text-white"</span>
        <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span><span class="o">=&gt;</span><span class="nx">connectWallet</span><span class="p">(</span><span class="dl">"</span><span class="s2">injected</span><span class="dl">"</span><span class="p">)</span><span class="si">}</span>
      <span class="p">&gt;</span>
        Connect Wallet
      <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">)</span><span class="si">}</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div> <h4 id="error-handling">Error handling:</h4> <p>Sometimes, the app may not work cause of errors, so in that case, we can use the <code class="language-plaintext highlighter-rouge">error</code> object and log its value.</p> <p>Below our <code class="language-plaintext highlighter-rouge">useWeb3</code> hook:</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">connectWallet</span><span class="p">,</span> <span class="nx">address</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useWeb3</span><span class="p">();</span>

<span class="nx">error</span> <span class="p">?</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">:</span> <span class="kc">null</span><span class="p">;</span>
</code></pre></div></div> <p>That’s it! We have done it!</p> <p><img src="https://media.giphy.com/media/3o6fJ1BM7R2EBRDnxK/giphy.gif" alt="congrats"/></p>]]></content><author><name>anurag</name></author><category term="web3"/><category term="blockchain"/><category term="crypto"/><category term="next-js"/><summary type="html"><![CDATA[Let's learn how authentication works in the web3 world!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/77309809/149489789-db55b033-3196-45e7-9f72-cb49c3630c2f.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/77309809/149489789-db55b033-3196-45e7-9f72-cb49c3630c2f.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Make your first Crypto with ThirdWeb 🤯</title><link href="https://genicsblog.com/avneesh/make-your-first-crypto-with-thirdweb" rel="alternate" type="text/html" title="Make your first Crypto with ThirdWeb 🤯"/><published>2022-01-15T00:00:00+00:00</published><updated>2022-01-15T00:00:00+00:00</updated><id>https://genicsblog.com/avneesh/make-your-first-crypto-with-thirdweb</id><content type="html" xml:base="https://genicsblog.com/avneesh/make-your-first-crypto-with-thirdweb"><![CDATA[<p>Have you ever wondered how amazing it would be to create your crypto? So, in this article let’s build our very first crypto!</p> <h2 id="setup">Setup</h2> <p>Create a new folder-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">mkdir </span>thirdweb-crypto
</code></pre></div></div> <p>Initialize Node.js-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm init <span class="nt">-y</span>
</code></pre></div></div> <p>Change type to <code class="language-plaintext highlighter-rouge">module</code></p> <p>we are going to use modular imports so change the type to <code class="language-plaintext highlighter-rouge">module</code> in <code class="language-plaintext highlighter-rouge">package.json</code>-</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"module"</span><span class="err">,</span><span class="w">
</span></code></pre></div></div> <p>Install the packages needed-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i @3rdweb/sdk dotenv ethers
</code></pre></div></div> <h2 id="initiazling-3rdweb">Initiazling 3rdweb</h2> <p>To keep stuff clean, create a new folder <code class="language-plaintext highlighter-rouge">scripts</code>. Inside of it create a file a file <code class="language-plaintext highlighter-rouge">initialize-sdk.js</code>. Now, paste in the following-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ThirdwebSDK</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@3rdweb/sdk</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ethers</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">ethers</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">dotenv</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">dotenv</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">();</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PRIVATE_KEY</span> <span class="o">||</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PRIVATE_KEY</span> <span class="o">==</span> <span class="dl">""</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">🛑 Private key not found.</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ALCHEMY_API_URL</span> <span class="o">||</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ALCHEMY_API_URL</span> <span class="o">==</span> <span class="dl">""</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">🛑 Alchemy API URL not found.</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">WALLET_ADDRESS</span> <span class="o">||</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">WALLET_ADDRESS</span> <span class="o">==</span> <span class="dl">""</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">🛑 Wallet Address not found.</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">sdk</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ThirdwebSDK</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">ethers</span><span class="p">.</span><span class="nx">Wallet</span><span class="p">(</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PRIVATE_KEY</span><span class="p">,</span>
    <span class="nx">ethers</span><span class="p">.</span><span class="nx">getDefaultProvider</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ALCHEMY_API_URL</span><span class="p">)</span>
  <span class="p">)</span>
<span class="p">);</span>
<span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">apps</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">sdk</span><span class="p">.</span><span class="nx">getApps</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Your app address is:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">apps</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">address</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Failed to get apps from the sdk</span><span class="dl">"</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">})();</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">sdk</span><span class="p">;</span>
</code></pre></div></div> <p>This is going to initialize 3rdweb for us but first, we need some keys. So, create a new file <code class="language-plaintext highlighter-rouge">.env</code> in the root of your folder and add these three variables-</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>WALLET_ADDRESS=&lt;3rdweb_project_address&gt;
ALCHEMY_API_URL=&lt;alchemy_api_key&gt;
PRIVATE_KEY=&lt;wallet_private_key&gt;
</code></pre></div></div> <h3 id="creating-a-3rdweb-project">Creating a 3rdweb project</h3> <p>Go to <a href="https://thirdweb.com/">Thirdweb</a> sign up/in then, create a new project. I am going to use Rinkeby for this demo. Give a name to your project and you can also add a description if you want.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641983754661/iFAG14OuU4.png" alt="image.png"/></p> <p>Copy the address that you get and replace it as the value of <code class="language-plaintext highlighter-rouge">WALLET_ADDRESS</code></p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641984766639/qRsZEzp1l.png" alt="image.png"/></p> <h3 id="creating-an-alchemy-project">Creating an alchemy project</h3> <p>Go to <a href="https://alchemyapi.io/">alchemy</a> after signing in, create a new project on the same chain and network as you did on thirdweb.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641984259639/7p-ar-Isl.png" alt="image.png"/></p> <p>Click on the view key button and copy the HTTP one.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641985336824/Fpy2kRSm0.png" alt="image.png"/></p> <p>This is the API key that we need from alchemy so paste it in the <code class="language-plaintext highlighter-rouge">.env</code> file.</p> <h3 id="getting-the-private-key">Getting the Private Key</h3> <p>In your metamask wallet, click on account details</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641985709370/q0ORYddS8.png" alt="image.png"/></p> <p>Click on the export private key button, enter the password and copy the key that you get. This is your <code class="language-plaintext highlighter-rouge">PRIVATE_KEY</code>.</p> <p>Let’s now run the initializing script-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node scripts/initialize-sdk.js
</code></pre></div></div> <p>You will now see your app address-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641986218189/E-WpBbIJD.png" alt="image.png"/></p> <h2 id="creating-and-deploying-our-crypto">Creating and deploying our crypto</h2> <p>Create a new file <code class="language-plaintext highlighter-rouge">deploy-token.js</code> and paste in the following-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">sdk</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./initialize-sdk.js</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">sdk</span><span class="p">.</span><span class="nx">getAppModule</span><span class="p">(</span><span class="dl">"</span><span class="s2">YOUR_APP_ADDRESS</span><span class="dl">"</span><span class="p">);</span>
<span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">tokenModule</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">deployTokenModule</span><span class="p">({</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">My Token</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">symbol</span><span class="p">:</span> <span class="dl">"</span><span class="s2">TOKEN</span><span class="dl">"</span><span class="p">,</span>
    <span class="p">});</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
      <span class="dl">"</span><span class="s2">✅ Successfully deployed token module, address:</span><span class="dl">"</span><span class="p">,</span>
      <span class="nx">tokenModule</span><span class="p">.</span><span class="nx">address</span>
    <span class="p">);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">failed to deploy token module</span><span class="dl">"</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">})();</span>
</code></pre></div></div> <p>You need to replace the app address with the address that came in the console. You also need to change the name and symbol of the token to what you want it to be called. Let’s now run it-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node scripts/deploy-token.js
</code></pre></div></div> <p>It works and the token has been deployed 🥳</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641988251933/cS1Or4sUP.png" alt="image.png"/></p> <p>You can also view the contract on <a href="https://rinkeby.etherscan.io/">Etherscan</a></p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641988321364/9nju9LAo8.png" alt="image.png"/></p> <h2 id="import-the-token-to-your-metamask-wallet">Import the token to your metamask wallet</h2> <p>We can also see how many tokens we have through the metamask wallet, so open Metamask scroll below and you will see a button “Import tokens”.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641988462000/-PlYIVzMO.png" alt="image.png"/></p> <p>Paste in the address of your token and click <strong>add</strong>.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641988496990/KPFJzu_FG.png" alt="image.png"/></p> <p>You will now see our token here 🎉.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641988567376/6jMQO-afG.png" alt="image.png"/></p> <p>But it is 0 in quantity so let’s mint some tokens.</p> <h2 id="minting-tokens">Minting tokens</h2> <p>Create a new file <code class="language-plaintext highlighter-rouge">mint-token.js</code> and add the following-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ethers</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">ethers</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">sdk</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./initialize-sdk.js</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">tokenModule</span> <span class="o">=</span> <span class="nx">sdk</span><span class="p">.</span><span class="nx">getTokenModule</span><span class="p">(</span><span class="dl">"</span><span class="s2">YOUR_TOKEN_ADDRESS</span><span class="dl">"</span><span class="p">);</span>
<span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">amount</span> <span class="o">=</span> <span class="mi">1</span><span class="nx">_000_000</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">amountWith18Decimals</span> <span class="o">=</span> <span class="nx">ethers</span><span class="p">.</span><span class="nx">utils</span><span class="p">.</span><span class="nx">parseUnits</span><span class="p">(</span><span class="nx">amount</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span> <span class="mi">18</span><span class="p">);</span>
    <span class="k">await</span> <span class="nx">tokenModule</span><span class="p">.</span><span class="nx">mint</span><span class="p">(</span><span class="nx">amountWith18Decimals</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">totalSupply</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">tokenModule</span><span class="p">.</span><span class="nx">totalSupply</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
      <span class="dl">"</span><span class="s2">✅ There now is</span><span class="dl">"</span><span class="p">,</span>
      <span class="nx">ethers</span><span class="p">.</span><span class="nx">utils</span><span class="p">.</span><span class="nx">formatUnits</span><span class="p">(</span><span class="nx">totalSupply</span><span class="p">,</span> <span class="mi">18</span><span class="p">),</span>
      <span class="dl">"</span><span class="s2">$TOKEN in circulation</span><span class="dl">"</span>
    <span class="p">);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Failed to mint tokens</span><span class="dl">"</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">})();</span>
</code></pre></div></div> <p>Replace <code class="language-plaintext highlighter-rouge">YOUR_TOKEN_ADDRESS</code> with the address you got. You can also change the number of tokens to be minted. Currently, it will mint 1,000,000 tokens.</p> <p>Run the script-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node scripts/mint-token.js
</code></pre></div></div> <p>We successfully minted the tokens! 🥳</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641989192684/gg9oPg9xv.png" alt="image.png"/></p> <p>In metamask also it shows the tokens!</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641989215876/D8gN8Nm59.png" alt="image.png"/></p> <p>You can also send these tokens to your friends or anyone you like :D</p> <h2 id="conclusion">Conclusion</h2> <p><a href="https://thirdweb.com">thirdweb</a> is a great way to build web3 stuff, hope you found this article useful and made your first crypto. See ya in the next one ✌️</p> <h3 id="useful-links">Useful links</h3> <p><a href="https://github.com/avneesh0612/thirdweb-crypto">GitHub Repo</a></p> <p><a href="https://thirdweb.com/">ThirdWeb</a></p> <p><a href="https://links.avneesh.tech/">Let’s connect</a></p>]]></content><author><name>avneesh</name></author><category term="web3"/><category term="blockchain"/><category term="crypto"/><summary type="html"><![CDATA[With all this web3 hype going on, are you keen to learn how you can jump right in and build your own crypto?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/76690419/149300558-70052677-940d-49d1-b243-e4e0ba437c01.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/76690419/149300558-70052677-940d-49d1-b243-e4e0ba437c01.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry></feed>