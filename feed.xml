<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://genicsblog.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://genicsblog.com/" rel="alternate" type="text/html"/><updated>2022-01-24T16:59:04+00:00</updated><id>https://genicsblog.com/feed.xml</id><title type="html">Genics Blog</title><subtitle>An open source developer publication aimed at sharing well explained tutorials on various topics for the developer community</subtitle><entry><title type="html">Add google analytics to your Next.js app ‚ú®</title><link href="https://genicsblog.com/avneesh/add-google-analytics-to-your-next-js-app" rel="alternate" type="text/html" title="Add google analytics to your Next.js app ‚ú®"/><published>2022-01-24T00:00:00+00:00</published><updated>2022-01-24T00:00:00+00:00</updated><id>https://genicsblog.com/avneesh/add-google-analytics-to-your-next-js-app</id><content type="html" xml:base="https://genicsblog.com/avneesh/add-google-analytics-to-your-next-js-app"><![CDATA[<p>Wassup everyone, let‚Äôs see how to add google analytics to your Next.js site. Google Analytics will help you to see the performance of each page, how well the site is doing in countries, different devices, etc.</p> <h2 id="setup-google-analytics">Setup Google Analytics</h2> <p>Go to <a href="https://analytics.google.com/analytics/web/#/report-home/a215528627w297101680p257398486">Google Analytics</a> and click on admin in the sidebar.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642347546151/V_VNBwjDM.png" alt="image.png"/></p> <p>After clicking on admin you will see a screen similar to this-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642347749350/EkD2EHa3Z.png" alt="image.png"/></p> <p>Click on ‚ÄúCreate Property‚Äù, now fill in the form with your details.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642347967831/C2JOHnX-W.png" alt="image.png"/></p> <p>You also need to give basic business details.</p> <p>After you click submit your property will be created! You will see this screen and as we are using Next.js, select web-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642348270857/uZb1Ioz8s.png" alt="image.png"/></p> <p>Fill in your website URL and title-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642348443210/En2V_kUHK.png" alt="image.png"/></p> <p>Click on add on Add new on-page inside <strong>Tagging instructions</strong>-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642348649689/0fbjYdwFL.png" alt="image.png"/></p> <p>Copy the ID that you see and copy it as we are going to need it!</p> <h2 id="using-google-analytics-in-nextjs-app">Using Google Analytics in Next.js app</h2> <p>Go inside <code class="language-plaintext highlighter-rouge">pages/_app.tsx</code> and these two Next.js Scripts-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">&lt;</span><span class="nc">Script</span>
    <span class="na">strategy</span><span class="p">=</span><span class="s">"lazyOnload"</span>
    <span class="na">src</span><span class="p">=</span><span class="si">{</span><span class="s2">`https://www.googletagmanager.com/gtag/js?id=</span><span class="p">${</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_GOOGLE_ANALYTICS</span><span class="p">}</span><span class="s2">`</span><span class="si">}</span>
  <span class="p">/&gt;</span>

  <span class="p">&lt;</span><span class="nc">Script</span> <span class="na">id</span><span class="p">=</span><span class="s">"google-analytics"</span> <span class="na">strategy</span><span class="p">=</span><span class="s">"lazyOnload"</span><span class="p">&gt;</span>
    <span class="si">{</span><span class="s2">`
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', '</span><span class="p">${</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_GOOGLE_ANALYTICS</span><span class="p">}</span><span class="s2">', {
              page_path: window.location.pathname,
            });
                `</span><span class="si">}</span>
  <span class="p">&lt;/</span><span class="nc">Script</span><span class="p">&gt;</span>
</code></pre></div></div> <p>This is going to load google analytics via this script. As you can see we are using env variables for the google-analytics tag because it must remain a secret ü§´, so if you don‚Äôt already have a <code class="language-plaintext highlighter-rouge">.env.local</code> file create one and add the following-</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NEXT_PUBLIC_GOOGLE_ANALYTICS=YOUR_GOOGLE_ANALYTICS_ID
</code></pre></div></div> <p>Paste in the ID that we copied in the last step! Since we are changing the env variables you need to restart the server too.</p> <p>As we are using the Next.js script we also need to import it-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">Script</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next/script</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div> <p>Open your localhost app in one tab and google analytics in another. If you click on Real-time inside of Reports you will see that you have 1 user!</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642350505812/oMFfF0elgj.png" alt="image.png"/></p> <h2 id="conclusion">Conclusion</h2> <p>Adding google analytics to your Next.js app was this easy! Hope you found it useful and insightful. See ya next time ‚úåÔ∏è</p> <h3 id="useful-links">Useful links</h3> <p><a href="https://analytics.google.com/analytics/web/#/report-home/a215528627w297101680p257398486">Google Analytics</a></p> <p><a href="https://nextjs.org/">Next.js</a></p> <p><a href="https://links.avneesh.tech/">Connect with me</a></p>]]></content><author><name>avneesh</name></author><category term="web"/><category term="analytics"/><category term="next-js"/><summary type="html"><![CDATA[Learn how to add Google Analytics script to your Next.js app.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/150820378-8ba79cd6-b0e9-484b-93b7-6445b0680cd1.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/150820378-8ba79cd6-b0e9-484b-93b7-6445b0680cd1.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Metamask authentication in Next.js with Clerk üîí</title><link href="https://genicsblog.com/avneesh/metamask-authentication-in-next-js-with-clerk" rel="alternate" type="text/html" title="Metamask authentication in Next.js with Clerk üîí"/><published>2022-01-24T00:00:00+00:00</published><updated>2022-01-24T00:00:00+00:00</updated><id>https://genicsblog.com/avneesh/metamask-authentication-in-next-js-with-clerk</id><content type="html" xml:base="https://genicsblog.com/avneesh/metamask-authentication-in-next-js-with-clerk"><![CDATA[<p>Hello everyone! As you have seen web3 is very popular right now. Clerk has recently released metamask authentication. So let‚Äôs take a look at how to implement it in our app!</p> <h2 id="what-is-clerk">What is Clerk?</h2> <p><a href="https://clerk.dev/">Clerk</a> is one of the best ways to add authentication to a Next.js or a react application. It gives us things that are a pain to handle on our own like user management and multiple sessions.</p> <p>Why use Clerk?</p> <ul> <li>Easy to work with</li> <li>Customizable</li> <li>2-step verification</li> <li>New device notifications</li> <li>Single sign-on</li> <li>Passwordless sign-in</li> <li>Multi-sessions</li> </ul> <h2 id="setup">Setup</h2> <h3 id="setting-up-our-nextjs-app">Setting up our Next.js app</h3> <p>Creating a new Next.js app</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx create-next-app next-clerk-demo
</code></pre></div></div> <p>Installing <a href="https://clerk.dev/">Clerk</a></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i @clerk/clerk-react <span class="c"># npm</span>
yarn add @clerk/clerk-react <span class="c"># yarn</span>
</code></pre></div></div> <h3 id="setting-up-clerk">Setting up Clerk</h3> <p>Go to <a href="https://clerk.dev">Clerk</a>, sign up/in, then create a new app. Select ‚ÄúSign in with Metamask‚Äù as the Authentication strategy-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642933471226/6hFpFKly_.png" alt="image.png"/></p> <p>If you now go to ‚ÄúAPI Keys‚Äù in the sidebar, you will be able to see your frontend API key. Copy it as we are going to need it soon.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642933643582/0uZGe5OP1.png" alt="image.png"/></p> <h2 id="integrating-clerk-into-nextjs">Integrating Clerk into Next.js</h2> <h3 id="configuring-clerk">Configuring Clerk</h3> <p>Inside <code class="language-plaintext highlighter-rouge">_app.js</code> wrap the in a ClerkProvider-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">ClerkProvider</span>
  <span class="na">frontendApi</span><span class="p">=</span><span class="si">{</span><span class="nx">clerkFrontendApi</span><span class="si">}</span>
  <span class="na">navigate</span><span class="p">=</span><span class="si">{</span><span class="p">(</span><span class="nx">to</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">router</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">to</span><span class="p">)</span><span class="si">}</span>
<span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nc">Component</span> <span class="si">{</span><span class="p">...</span><span class="nx">pageProps</span><span class="si">}</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nc">ClerkProvider</span><span class="p">&gt;</span>
</code></pre></div></div> <p>Get router from useRouter-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">useRouter</span><span class="p">();</span>
</code></pre></div></div> <p>Import useRouter and ClerkProvider-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ClerkProvider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@clerk/clerk-react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useRouter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next/router</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div> <p>As you can see we also need the <code class="language-plaintext highlighter-rouge">clerkFrontendApi</code>, so create a new variable-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">clerkFrontendApi</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_CLERK_FRONTEND_API</span><span class="p">;</span>
</code></pre></div></div> <p>We are going to use env variables for the API key, so create a new file <code class="language-plaintext highlighter-rouge">.env.local</code>, and add <code class="language-plaintext highlighter-rouge">NEXT_PUBLIC_CLERK_FRONTEND_API</code>-</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NEXT_PUBLIC_CLERK_FRONTEND_API=YOUR_API_KEY
</code></pre></div></div> <p>Paste in the API key that you got from the clerk dashboard. You also going to restart the dev server-</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run dev <span class="c"># npm</span>

yarn dev <span class="c"># yarn</span>
</code></pre></div></div> <h3 id="creating-the-sign-in-button">Creating the sign-in button</h3> <p>Inside <code class="language-plaintext highlighter-rouge">index.js</code> add the following-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">SignedOut</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nc">SignInWithMetamaskButton</span><span class="p">&gt;</span>Sign in with Metamask<span class="p">&lt;/</span><span class="nc">SignInWithMetamaskButton</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nc">SignedOut</span><span class="p">&gt;</span>
</code></pre></div></div> <p>You also need to import the following-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span>
  <span class="nx">SignedIn</span><span class="p">,</span>
  <span class="nx">SignedOut</span><span class="p">,</span>
  <span class="nx">SignInWithMetamaskButton</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@clerk/clerk-react</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div> <p>Now, if you go to <a href="http://localhost:3000/">http://localhost:3000/</a>, you will be able to see a sign-in button!</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642936017421/NM4fTVnvBE.png" alt="image.png"/></p> <p>If you try clicking on it, it works ü•≥.</p> <h3 id="showing-userprofile-and-address-if-the-user-is-logged-in">Showing UserProfile and address if the user is logged in</h3> <p>Show a User component if the user is SignedIn-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">SignedIn</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nc">User</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nc">SignedIn</span><span class="p">&gt;</span>
</code></pre></div></div> <p>Create a new component in the components folder as <code class="language-plaintext highlighter-rouge">User.js</code> and add the following-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">UserButton</span><span class="p">,</span> <span class="nx">useUser</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@clerk/clerk-react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">useUser</span><span class="p">();</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">UserButton</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">user</span><span class="p">.</span><span class="nx">web3Wallets</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">web3Wallet</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">User</span><span class="p">;</span>
</code></pre></div></div> <p>Clerk provides a <code class="language-plaintext highlighter-rouge">useUser</code> hook which allows us to access the user‚Äôs details like the wallet address.</p> <p>If you now login into the app then, it would show you a profile picture and your address-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642936338400/cP77poM852.png" alt="image.png"/></p> <p>If you click on the user profile, it will show you a popup. You can click on manage account to add details like name, email, profile picture, etc.</p> <h3 id="keeping-the-users-on-our-site">Keeping the user‚Äôs on our site</h3> <p>When you clicked on manage account, you might have noticed that the URL was completely different and was not looking good. So let‚Äôs see how to keep users on our site itself!</p> <p>Create the sign in, sign up, and the user page Inside the <code class="language-plaintext highlighter-rouge">pages</code> folder we will create 3 folders named</p> <ul> <li>sign-in</li> <li>sign-up</li> <li>user</li> </ul> <p>Inside all the folders we will create a file named <code class="language-plaintext highlighter-rouge">[[‚Ä¶index]].js</code> Here is the code for all the files-</p> <p><strong><code class="language-plaintext highlighter-rouge">sign-in/[[‚Ä¶index]].js</code></strong></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">SignIn</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@clerk/clerk-react</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">SignInPage</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">SignIn</span> <span class="na">path</span><span class="p">=</span><span class="s">"/sign-in"</span> <span class="na">routing</span><span class="p">=</span><span class="s">"path"</span> <span class="p">/&gt;;</span>
<span class="p">}</span>
</code></pre></div></div> <p><strong><code class="language-plaintext highlighter-rouge">sign-up/[[‚Ä¶index]].js</code></strong></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">SignUp</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@clerk/clerk-react</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">SignUpPage</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">SignUp</span> <span class="na">path</span><span class="p">=</span><span class="s">"/sign-up"</span> <span class="na">routing</span><span class="p">=</span><span class="s">"path"</span> <span class="p">/&gt;;</span>
<span class="p">}</span>
</code></pre></div></div> <p><strong><code class="language-plaintext highlighter-rouge">user/[[‚Ä¶index]].js</code></strong></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">UserProfile</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@clerk/clerk-react</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">UserProfilePage</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">UserProfile</span> <span class="na">path</span><span class="p">=</span><span class="s">"/user"</span> <span class="na">routing</span><span class="p">=</span><span class="s">"path"</span> <span class="p">/&gt;;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Now, go to the clerk dashboard, and click on paths in the sidebar. Now edit the URLs with the following-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642936667724/670892Zym.png" alt="image.png"/></p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642936685668/_fkztjnDg.png" alt="image.png"/></p> <p>If you now try signing in, signing up, or viewing your profile then the user will be on the website itself (localhost in development).</p> <div class="mb-6 aspect-video"> <iframe src="https://www.loom.com/embed/f43d9d81f60947f28b30f7346f0d8ae0?hide_owner=true&amp;hide_share=true&amp;hide_title=true&amp;hideEmbedTopBar=true" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen="" class="w-full h-full rounded-xl" loading="lazy"> </iframe> </div> <h2 id="useful-links">Useful links</h2> <p><a href="https://clerk.dev/">Clerk</a></p> <p><a href="https://github.com/avneesh0612/Next-Clerk-metamask">GitHub Repo</a></p> <p><a href="https://blog.avneesh.tech/mastering-clerk-authentication-with-the-nextjs-standard-setup">Read more about Clerk</a></p> <p><a href="https://links.avneesh.tech/">Let‚Äôs connect</a></p>]]></content><author><name>avneesh</name></author><category term="web3"/><category term="authentication"/><category term="next-js"/><summary type="html"><![CDATA[Learn how to use add Metamask authentication to your Next.js app using Clerk.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/76690419/150726058-5520a79a-8f2a-4cac-8ceb-48a8ae2ac501.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/76690419/150726058-5520a79a-8f2a-4cac-8ceb-48a8ae2ac501.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How to build a REST API using NodeJS</title><link href="https://genicsblog.com/kira/how-to-build-a-rest-api-using-nodejs" rel="alternate" type="text/html" title="How to build a REST API using NodeJS"/><published>2022-01-23T00:00:00+00:00</published><updated>2022-01-23T00:00:00+00:00</updated><id>https://genicsblog.com/kira/how-to-build-a-rest-api-using-nodejs</id><content type="html" xml:base="https://genicsblog.com/kira/how-to-build-a-rest-api-using-nodejs"><![CDATA[<p>üëã Hey everyone, in this blog post we are doing to build a REST API that would serve as a source of motivation for developers using NodeJS and MongoDB. So let‚Äôs get started üèÑ‚Äç‚ôÇÔ∏è</p> <p><img src="https://c.tenor.com/r3XdvPsAV3kAAAAS/despicable-me-minions.gif" alt=""/></p> <h1 id="whats-an-api-">What‚Äôs an API? ü§î</h1> <p>API stands for ‚ÄúApplication Programming Interface‚Äù which is a tool that allows two applications to talk to each other üìû. Let‚Äôs understand the meaning of API by some real-life examples ‚ú®</p> <p>So you have built an amazing e-store application and you wanted other developers to build applications on it. Now you have to build some sort of software that communicates between your web service and the developer‚Äôs application and that‚Äôs where API comes in.</p> <p><img src="https://user-images.githubusercontent.com/26124625/104198884-ca1bcf80-544c-11eb-94d1-22548426ad4d.png" alt=""/></p> <h2 id="whats-a-rest-api-">What‚Äôs a REST API? ü§î</h2> <p>Now as you have let‚Äôs talk something about ‚ÄúREST APIs‚Äù. REST stands for <strong>Representational State Transfer</strong>, it‚Äôs one of the most popularly known type of API architecture. These types of APIs follow the client-server model, where one program sends a request and the other response with some data. The requests are HTTP methods such as POST, GET, PUT, DELETE‚Ä¶</p> <p><img src="https://user-images.githubusercontent.com/26124625/104204412-431e2580-5453-11eb-9827-29a65aa6ff82.png" alt=""/></p> <p>You would have a more clear understanding of APIs and REST APIs when we build a project üëÄ. So what are we waiting for, let‚Äôs dive started into coding üë®‚Äçüíª.</p> <h1 id="setting-up-the-project-">Setting up the project üõ†</h1> <p>Let‚Äôs set up our project so that we can start coding üë®‚Äçüíª.</p> <ol> <li> <p>Creating a separate folder for our project</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>dev-credits-api
</code></pre></div> </div> </li> <li> <p>Navigate into the folder</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>dev-credits-api
</code></pre></div> </div> </li> <li> <p>Initializing the project</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm init
</code></pre></div> </div> </li> <li> <p>Installing the required packages</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install </span>mongoose express dotenv cors

<span class="c"># or</span>

<span class="nv">$ </span>yarn add mongoose express dotenv cors
</code></pre></div> </div> <ul> <li>Express is the framework by which we are going to our REST API</li> <li> <p>Mongoose is the tool that we are going to use to communicate with our MongoDB database</p> <p>4.1. Installing nodemon as a dev dependency</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install </span>nodemon <span class="nt">-D</span>

<span class="c"># or</span>

<span class="nv">$ </span>yarn add nodemon <span class="nt">-D</span>
</code></pre></div> </div> <ul> <li>Nodemon is used for automatically restarting the server on file changes detected in the directory. This would be helpful as we would not be restarting the server each time we do changes</li> </ul> </li> </ul> </li> </ol> <h1 id="building-the-rest-api-">Building the REST API üë®‚Äçüíª</h1> <p>As we have completed the setup for our project, let‚Äôs get started building the REST API.</p> <p>Create a new file named <code class="language-plaintext highlighter-rouge">index.js</code></p> <p>Here is the boilerplate code for a basic express app</p> <p><code class="language-plaintext highlighter-rouge">index.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Server is running at port </span><span class="p">${</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>Let‚Äôs breakdown it into and understand each part:</p> <ul> <li> <p>We are requiring the express package into our file so that we can use it.</p> </li> <li> <p>We are assigning some value to the variable port, the port where our server would be running. You might be thinking why is there a <code class="language-plaintext highlighter-rouge">process.env.PORT</code>? ü§î. It‚Äôs because during deployment on services such as Heroku the port number might vary, it may not be 3000 so we are telling that if there is a PORT environment variable then use that else use <code class="language-plaintext highlighter-rouge">3000</code>.</p> </li> <li> <p>The last piece of code is telling to which port the server should listen, in our case it‚Äôs the <code class="language-plaintext highlighter-rouge">PORT</code> variable.</p> </li> </ul> <p>Let‚Äôs add a new script named <code class="language-plaintext highlighter-rouge">start</code> to the <code class="language-plaintext highlighter-rouge">package.json</code> file which uses nodemon to automatically restart the server on file changes detected. So after the changes our scripts in <code class="language-plaintext highlighter-rouge">package.json</code> would look something like this:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
   </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"nodemon index.js"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Let‚Äôs start our server by running the <code class="language-plaintext highlighter-rouge">npm start</code> command. The server would be running at <a href="http://localhost:3000">http://localhost:3000</a>. You prompted with an error something like this:</p> <p><img src="https://imgur.com/XeUfz0l.png" alt=""/></p> <p>This is happening because we haven‚Äôt defined the <code class="language-plaintext highlighter-rouge">/</code> (aka the root route)</p> <h2 id="http-methods-explained">HTTP methods explained</h2> <p>Let‚Äôs take a break from coding and understand what do they do and what‚Äôs the success and error status so that it would be easy for debugging üòé</p> <h3 id="get">GET</h3> <p><strong>What it does</strong>: Request data from a specified resource</p> <p><strong>Successful response</strong>: 200 OK</p> <p><strong>Error response</strong>: 404 not found</p> <h3 id="post">POST</h3> <p><strong>What it does</strong>: Send data to the server to create a new resource</p> <p><strong>Successful response</strong>: 201 Created</p> <p><strong>Error response</strong>: 404 not found or 409 conflict - if the resource already exists</p> <h3 id="put">PUT</h3> <p><strong>What it does</strong>: Send data to the server to update a pre-existing resource</p> <p><strong>Successful response</strong>: 200 OK</p> <p><strong>Error response</strong>: 204 no content, 404 not found or 405 method not allowed</p> <h3 id="delete">DELETE</h3> <p><strong>What it does</strong>: Deletes a resource from the server</p> <p><strong>Successful response</strong>: 200 OK</p> <p><strong>Error response</strong>: 404 not found or 405 method not allowed</p> <p>Check out <a href="https://http.cat/">http.cat</a> for understanding what each HTTP status code means via funny cat images üòπ</p> <h2 id="adding-routes-">Adding routes üõ£</h2> <p>Routes are different URL paths of an express app that are associated with different HTTP methods, such as <code class="language-plaintext highlighter-rouge">GET</code>, <code class="language-plaintext highlighter-rouge">POST</code>, <code class="language-plaintext highlighter-rouge">DELETE</code>, <code class="language-plaintext highlighter-rouge">PUT</code>.</p> <p>Let‚Äôs get started by creating <code class="language-plaintext highlighter-rouge">/</code> which sends ‚ÄúHello, World!‚Äù</p> <p>Add the below piece of code above the line where we declared the <code class="language-plaintext highlighter-rouge">port</code> variable</p> <p><code class="language-plaintext highlighter-rouge">index.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello, World!</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>Let‚Äôs breakdown this piece of code:</p> <ul> <li>The <code class="language-plaintext highlighter-rouge">get</code> method specifies the HTTP method for that route. You could use other HTTP methods like <code class="language-plaintext highlighter-rouge">post</code>, <code class="language-plaintext highlighter-rouge">delete</code>‚Ä¶ <ul> <li>There is a special routing method <code class="language-plaintext highlighter-rouge">all</code> which is used for the routes which handle all kinds of HTTP methods</li> </ul> </li> <li>There is a callback method that is called when the server receives a request from that endpoint with that specified HTTP method</li> </ul> <p>ü•≥ Horray! ‚ÄúHello, World‚Äù is now visible in the <code class="language-plaintext highlighter-rouge">/</code> route</p> <p><img src="https://imgur.com/Lw35Azu.png" alt=""/></p> <h2 id="setting-up-mongodb">Setting up MongoDB</h2> <p>Let‚Äôs get in the MongoDB database now üòé.</p> <p>Head over <a href="https://www.mongodb.com/">MongoDB</a> and sign up/sign in and create a new project</p> <p><img src="https://imgur.com/P1PiZ7r.png" alt=""/></p> <p>You could your co-worker into the project if you wanted too.</p> <p>After the creation of the project, click on <code class="language-plaintext highlighter-rouge">Build a Database</code></p> <p><img src="https://imgur.com/COT14kz.png" alt=""/></p> <p>You would be shown with a screen something like this:</p> <p><img src="https://imgur.com/gLTxjxN.png" alt=""/></p> <p>Let‚Äôs go ahead and choose the free plan üëÄ</p> <p>You would be shown some more options about the cloud provider and the location</p> <p>Let‚Äôs choose the nearest region and move forward.</p> <p>You would be asked to create a user. This is required as you would need the username and password to generate a connection URL which is then used to connect MongoDB with your NodeJS app.</p> <p>The creation of the cluster would take 1 - 3 minutes. So let‚Äôs grab a cup of coffee until then ‚òï. Ahh‚Ä¶ it‚Äôs been successfully created so let‚Äôs get back to coding üë®‚Äçüíª</p> <p>Click on <code class="language-plaintext highlighter-rouge">Connect</code></p> <p><img src="https://imgur.com/YXMw142.png" alt=""/></p> <p>Click on <code class="language-plaintext highlighter-rouge">Connect your application</code></p> <p><img src="https://imgur.com/26S40MA.png" alt=""/></p> <p>Copy the connection URL</p> <p><img src="https://imgur.com/YqtMG1i.png" alt=""/></p> <p>Create a <code class="language-plaintext highlighter-rouge">.env</code> file and replace <code class="language-plaintext highlighter-rouge">&lt;password&gt;</code> with the password of the user which you have replaced previously</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MONGODB_URL="mongodb+srv://kira272921:&lt;password&gt;@dev-credits-api.t5tkf.mongodb.net/myFirstDatabase?retryWrites=true&amp;w=majority"
</code></pre></div></div> <p>Let‚Äôs head back to the good old <code class="language-plaintext highlighter-rouge">index.js</code> file</p> <h2 id="connecting-express-app-to-mongodb">Connecting Express app to MongoDB</h2> <p>Let‚Äôs start by requiring <code class="language-plaintext highlighter-rouge">mongoose</code> and <code class="language-plaintext highlighter-rouge">dotenv</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">dotenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">dotenv</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div> <p>Let‚Äôs configure dotenv as well</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">();</span>
</code></pre></div></div> <p>Let‚Äôs finally add the piece of code which connects our express application to MongoDB</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">mongoose</span>
  <span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGODB_URL</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">useNewUrlParser</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">useUnifiedTopology</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Connected to MongoDB</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
  <span class="p">});</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">index.js</code> file show looks something like this now</p> <p><code class="language-plaintext highlighter-rouge">index.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">dotenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">dotenv</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">mongoose</span>
  <span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGODB_URL</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">useNewUrlParser</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">useUnifiedTopology</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Connected to MongoDB</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
  <span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello, World!</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Server is running at port </span><span class="p">${</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>ü•≥ We successfully connected our express app to the MongoDB database.</p> <h2 id="creating-schema-and-model-">Creating Schema and Model üìù</h2> <p>A Schema is the structure of the documents in our database. It tells what fields are required, what‚Äôs the data type of each field.</p> <p>A model provides a programming interface for interacting with the database (read, insert, update, etc).</p> <p>Let‚Äôs create a new folder named <code class="language-plaintext highlighter-rouge">model</code> and inside it let‚Äôs create a <code class="language-plaintext highlighter-rouge">model.js</code> where we will define our schema</p> <p><code class="language-plaintext highlighter-rouge">model/model.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
  <span class="na">credits</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
    <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">id</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
    <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">});</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="dl">'</span><span class="s1">devCredits</span><span class="dl">'</span><span class="p">,</span> <span class="nx">devCredits</span><span class="p">);</span>
</code></pre></div></div> <p>Let‚Äôs breakdown it down and understand</p> <ul> <li>We imported the <code class="language-plaintext highlighter-rouge">mongoose</code> package into the <code class="language-plaintext highlighter-rouge">model/model.js</code> file</li> <li>We created a new schema named <code class="language-plaintext highlighter-rouge">devCredits</code>. The structure has the <code class="language-plaintext highlighter-rouge">credits</code> and <code class="language-plaintext highlighter-rouge">id</code>. Credits are the number of dev credits the person has and the id is the discord id of the user (This API was initially created for a discord bot <a href="https://github.com/Kira272921/dev-credits-bot">Dev credits bot</a> so the schema of the database is kinda based on discord ü§∑‚Äç‚ôÇÔ∏è)</li> <li>We have finally created a model named ‚ÄúdevCredits‚Äù</li> </ul> <h2 id="adding-more-features-">Adding more features üòé</h2> <p>Let‚Äôs add more routes to our REST API. Let‚Äôs add routes where we can get the total dev credits of a user via their discord ID and give dev credits to other users using another route.</p> <h3 id="giving-dev-credits-to-other-devs">Giving dev credits to other devs</h3> <p>Let‚Äôs import our model which we have just created into the <code class="language-plaintext highlighter-rouge">index.js</code> file.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./model/model.js</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div> <p>Let‚Äôs add a new POST route in the <code class="language-plaintext highlighter-rouge">index.js</code> file</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/post</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">credit</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">devCredits</span><span class="p">({</span>
    <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="na">credits</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">credits</span><span class="p">,</span>
  <span class="p">});</span>

  <span class="nx">devCredits</span><span class="p">.</span><span class="nx">countDocuments</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">devCredits</span><span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">(</span>
        <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">$inc</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">credits</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">credits</span><span class="p">,</span>
          <span class="p">},</span>
        <span class="p">},</span>
        <span class="p">{</span> <span class="na">new</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
        <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">devCredit</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
          <span class="p">}</span> <span class="k">else</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">devCredit</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">credit</span><span class="p">.</span><span class="nx">save</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">credits</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">credits</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div> <p>Let‚Äôs understand what exactly is going on:</p> <ul> <li>We have created a new POST route (<code class="language-plaintext highlighter-rouge">/post</code>)</li> <li>We validate the data which we receive from the client using our model</li> <li>In the next piece of code we are checking if the user (user id) already exists in the database or not <ul> <li>If exists then we are going to increment the credits value</li> <li>Else we are going to create a new document with the user id and add the credits</li> </ul> </li> </ul> <h3 id="how-to-test-the-api">How to test the API?</h3> <p>We have successfully created added a new feature in our API ü•≥. But wait how are we going to test it out ü§î</p> <p>üëÄ We are going to use a VSCode extension called <a href="https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client">Thunder Client</a>, which is used for API testing. So let‚Äôs quickly download it and test our new feature in our API ü•≥.</p> <p>After the completion of the download, you are going to see a thunder icon in your sidebar üëÄ</p> <p><img src="https://imgur.com/xpDcJ9t.png" alt=""/></p> <p>Click the thunder icon and you are going to see a section something like this</p> <p><img src="https://imgur.com/FEa3FBo.png" alt=""/></p> <p>Click on <code class="language-plaintext highlighter-rouge">New Request</code>. You would be prompted to screen something like this</p> <p><img src="https://imgur.com/8Df3YZO.png" alt=""/></p> <p>Let‚Äôs test out our <code class="language-plaintext highlighter-rouge">/post</code> route now ü•≥. Change the URL in the input box from to <code class="language-plaintext highlighter-rouge">localhost:3000/post</code></p> <p>Change the request method from <code class="language-plaintext highlighter-rouge">GET</code> to <code class="language-plaintext highlighter-rouge">POST</code></p> <p><img src="https://imgur.com/ID9Ieie.png" alt=""/></p> <p>Navigate to the <code class="language-plaintext highlighter-rouge">Body</code> tab, this is the section where we are going to write the body of the request.</p> <p>I have added my discord ID and gave 100 dev credits to it, <em>cuz why not</em></p> <p><img src="https://imgur.com/RUfKWjt.png" alt=""/></p> <p>Let‚Äôs click and hope that it works ü§û</p> <p>ü•Åü•Åü•Åü•Åü•Å and we got an error</p> <p><img src="https://imgur.com/LP7dnOb.png" alt=""/></p> <p>This happened because we didn‚Äôt have any middleware so let‚Äôs them quickly</p> <p><code class="language-plaintext highlighter-rouge">index.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cors</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="na">extended</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}));</span>
</code></pre></div></div> <p><strong>NOTE</strong>: We had installed cors as a separated package, so don‚Äôt forget to import it as well</p> <p>Let‚Äôs try again now so that it works now ü§û</p> <p>üéâ <strong>TADA</strong>! We have successfully created our first feature in the API which interacts with the MongoDB database</p> <p><img src="https://imgur.com/JIJUj9f.png" alt=""/></p> <h3 id="getting-the-total-dev-credits-of-a-user">Getting the total dev credits of a user</h3> <p>Let‚Äôs import our model which we have just created into the <code class="language-plaintext highlighter-rouge">index.js</code> file.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./model/model.js</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div> <p>Let‚Äôs add a new route in the <code class="language-plaintext highlighter-rouge">index.js</code> file</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/get/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">devCredits</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="na">_id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">__v</span><span class="p">:</span> <span class="mi">0</span> <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div> <p>Let‚Äôs breakdown this down</p> <ul> <li>We have created a new route with the GET method</li> <li>We are finding in the database for the ID given in the parameters</li> </ul> <p>Let‚Äôs test it out again using Thunder Client üëÄ.</p> <p>üéâ<strong>TADA</strong>! It‚Äôs works</p> <p><img src="https://imgur.com/GBIj7Xk.png" alt=""/></p> <h2 id="cleaning-up-the-codebase">Cleaning up the codebase</h2> <p>Let‚Äôs clean up the codebase a bit üòÖ.</p> <p>Let‚Äôs create a new folder called <code class="language-plaintext highlighter-rouge">routes</code> and inside it let‚Äôs create a new file <code class="language-plaintext highlighter-rouge">router.js</code> which contains the routes</p> <p><code class="language-plaintext highlighter-rouge">routes/router.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">).</span><span class="nx">Router</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../model/model.js</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/get/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">devCredits</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="na">_id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">__v</span><span class="p">:</span> <span class="mi">0</span> <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/post</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">credit</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">devCredits</span><span class="p">({</span>
    <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="na">credits</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">credits</span><span class="p">,</span>
  <span class="p">});</span>

  <span class="nx">devCredits</span><span class="p">.</span><span class="nx">countDocuments</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">devCredits</span><span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">(</span>
        <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">$inc</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">credits</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">credits</span><span class="p">,</span>
          <span class="p">},</span>
        <span class="p">},</span>
        <span class="p">{</span> <span class="na">new</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
        <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">devCredit</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
          <span class="p">}</span> <span class="k">else</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">devCredit</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">credit</span><span class="p">.</span><span class="nx">save</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">credits</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">credits</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</code></pre></div></div> <p>We have imported the <code class="language-plaintext highlighter-rouge">routes/router.js</code> file into the <code class="language-plaintext highlighter-rouge">index.js</code> file and used it</p> <p><code class="language-plaintext highlighter-rouge">index.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">dotenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">dotenv</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">cors</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">cors</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./routes/router.js</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cors</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="na">extended</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}));</span>

<span class="nx">mongoose</span>
  <span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGODB_URL</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">useNewUrlParser</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">useUnifiedTopology</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Connected to MongoDB</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
  <span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello, World!</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Server is running at port </span><span class="p">${</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>Let‚Äôs test it out so that we are sure that our code and we didn‚Äôt mess up by cleaning up the mess üòÜ</p> <p>ü•≥ Horray! There isn‚Äôt any error and the code still works as it was before</p> <p><img src="https://imgur.com/Jj9ee1L.png" alt=""/></p> <p>üòÖ Doesn‚Äôt <code class="language-plaintext highlighter-rouge">routes/router.js</code> seem kinda filled up with the logic and make it kinda messy?</p> <p>Let‚Äôs create a new folder named <code class="language-plaintext highlighter-rouge">controllers</code>. In this folder, we will store the logic related to each route.</p> <p>Let‚Äôs get started by creating a new file in the <code class="language-plaintext highlighter-rouge">controllers</code> folder named <code class="language-plaintext highlighter-rouge">getCredits.js</code> and <code class="language-plaintext highlighter-rouge">postCredits.js</code> which contains the logic related to the <code class="language-plaintext highlighter-rouge">/get</code> route and <code class="language-plaintext highlighter-rouge">/post</code> route respectively</p> <p><code class="language-plaintext highlighter-rouge">controllers/getCredits.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../model/model.js</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">getCredits</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">devCredits</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="na">_id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">__v</span><span class="p">:</span> <span class="mi">0</span> <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">getCredits</span><span class="p">;</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">controllers/postCredits.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../model/model.js</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">postCredits</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">credit</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">devCredits</span><span class="p">({</span>
    <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="na">credits</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">credits</span><span class="p">,</span>
  <span class="p">});</span>

  <span class="nx">devCredits</span><span class="p">.</span><span class="nx">countDocuments</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">devCredits</span><span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">(</span>
        <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">$inc</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">credits</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">credits</span><span class="p">,</span>
          <span class="p">},</span>
        <span class="p">},</span>
        <span class="p">{</span> <span class="na">new</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
        <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">devCredit</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
          <span class="p">}</span> <span class="k">else</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">devCredit</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">credit</span><span class="p">.</span><span class="nx">save</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">image</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">image</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">postCredits</span><span class="p">;</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">routes/router.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">).</span><span class="nx">Router</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../model/model.js</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">getCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../controllers/getCredits.js</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">postCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../controllers/postCredits.js</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/get/:id</span><span class="dl">'</span><span class="p">,</span> <span class="nx">getCredits</span><span class="p">);</span>

<span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/post</span><span class="dl">'</span><span class="p">,</span> <span class="nx">postCredits</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</code></pre></div></div> <p>Phew, that was a lot of work üòπ</p> <h2 id="adding-rate-limit">Adding rate limit</h2> <p>You don‚Äôt want some random guy to just spam your entire database üòÜ. So let‚Äôs add a rate limit to our API when restricts the client to perform only a few requests every x minutes</p> <p>Let‚Äôs install <a href="https://www.npmjs.com/package/express-rate-limit">express-rate-limit</a> package</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install </span>express-rate-limit

<span class="c"># or</span>

<span class="nv">$ </span>yarn add express-rate-limit
</code></pre></div></div> <p>Let‚Äôs create a <code class="language-plaintext highlighter-rouge">middleware</code> folder that contains all the middlewares of our API. Create a file named <code class="language-plaintext highlighter-rouge">rateLimiter.js</code> under the <code class="language-plaintext highlighter-rouge">middleware</code> folder</p> <p><code class="language-plaintext highlighter-rouge">middleware/rateLimiter.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">rateLimit</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express-rate-limit</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">rateLimiter</span> <span class="o">=</span> <span class="nx">rateLimit</span><span class="p">({</span>
  <span class="na">windowMs</span><span class="p">:</span> <span class="mi">1</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span> <span class="c1">// 1 minute</span>
  <span class="na">max</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
  <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Bonk üî®</span><span class="dl">'</span><span class="p">,</span>
<span class="p">});</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">rateLimiter</span><span class="p">;</span>
</code></pre></div></div> <p>Let‚Äôs understand what this piece of code is doing?</p> <ul> <li>We are importing the <code class="language-plaintext highlighter-rouge">express-rate-limit</code> package</li> <li>The <code class="language-plaintext highlighter-rouge">windowMs</code> specifies the duration</li> <li>The <code class="language-plaintext highlighter-rouge">max</code> specifies the max amount of requests the client can make in the duration specified</li> <li>The <code class="language-plaintext highlighter-rouge">message</code> is the message which is shown to the client when he exceeds the max limit</li> </ul> <p>So let‚Äôs import into the <code class="language-plaintext highlighter-rouge">index.js</code> file and test it out</p> <p><code class="language-plaintext highlighter-rouge">index.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">rateLimiter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./middleware/rateLimiter.js</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">rateLimiter</span><span class="p">);</span>
</code></pre></div></div> <p>üòπ I got bonked by myself</p> <p><img src="https://imgur.com/zDzExMZ.png" alt=""/></p> <h1 id="deploying-our-api-on-heroku">Deploying our API on Heroku</h1> <p>üëÄ We have successfully built an API but how would other developers use it if it isn‚Äôt deployed?</p> <p>Let‚Äôs deploy it on Heroku üöÄ.</p> <p>Get started by initializing a git repository in the directory. Create a new GitHub repository and push your changes into that repository üëÄ</p> <p>Let‚Äôs create a new file named <code class="language-plaintext highlighter-rouge">Procfile</code> which is just a file that tells Heroku which command is need to be run. Add the below content to the <code class="language-plaintext highlighter-rouge">Procfile</code> file</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>web: node index.js
</code></pre></div></div> <p><strong>NOTE</strong>: nodemon doesn‚Äôt work in the production stage. It only works in the development stage, so we have to use the good old <code class="language-plaintext highlighter-rouge">node index.js</code></p> <p>Create an account on <a href="https://herokuapp.com/">Heroku</a> and click on <code class="language-plaintext highlighter-rouge">Create new app</code>, give some cool name to your API</p> <p><img src="https://imgur.com/pqdLULG.png" alt=""/></p> <p>Head over to the settings tab and click <code class="language-plaintext highlighter-rouge">Reveal Config Vars</code></p> <p>These are the environment variables <img src="https://imgur.com/aj7mHCD.png" alt=""/></p> <p>Add a new config var with the key as <code class="language-plaintext highlighter-rouge">MONGODB_URL</code> and the value as your MongoDB connection URL</p> <p>Head back to the deploy tab and connect the GitHub repository which you have created just before to your Heroku application</p> <p><img src="https://imgur.com/eBgS6pU.png" alt=""/></p> <p>Click the <code class="language-plaintext highlighter-rouge">Deploy branch</code> button. <strong>TADA</strong> üöÄ You have successfully created a REST API and deployed it as well :D</p> <p>The entire source code for this tutorial will be available on <a href="https://github.com/Kira272921/dev-credits-api">my GitHub</a>.</p> <p><a href="https://devcredits-api.herokuapp.com">Check out the API</a> which we built today.</p> <p>That‚Äôs it for this blog folks ü§û. Meet y‚Äôall in the next blog post</p>]]></content><author><name>kira</name></author><category term="backend"/><category term="node-js"/><category term="mongodb"/><category term="api"/><summary type="html"><![CDATA[The guide to teach you how to build a REST API from beginning till deployment.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/90365542/150640432-993a9fd8-4472-457c-9074-9e6fbd273743.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/90365542/150640432-993a9fd8-4472-457c-9074-9e6fbd273743.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">5 CSS methodologies you need to know in 2022</title><link href="https://genicsblog.com/five-css-methodologies-you-need-to-know-in-2022" rel="alternate" type="text/html" title="5 CSS methodologies you need to know in 2022"/><published>2022-01-21T00:00:00+00:00</published><updated>2022-01-21T00:00:00+00:00</updated><id>https://genicsblog.com/five-css-methodologies-you-need-to-know-in-2022</id><content type="html" xml:base="https://genicsblog.com/five-css-methodologies-you-need-to-know-in-2022"><![CDATA[<p>In large, complicated, rapidly-iterated systems, CSS is notoriously difficult to maintain. The lack of a built-in scoping mechanism in CSS is one of the reasons.</p> <p>In CSS, everything is global. Until CSS gets its native scoping mechanism, we need to devise our own system for locking down styles to specific sections of an HTML document. CSS methodologies are the solution.</p> <p>In this article, we will take a look at the CSS methodologies you need to know in 2022!</p> <h2 id="1-object-oriented-css">1. Object-oriented CSS</h2> <p><a href="http://oocss.org/">OOCSS</a> concepts help us write components that are flexible, modular and interchangeable.</p> <p>For example, the style of your button elements might be set via two classes that you have given the class of:</p> <ul> <li><code class="language-plaintext highlighter-rouge">.button</code> ‚Äî Provides the button‚Äôs basic structure.</li> <li><code class="language-plaintext highlighter-rouge">.grey-btn</code> ‚Äî Applies colors and other visual properties.</li> </ul> <p>CSS:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.button</span> <span class="p">{</span>
    <span class="nl">box-sizing</span><span class="p">:</span> <span class="n">border-box</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">50px</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.grey-btn</span> <span class="p">{</span>
    <span class="nl">background</span><span class="p">:</span> <span class="m">#EEE</span><span class="p">;</span>
    <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="m">#DDD</span><span class="p">;</span>
    <span class="nl">box-shadow</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.5</span><span class="p">)</span> <span class="m">1px</span> <span class="m">1px</span> <span class="m">3px</span><span class="p">;</span>
    <span class="nl">color</span><span class="p">:</span> <span class="m">#555</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>HTML:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"button grey-btn"</span><span class="nt">&gt;</span>
    Click me!
<span class="nt">&lt;/button&gt;</span>
</code></pre></div></div> <h2 id="2-atomic-css">2. Atomic CSS</h2> <p><a href="https://acss.io/">Atomic CSS</a> is the approach to CSS architecture that favors small, single-purpose classes with names based on visual function.</p> <p>Example:</p> <p>Colors are set using hexadecimal values. Alpha transparency is created by appending the opacity value to the hex color.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"Bgc(#0280ae.5) C(#fff) P(20px)"</span><span class="nt">&gt;</span>
    Lorem ipsum
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <h2 id="3-bem">3. BEM</h2> <p><a href="http://getbem.com/">Block Element Modifier</a> is a methodology that helps you to create reusable components and code sharing in front-end development.</p> <p>Example:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">class=</span><span class="s">"loginform loginform--errors"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"loginform__username loginform__username--error"</span><span class="nt">&gt;</span> 
        Username <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"username"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"loginform__password"</span><span class="nt">&gt;</span>
        Password <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"password"</span> <span class="na">name=</span><span class="s">"password"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"loginform__btn loginform__btn--inactive"</span><span class="nt">&gt;</span>
        Sign in
    <span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">.loginform</code> class is a block composed of three elements:</p> <table> <thead> <tr> <th>Element</th> <th>Purpose</th> </tr> </thead> <tbody> <tr> <td>loginform__username</td> <td>Takes in the username</td> </tr> <tr> <td>loginform__password</td> <td>Takes in the password</td> </tr> <tr> <td>loginform__btn</td> <td>Allow the user to submit the web form</td> </tr> </tbody> </table> <h2 id="4-sma-css">4. SMA CSS</h2> <p><a href="http://smacss.com/">SMACSS</a> is a way to examine your design process and as a way to fit those rigid frameworks into a flexible thought process.</p> <p>Example:</p> <p>Let‚Äôs say our layout is called <code class="language-plaintext highlighter-rouge">.l-footer</code>. We have a search form module inside it. The search form has already been submitted at least once by the user.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"l-footer"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">class=</span><span class="s">"search is-submitted"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"search"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">value=</span><span class="s">"Search"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/section&gt;</span>
</code></pre></div></div> <h2 id="5-systematic-css">5. Systematic CSS</h2> <p><a href="https://www.yumpu.com/en/document/read/47573458/systematic-css">Systematic CSS</a> shares many of the principles and ideas you can find in OOCSS, BEM, SMACSS, SUIT CSS, and other CSS methodologies. Systematic CSS is meant to be a simpler alternative to existing CSS methodologies.</p> <p>Example:</p> <p>Here‚Äôs the markup for two widgets that render a navigation bar and search form:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- navigation bar --&gt;</span> 
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"NavBar"</span><span class="nt">&gt;</span>
   <span class="nt">&lt;ul&gt;</span>
      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"./"</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"about.html"</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"learn/"</span><span class="nt">&gt;</span>Learn<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"extend/"</span><span class="nt">&gt;</span>Extend<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"share/"</span><span class="nt">&gt;</span>Share<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
   <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="c">&lt;!-- search form --&gt;</span> 
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"SearchBox"</span><span class="nt">&gt;</span>
   <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"search.html"</span> <span class="na">method=</span><span class="s">"get"</span><span class="nt">&gt;</span>
       <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"input-search"</span><span class="nt">&gt;</span>Search<span class="nt">&lt;/label&gt;</span>
       <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">"q"</span> <span class="na">type=</span><span class="s">"search"</span> <span class="na">id=</span><span class="s">"input-search"</span> <span class="nt">/&gt;</span>
       <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>Search<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <p>Content ‚Äî in the form of widgets and naked HTML elements ‚Äî is then placed within the layout. Finally, modifier classes are added to vary the default presentation of things.</p> <h2 id="conclusion">Conclusion</h2> <p>By providing a class-based approach for dividing up large web designs into many small, modular, distinct components, all CSS techniques address the scalability and maintainability challenge in CSS.</p> <p>Each UI module can be reused throughout a design and even ported from one project to the next if the CSS methodologies are the same. CSS approaches do a lot more than just solving the CSS scalability issue.</p> <h3 id="thank-you-for-reading">Thank you for reading</h3> <p>If you liked this post, subscribe to <a href="https://abhirajbhowmick.substack.com" rel="dofollow">my newsletter</a> to never miss out on <a href="https://abhiraj.co" rel="dofollow">my articles</a>, product launches, and tech news!</p>]]></content><author><name>abhiraj</name></author><category term="web"/><category term="beginners"/><category term="web-development"/><summary type="html"><![CDATA[CSS methodogies lets us author CSS in a way that allows us to develop, maintain and scale the front-end as a set of small, isolated modules.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/150502332-2a32ea09-672f-4d7d-935f-619130c53fd8.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/150502332-2a32ea09-672f-4d7d-935f-619130c53fd8.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How to Secure API tokens</title><link href="https://genicsblog.com/MaheshtheDev/how-to-secure-api-tokens" rel="alternate" type="text/html" title="How to Secure API tokens"/><published>2022-01-20T00:00:00+00:00</published><updated>2022-01-20T00:00:00+00:00</updated><id>https://genicsblog.com/MaheshtheDev/how-to-secure-api-tokens</id><content type="html" xml:base="https://genicsblog.com/MaheshtheDev/how-to-secure-api-tokens"><![CDATA[<p>If you are into the tech world for a while, I‚Äôm sure you heard about the word <code class="language-plaintext highlighter-rouge">API</code>. It stands for Application Program Interface. For example, Google has API which gives user details access to third party software.</p> <p>Basically, API acts as a bridge to pass information to authenticated third-party software. To authenticate these third parties, an API token is required.</p> <p>Many contributors use this API tokens to create some unique products like creating Telegram Bot, Slack Bot. Although the product gets built successfully, contributors can get organized by open-sourcing their code. But it‚Äôs very important that they secure the API token before they publish it to GitHub!</p> <p>Different ways of Securing API:</p> <ol> <li>Securing API tokens on Windows</li> <li>Securing API tokens on GitHub</li> <li>Securing API on Heroku</li> </ol> <h1 id="securing-api-tokens-on-windows">Securing API tokens on Windows:</h1> <p>To secure API token you need to define them in the environment variables.</p> <ol> <li>Search the <code class="language-plaintext highlighter-rouge">Environment Variables</code> you will find Edit the Environment variables, open it. There, you will find these settings:</li> </ol> <p><img src="https://miro.medium.com/max/824/1*AvRoS1MbBRl4oe2q7Tq-rA.png" alt=""/></p> <ol> <li>Then go to Environment Variables. Click on the New button then add the API token with some variable name and take note of it:</li> </ol> <p><img src="https://miro.medium.com/max/1306/1*hRrygxDz_d5EbPRZfsDh6w.png" alt=""/></p> <ol> <li>After adding this Variable then restart it.</li> </ol> <p>Now you can use this API token across any code in your local system!</p> <h1 id="securing-api-tokens-on-github">Securing API tokens on GitHub:</h1> <ol> <li>You need to have the code pushed to GitHub. Open the Your Repo Settings tab as shown below.</li> </ol> <p><img src="https://miro.medium.com/max/2666/1*wpoSrUMBBM05WfZrSEXOrA.png" alt=""/></p> <ol> <li> <p>Then open Secrets on the left side as shown in the above picture.</p> </li> <li> <p>Then add new Secret with the key name and API token.</p> </li> <li> <p>Now this key works across the repository.</p> </li> </ol> <p>Secret Keys won‚Äôt be disclosed to any other users or third parties by GitHub.</p> <h1 id="securing-api-tokens-on-heroku">Securing API tokens on Heroku:</h1> <p>In Heroku, you can do this in two ways either through Heroku CLI or Dashboard.</p> <h2 id="heroku-cli">Heroku CLI</h2> <ol> <li>Open CMD and login to Heroku with Heroku login</li> <li>Go to your Project Folder</li> <li>Then use this command: <code class="language-plaintext highlighter-rouge">heroku config:set &lt;Key&gt;=&lt;Value&gt; &lt;Key&gt;=&lt;Value&gt;</code></li> </ol> <p>Now you can use the key name anywhere in the project!</p> <h2 id="heroku-dashboard">Heroku Dashboard:</h2> <ol> <li>First Create an app in the Heroku</li> <li>Go to the App settings tab</li> <li>Go to Config Vars and add your API tokens</li> </ol> <p><img src="https://miro.medium.com/max/2480/1*MJWNVqZQpfWIpiLm9wTwsg.png" alt=""/></p> <p>That‚Äôs it for the post. I hope this post is helpful to you!</p>]]></content><author><name>MaheshtheDev</name></author><category term="web"/><category term="API"/><category term="security"/><category term="web-development"/><summary type="html"><![CDATA[Securing API tokens is important to avoid their misuse. This post will show you how to secure your API tokens!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.techfunnel.com/wp-content/uploads/2021/07/application-programming-interface.png"/><media:content medium="image" url="https://www.techfunnel.com/wp-content/uploads/2021/07/application-programming-interface.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Metamask authentication with ThirdWeb in Next.JS</title><link href="https://genicsblog.com/anurag/metamask-authentication-with-thirdweb-in-nextjs" rel="alternate" type="text/html" title="Metamask authentication with ThirdWeb in Next.JS"/><published>2022-01-15T00:00:00+00:00</published><updated>2022-01-15T00:00:00+00:00</updated><id>https://genicsblog.com/anurag/metamask-authentication-with-thirdweb-in-nextjs</id><content type="html" xml:base="https://genicsblog.com/anurag/metamask-authentication-with-thirdweb-in-nextjs"><![CDATA[<p>Hey There! What‚Äôs up!</p> <p><img src="https://media.giphy.com/media/zSHERzpaQ9x8k/giphy.gif" alt="hello"/></p> <p>So Web3 has been in total hype these days, and a lot of developers have been trying out web3 lately, including me.</p> <p>And, Authentication is one of the most skeptical parts of a Full Stack application! And in Web 3.0, this flow is managed by wallets, and Metamask is the most popular among them.</p> <p>So, in this article, I‚Äôm going to show how you can integrate Metamask auth with ThirdWeb in NextJS!</p> <h3 id="demo-of-what-we-are-building-today">Demo of what we are building today:</h3> <div class="mb-6 aspect-video"> <iframe src="https://www.loom.com/embed/d28cd1093e8046a8b9475777d3bf65ac?hide_owner=true&amp;hide_share=true&amp;hide_title=true&amp;hideEmbedTopBar=true" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen="" class="w-full h-full rounded-xl" loading="lazy"> </iframe> </div> <h3 id="installing-a-new-nextjs-app">Installing a new NextJS app</h3> <p>First, create a NextJS app. I‚Äôm also using Tailwind CSS as my UI preference. You can use anything that you like.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx create-next-app <span class="nt">-e</span> with-tailwindcss metamask-auth
</code></pre></div></div> <h4 id="clear-up-the-boilerplate">Clear up the boilerplate</h4> <p>Now, clear up the boilerplate in the <code class="language-plaintext highlighter-rouge">index.js</code> file.</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Home</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>
<span class="p">}</span>
</code></pre></div></div> <h4 id="installing-the-dependencies">Installing the dependencies</h4> <p>Now, we will install the only required dependency for this app, <code class="language-plaintext highlighter-rouge">@3rdweb/hooks</code>. Go ahead and install <code class="language-plaintext highlighter-rouge">@3rdweb/hooks</code> in your project directory.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># for npm</span>
npm i @3rdweb/hooks

<span class="c"># for yarn</span>
yarn add @3rdweb/hooks
</code></pre></div></div> <h3 id="setting-up-the-third-web-provider">Setting up the Third Web Provider</h3> <p>Now, we are going to set up the <code class="language-plaintext highlighter-rouge">ThirdwebWeb3Provider</code> in our <code class="language-plaintext highlighter-rouge">_app.js</code> file:</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">"</span><span class="s2">../styles/globals.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ThirdwebWeb3Provider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@3rdweb/hooks</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="dl">"</span><span class="s2">regenerator-runtime/runtime</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">MyApp</span><span class="p">({</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">pageProps</span> <span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">supportedChainIds</span> <span class="o">=</span> <span class="p">[</span><span class="mi">80001</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>

  <span class="kd">const</span> <span class="nx">connectors</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">injected</span><span class="p">:</span> <span class="p">{},</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">ThirdwebWeb3Provider</span>
      <span class="na">supportedChainIds</span><span class="p">=</span><span class="si">{</span><span class="nx">supportedChainIds</span><span class="si">}</span>
      <span class="na">connectors</span><span class="p">=</span><span class="si">{</span><span class="nx">connectors</span><span class="si">}</span>
    <span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Component</span> <span class="si">{</span><span class="p">...</span><span class="nx">pageProps</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">ThirdwebWeb3Provider</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyApp</span><span class="p">;</span>
</code></pre></div></div> <p>Here, first, we are going to import the provider and <code class="language-plaintext highlighter-rouge">regenerator-runtime/runtime</code> at the top of the script.</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ThirdwebWeb3Provider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@3rdweb/hooks</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="dl">"</span><span class="s2">regenerator-runtime/runtime</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div> <p>Next, in the main function, we are specifying the <code class="language-plaintext highlighter-rouge">supportedChainIds</code> and <code class="language-plaintext highlighter-rouge">connectors</code>. You might be wondering what are these.</p> <p><code class="language-plaintext highlighter-rouge">supportedChainIds</code> contains a list of networks that are supported by our app. Here, <code class="language-plaintext highlighter-rouge">80001</code> is for <code class="language-plaintext highlighter-rouge">Mumbai Testnet Network</code> and <code class="language-plaintext highlighter-rouge">4</code> is for <code class="language-plaintext highlighter-rouge">Rinkeby Testnet Network</code>. You can check the list of all networks and their Chain Ids <a href="Link">here</a> .</p> <p><code class="language-plaintext highlighter-rouge">connectors</code> is basically all the wallet providers we want to support. Here, <code class="language-plaintext highlighter-rouge">injected</code> is for Metamask wallet. This will be used when we are actually making the function to connect wallet.</p> <p>Next, we are wrapping our whole app in <code class="language-plaintext highlighter-rouge">ThirdwebWeb3Provider</code> with <code class="language-plaintext highlighter-rouge">supportedChainIds</code> and <code class="language-plaintext highlighter-rouge">connectors</code> props to specify the configuration.</p> <p>That‚Äôs it for the <code class="language-plaintext highlighter-rouge">_app.js</code> file.</p> <h3 id="making-a-ui-in-the-indexjs-file">Making a UI in the <code class="language-plaintext highlighter-rouge">index.js</code> file</h3> <p>Now, let‚Äôs first make a UI for the login flow.</p> <p>Head over to <code class="language-plaintext highlighter-rouge">index.js</code> file and make a simple <code class="language-plaintext highlighter-rouge">button</code> to connect wallet.</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Home</span><span class="p">()</span> <span class="p">{</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"flex flex-col items-center justify-center min-h-screen py-2 bg-slate-100"</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span>
          <span class="na">className</span><span class="p">=</span><span class="s">"px-4 py-2 rounded-md bg-purple-600 cursor-pointer hover:bg-purple-500 text-xl font-semibold duration-100 text-white"</span>
        <span class="p">&gt;</span>
          Connect Wallet
        <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>At this point, you will have a basic UI like this:</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641906515845/FMDlG49IA.png" alt="Screenshot (3).png"/></p> <h3 id="building-the-connect-wallet-functionality">Building the connect wallet functionality</h3> <p>Now, let‚Äôs build the <code class="language-plaintext highlighter-rouge">connect wallet</code> functionality.</p> <p>First, we will import the <code class="language-plaintext highlighter-rouge">useWeb3</code> hook from <code class="language-plaintext highlighter-rouge">@3rdweb/hooks</code> in our <code class="language-plaintext highlighter-rouge">index.js</code> file:</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useWeb3</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@3rdweb/hooks</span><span class="dl">"</span> 
</code></pre></div></div> <p>Now, inside the <code class="language-plaintext highlighter-rouge">Home</code> component:</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">connectWallet</span><span class="p">,</span> <span class="nx">address</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useWeb3</span><span class="p">();</span>
</code></pre></div></div> <p>Now, we are going to assign the <code class="language-plaintext highlighter-rouge">connectWallet</code> to the connect wallet button:</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">button</span> <span class="na">className</span><span class="p">=</span><span class="s">"px-4 py-2 rounded-md bg-purple-600 cursor-pointer hover:bg-purple-500 text-xl font-semibold duration-100 text-white"</span>
<span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span><span class="o">=&gt;</span><span class="nx">connectWallet</span><span class="p">(</span><span class="dl">"</span><span class="s2">injected</span><span class="dl">"</span><span class="p">)</span><span class="si">}</span>
<span class="p">&gt;</span>
      Connect Wallet
<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</code></pre></div></div> <p>Here, we are passing <code class="language-plaintext highlighter-rouge">injected</code> as a param to the <code class="language-plaintext highlighter-rouge">connectWallet</code> function. If your remember from the above steps, this is used to specify that we are going to use Metamask to authenticate user.</p> <p>Now, at this point, you will have a working connect wallet button.</p> <h4 id="displaying-user-address">Displaying user address:</h4> <p>Now, in the <code class="language-plaintext highlighter-rouge">Home</code> component, we are going to check if the user is authenticated and then render component based on that:</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">return</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"flex flex-col items-center justify-center min-h-screen py-2 bg-slate-100"</span><span class="p">&gt;</span>
    <span class="si">{</span><span class="nx">address</span> <span class="p">?</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">p</span> <span class="na">className</span><span class="p">=</span><span class="s">"px-2 py-1 rounded-full bg-gray-200 hover:bg-gray-300 font-mono font-medium cursor-pointer duration-100"</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="nx">address</span><span class="si">}</span>
      <span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">button</span>
        <span class="na">className</span><span class="p">=</span><span class="s">"px-4 py-2 rounded-md bg-purple-600 cursor-pointer hover:bg-purple-500 text-xl font-semibold duration-100 text-white"</span>
        <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span><span class="o">=&gt;</span><span class="nx">connectWallet</span><span class="p">(</span><span class="dl">"</span><span class="s2">injected</span><span class="dl">"</span><span class="p">)</span><span class="si">}</span>
      <span class="p">&gt;</span>
        Connect Wallet
      <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">)</span><span class="si">}</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div> <h4 id="error-handling">Error handling:</h4> <p>Sometimes, the app may not work cause of errors, so in that case, we can use the <code class="language-plaintext highlighter-rouge">error</code> object and log its value.</p> <p>Below our <code class="language-plaintext highlighter-rouge">useWeb3</code> hook:</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">connectWallet</span><span class="p">,</span> <span class="nx">address</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useWeb3</span><span class="p">();</span>

<span class="nx">error</span> <span class="p">?</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">:</span> <span class="kc">null</span><span class="p">;</span>
</code></pre></div></div> <p>That‚Äôs it! We have done it!</p> <p><img src="https://media.giphy.com/media/3o6fJ1BM7R2EBRDnxK/giphy.gif" alt="congrats"/></p>]]></content><author><name>anurag</name></author><category term="web3"/><category term="blockchain"/><category term="crypto"/><category term="next-js"/><summary type="html"><![CDATA[Let's learn how authentication works in the web3 world!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/77309809/149489789-db55b033-3196-45e7-9f72-cb49c3630c2f.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/77309809/149489789-db55b033-3196-45e7-9f72-cb49c3630c2f.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Make your first Crypto with ThirdWeb ü§Ø</title><link href="https://genicsblog.com/avneesh/make-your-first-crypto-with-thirdweb" rel="alternate" type="text/html" title="Make your first Crypto with ThirdWeb ü§Ø"/><published>2022-01-15T00:00:00+00:00</published><updated>2022-01-15T00:00:00+00:00</updated><id>https://genicsblog.com/avneesh/make-your-first-crypto-with-thirdweb</id><content type="html" xml:base="https://genicsblog.com/avneesh/make-your-first-crypto-with-thirdweb"><![CDATA[<p>Have you ever wondered how amazing it would be to create your crypto? So, in this article let‚Äôs build our very first crypto!</p> <h2 id="setup">Setup</h2> <p>Create a new folder-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">mkdir </span>thirdweb-crypto
</code></pre></div></div> <p>Initialize Node.js-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm init <span class="nt">-y</span>
</code></pre></div></div> <p>Change type to <code class="language-plaintext highlighter-rouge">module</code></p> <p>we are going to use modular imports so change the type to <code class="language-plaintext highlighter-rouge">module</code> in <code class="language-plaintext highlighter-rouge">package.json</code>-</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"module"</span><span class="err">,</span><span class="w">
</span></code></pre></div></div> <p>Install the packages needed-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i @3rdweb/sdk dotenv ethers
</code></pre></div></div> <h2 id="initiazling-3rdweb">Initiazling 3rdweb</h2> <p>To keep stuff clean, create a new folder <code class="language-plaintext highlighter-rouge">scripts</code>. Inside of it create a file a file <code class="language-plaintext highlighter-rouge">initialize-sdk.js</code>. Now, paste in the following-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ThirdwebSDK</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@3rdweb/sdk</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ethers</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">ethers</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">dotenv</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">dotenv</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">();</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PRIVATE_KEY</span> <span class="o">||</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PRIVATE_KEY</span> <span class="o">==</span> <span class="dl">""</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">üõë Private key not found.</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ALCHEMY_API_URL</span> <span class="o">||</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ALCHEMY_API_URL</span> <span class="o">==</span> <span class="dl">""</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">üõë Alchemy API URL not found.</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">WALLET_ADDRESS</span> <span class="o">||</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">WALLET_ADDRESS</span> <span class="o">==</span> <span class="dl">""</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">üõë Wallet Address not found.</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">sdk</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ThirdwebSDK</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">ethers</span><span class="p">.</span><span class="nx">Wallet</span><span class="p">(</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PRIVATE_KEY</span><span class="p">,</span>
    <span class="nx">ethers</span><span class="p">.</span><span class="nx">getDefaultProvider</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ALCHEMY_API_URL</span><span class="p">)</span>
  <span class="p">)</span>
<span class="p">);</span>
<span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">apps</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">sdk</span><span class="p">.</span><span class="nx">getApps</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Your app address is:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">apps</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">address</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Failed to get apps from the sdk</span><span class="dl">"</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">})();</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">sdk</span><span class="p">;</span>
</code></pre></div></div> <p>This is going to initialize 3rdweb for us but first, we need some keys. So, create a new file <code class="language-plaintext highlighter-rouge">.env</code> in the root of your folder and add these three variables-</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>WALLET_ADDRESS=&lt;3rdweb_project_address&gt;
ALCHEMY_API_URL=&lt;alchemy_api_key&gt;
PRIVATE_KEY=&lt;wallet_private_key&gt;
</code></pre></div></div> <h3 id="creating-a-3rdweb-project">Creating a 3rdweb project</h3> <p>Go to <a href="https://thirdweb.com/">Thirdweb</a> sign up/in then, create a new project. I am going to use Rinkeby for this demo. Give a name to your project and you can also add a description if you want.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641983754661/iFAG14OuU4.png" alt="image.png"/></p> <p>Copy the address that you get and replace it as the value of <code class="language-plaintext highlighter-rouge">WALLET_ADDRESS</code></p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641984766639/qRsZEzp1l.png" alt="image.png"/></p> <h3 id="creating-an-alchemy-project">Creating an alchemy project</h3> <p>Go to <a href="https://alchemyapi.io/">alchemy</a> after signing in, create a new project on the same chain and network as you did on thirdweb.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641984259639/7p-ar-Isl.png" alt="image.png"/></p> <p>Click on the view key button and copy the HTTP one.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641985336824/Fpy2kRSm0.png" alt="image.png"/></p> <p>This is the API key that we need from alchemy so paste it in the <code class="language-plaintext highlighter-rouge">.env</code> file.</p> <h3 id="getting-the-private-key">Getting the Private Key</h3> <p>In your metamask wallet, click on account details</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641985709370/q0ORYddS8.png" alt="image.png"/></p> <p>Click on the export private key button, enter the password and copy the key that you get. This is your <code class="language-plaintext highlighter-rouge">PRIVATE_KEY</code>.</p> <p>Let‚Äôs now run the initializing script-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node scripts/initialize-sdk.js
</code></pre></div></div> <p>You will now see your app address-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641986218189/E-WpBbIJD.png" alt="image.png"/></p> <h2 id="creating-and-deploying-our-crypto">Creating and deploying our crypto</h2> <p>Create a new file <code class="language-plaintext highlighter-rouge">deploy-token.js</code> and paste in the following-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">sdk</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./initialize-sdk.js</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">sdk</span><span class="p">.</span><span class="nx">getAppModule</span><span class="p">(</span><span class="dl">"</span><span class="s2">YOUR_APP_ADDRESS</span><span class="dl">"</span><span class="p">);</span>
<span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">tokenModule</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">deployTokenModule</span><span class="p">({</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">My Token</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">symbol</span><span class="p">:</span> <span class="dl">"</span><span class="s2">TOKEN</span><span class="dl">"</span><span class="p">,</span>
    <span class="p">});</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
      <span class="dl">"</span><span class="s2">‚úÖ Successfully deployed token module, address:</span><span class="dl">"</span><span class="p">,</span>
      <span class="nx">tokenModule</span><span class="p">.</span><span class="nx">address</span>
    <span class="p">);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">failed to deploy token module</span><span class="dl">"</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">})();</span>
</code></pre></div></div> <p>You need to replace the app address with the address that came in the console. You also need to change the name and symbol of the token to what you want it to be called. Let‚Äôs now run it-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node scripts/deploy-token.js
</code></pre></div></div> <p>It works and the token has been deployed ü•≥</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641988251933/cS1Or4sUP.png" alt="image.png"/></p> <p>You can also view the contract on <a href="https://rinkeby.etherscan.io/">Etherscan</a></p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641988321364/9nju9LAo8.png" alt="image.png"/></p> <h2 id="import-the-token-to-your-metamask-wallet">Import the token to your metamask wallet</h2> <p>We can also see how many tokens we have through the metamask wallet, so open Metamask scroll below and you will see a button ‚ÄúImport tokens‚Äù.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641988462000/-PlYIVzMO.png" alt="image.png"/></p> <p>Paste in the address of your token and click <strong>add</strong>.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641988496990/KPFJzu_FG.png" alt="image.png"/></p> <p>You will now see our token here üéâ.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641988567376/6jMQO-afG.png" alt="image.png"/></p> <p>But it is 0 in quantity so let‚Äôs mint some tokens.</p> <h2 id="minting-tokens">Minting tokens</h2> <p>Create a new file <code class="language-plaintext highlighter-rouge">mint-token.js</code> and add the following-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ethers</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">ethers</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">sdk</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./initialize-sdk.js</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">tokenModule</span> <span class="o">=</span> <span class="nx">sdk</span><span class="p">.</span><span class="nx">getTokenModule</span><span class="p">(</span><span class="dl">"</span><span class="s2">YOUR_TOKEN_ADDRESS</span><span class="dl">"</span><span class="p">);</span>
<span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">amount</span> <span class="o">=</span> <span class="mi">1</span><span class="nx">_000_000</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">amountWith18Decimals</span> <span class="o">=</span> <span class="nx">ethers</span><span class="p">.</span><span class="nx">utils</span><span class="p">.</span><span class="nx">parseUnits</span><span class="p">(</span><span class="nx">amount</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span> <span class="mi">18</span><span class="p">);</span>
    <span class="k">await</span> <span class="nx">tokenModule</span><span class="p">.</span><span class="nx">mint</span><span class="p">(</span><span class="nx">amountWith18Decimals</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">totalSupply</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">tokenModule</span><span class="p">.</span><span class="nx">totalSupply</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
      <span class="dl">"</span><span class="s2">‚úÖ There now is</span><span class="dl">"</span><span class="p">,</span>
      <span class="nx">ethers</span><span class="p">.</span><span class="nx">utils</span><span class="p">.</span><span class="nx">formatUnits</span><span class="p">(</span><span class="nx">totalSupply</span><span class="p">,</span> <span class="mi">18</span><span class="p">),</span>
      <span class="dl">"</span><span class="s2">$TOKEN in circulation</span><span class="dl">"</span>
    <span class="p">);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Failed to mint tokens</span><span class="dl">"</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">})();</span>
</code></pre></div></div> <p>Replace <code class="language-plaintext highlighter-rouge">YOUR_TOKEN_ADDRESS</code> with the address you got. You can also change the number of tokens to be minted. Currently, it will mint 1,000,000 tokens.</p> <p>Run the script-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node scripts/mint-token.js
</code></pre></div></div> <p>We successfully minted the tokens! ü•≥</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641989192684/gg9oPg9xv.png" alt="image.png"/></p> <p>In metamask also it shows the tokens!</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641989215876/D8gN8Nm59.png" alt="image.png"/></p> <p>You can also send these tokens to your friends or anyone you like :D</p> <h2 id="conclusion">Conclusion</h2> <p><a href="https://thirdweb.com">thirdweb</a> is a great way to build web3 stuff, hope you found this article useful and made your first crypto. See ya in the next one ‚úåÔ∏è</p> <h3 id="useful-links">Useful links</h3> <p><a href="https://github.com/avneesh0612/thirdweb-crypto">GitHub Repo</a></p> <p><a href="https://thirdweb.com/">ThirdWeb</a></p> <p><a href="https://links.avneesh.tech/">Let‚Äôs connect</a></p>]]></content><author><name>avneesh</name></author><category term="web3"/><category term="blockchain"/><category term="crypto"/><summary type="html"><![CDATA[With all this web3 hype going on, are you keen to learn how you can jump right in and build your own crypto?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/76690419/149300558-70052677-940d-49d1-b243-e4e0ba437c01.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/76690419/149300558-70052677-940d-49d1-b243-e4e0ba437c01.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Building a WhatsApp API using Node.js &amp;amp; Express</title><link href="https://genicsblog.com/usman/whatsapp-api-with-node-js-and-express" rel="alternate" type="text/html" title="Building a WhatsApp API using Node.js &amp;amp; Express"/><published>2022-01-09T00:00:00+00:00</published><updated>2022-01-09T00:00:00+00:00</updated><id>https://genicsblog.com/usman/whatsapp-api-node-js-express</id><content type="html" xml:base="https://genicsblog.com/usman/whatsapp-api-with-node-js-and-express"><![CDATA[<p><img src="https://c.tenor.com/8GDoVtr9mvQAAAAC/hey-everyone-spider-man.gif" alt="hey.gif"/></p> <p>Today, you will learn to build a <strong>WhatsApp REST API</strong> using Node.js and Express using Puppeteer and web scraping!</p> <p>Although we won‚Äôt be doing actual web scraping, we will use a library that does everything for you and makes it very easy to work with WhatsApp programmatically.</p> <h2 id="setup">Setup</h2> <h3 id="express-server-setup">Express server setup</h3> <p>To set up the express server, we are not going to do it from scratch, we‚Äôll use a generator called <a href="https://npmjs.org/express-draft"><code class="language-plaintext highlighter-rouge">express-draft</code></a> by <a href="https://www.youtube.com/c/yoursTRULY267">YoursTruly</a>. First, install <code class="language-plaintext highlighter-rouge">express-draft</code> globally and use the following command to generate an express app.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i <span class="nt">-g</span> express-draft
exp <span class="nb">.</span>
</code></pre></div></div> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641634524269/MM1PjxGlU.png" alt="image.png"/></p> <h3 id="install-whatsapp-web-library">Install Whatsapp Web library</h3> <blockquote> <p><strong>Caution</strong>: Installing this package will also download Chromium because of Puppeteer. To disable Chromium download, follow the steps on <a href="https://blog.usman-s.me/how-to-skip-chromium-download-in-puppeteer">this post</a>.</p> </blockquote> <p>There‚Äôs an awesome <a href="https://github.com/pedroslopez/whatsapp-web.js">open-source Whatsapp client</a> that connects through the Whatsapp Web browser app made by <a href="https://twitter.com/pedroslopez">Pedro S. Lopez</a>.</p> <p>First, we‚Äôll install it through <strong>npm</strong> (or <strong>yarn</strong>).</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i whatsapp-web.js
</code></pre></div></div> <p>After we‚Äôre done with that, we can set it up in our <code class="language-plaintext highlighter-rouge">app.js</code> file by following the given <a href="https://github.com/pedroslopez/whatsapp-web.js/blob/main/example.js">example</a>.</p> <p>We can alter the file as follows:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">createError</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http-errors</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">morgan</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">morgan</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">Client</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">whatsapp-web.js</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">dotenv</span><span class="dl">'</span><span class="p">).</span><span class="nx">config</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">SESSION_FILE_PATH</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">./session.json</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">sessionCfg</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">existsSync</span><span class="p">(</span><span class="nx">SESSION_FILE_PATH</span><span class="p">))</span> <span class="p">{</span>
  <span class="nx">sessionCfg</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="nx">SESSION_FILE_PATH</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">({</span>
  <span class="na">puppeteer</span><span class="p">:</span> <span class="p">{</span> <span class="na">headless</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span> <span class="c1">// Make headless true or remove to run browser in background</span>
  <span class="na">session</span><span class="p">:</span> <span class="nx">sessionCfg</span><span class="p">,</span>
<span class="p">});</span>

<span class="nx">client</span><span class="p">.</span><span class="nx">initialize</span><span class="p">();</span>
</code></pre></div></div> <p>While using this library, whenever a user logs in, their information will be stored in a <code class="language-plaintext highlighter-rouge">session.json</code> file, which is then used to authenticate the user the next time when the server starts.</p> <p><strong>Important</strong>: Create a <code class="language-plaintext highlighter-rouge">nodemon.json</code> file in the root folder and add these contents to ignore the <code class="language-plaintext highlighter-rouge">session.json</code> file whenever it changes.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="s2">"$schema"</span><span class="w"> </span><span class="err">can</span><span class="w"> </span><span class="err">be</span><span class="w"> </span><span class="err">omitted.</span><span class="w"> </span><span class="err">It's</span><span class="w"> </span><span class="err">just</span><span class="w"> </span><span class="err">used</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">IntelliSense.</span><span class="w"> </span><span class="err">REMOVE</span><span class="w"> </span><span class="err">THIS</span><span class="w"> </span><span class="err">COMMENT</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"$schema"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://json.schemastore.org/nodemon.json"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"ignore"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"session.json"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="creating-routes-and-user-login">Creating routes and user login</h2> <h3 id="using-events">Using events</h3> <p><code class="language-plaintext highlighter-rouge">whatsapp-web.js</code> has a lot of events to work with, and we‚Äôll now use some of them to get the QR code, check the authentication, etc.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Add this after express code but before starting the server</span>

<span class="nx">client</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">qr</span><span class="dl">'</span><span class="p">,</span> <span class="nx">qr</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// NOTE: This event will not be fired if a session is specified.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">QR RECEIVED</span><span class="dl">'</span><span class="p">,</span> <span class="nx">qr</span><span class="p">);</span>
  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/getqr</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span> <span class="nx">qr</span> <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="nx">client</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">authenticated</span><span class="dl">'</span><span class="p">,</span> <span class="nx">session</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">AUTHENTICATED</span><span class="dl">'</span><span class="p">,</span> <span class="nx">session</span><span class="p">);</span>
  <span class="nx">sessionCfg</span> <span class="o">=</span> <span class="nx">session</span><span class="p">;</span>
  <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">SESSION_FILE_PATH</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">session</span><span class="p">),</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="nx">client</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">auth_failure</span><span class="dl">'</span><span class="p">,</span> <span class="nx">msg</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// Fired if session restore was unsuccessfull</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">AUTHENTICATION FAILURE</span><span class="dl">'</span><span class="p">,</span> <span class="nx">msg</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">client</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">ready</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">READY</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// Listening for the server</span>
<span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`üöÄ @ http://localhost:</span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
</code></pre></div></div> <p>The above code uses events provided by the library to tackle different situations. They are pretty self-explanatory so I am not gonna explain each of them.</p> <p>In the <code class="language-plaintext highlighter-rouge">qr</code> event, we create a route that sends the QR code as the response. The QR code is in raw format, meaning it needs to be generated so for the purpose of this tutorial, we‚Äôll use a library called <code class="language-plaintext highlighter-rouge">qrcode-terminal</code> to show the QR Code in the terminal.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Run `npm i qrcode-terminal` before adding this code</span>

<span class="kd">const</span> <span class="nx">qrcode</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">qrcode-terminal</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">client</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">qr</span><span class="dl">'</span><span class="p">,</span> <span class="nx">qr</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// NOTE: This event will not be fired if a session is specified.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">QR RECEIVED</span><span class="dl">'</span><span class="p">,</span> <span class="nx">qr</span><span class="p">);</span>
  <span class="nx">qrcode</span><span class="p">.</span><span class="nx">generate</span><span class="p">(</span><span class="nx">qr</span><span class="p">,</span> <span class="p">{</span> <span class="na">small</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span> <span class="c1">// Add this line</span>
  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/getqr</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span> <span class="nx">qr</span> <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div> <h3 id="the-sendmessage-endpoint">The <code class="language-plaintext highlighter-rouge">sendmessage</code> endpoint</h3> <p>Now that we have everything set up, let‚Äôs do the most exciting part that is to send a message using our own API.</p> <p>For that, we create a route in the <code class="language-plaintext highlighter-rouge">app.js</code> file itself.</p> <p>Let‚Äôs create the POST endpoint for <code class="language-plaintext highlighter-rouge">sendmessage</code> and it will be an <code class="language-plaintext highlighter-rouge">async</code> function with a try-catch block.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/sendmessage</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="c1">// Magic happens here</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">next</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div> <p>In the body of the request, the user has to enter two pieces of data.</p> <ol> <li>Mobile number</li> <li>Message</li> </ol> <p>We‚Äôll identify those as <code class="language-plaintext highlighter-rouge">number</code> and <code class="language-plaintext highlighter-rouge">message</code> respectively. We will get them from the request body, and use them to easily send the message <strong>from the client to the given number</strong>.</p> <p>To send a message, we use the <code class="language-plaintext highlighter-rouge">client.sendMessage</code> method. These are the arguments we need to pass in</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641641747436/t-Pzomgq-.png" alt="image.png"/></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/sendmessage</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">message</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span> <span class="c1">// Get the body</span>
    <span class="kd">const</span> <span class="nx">msg</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nx">sendMessage</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">number</span><span class="p">}</span><span class="s2">@c.us`</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span> <span class="c1">// Send the message</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span> <span class="nx">msg</span> <span class="p">});</span> <span class="c1">// Send the response</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">next</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div> <p>Now here, in the <code class="language-plaintext highlighter-rouge">sendMessage</code> method, we pass in the mobile number and the message itself. With the mobile number, we have to attach <code class="language-plaintext highlighter-rouge">@c.us</code> at the very end, so we do that with template literals in JavaScript.</p> <h2 id="testing-the-api">Testing the API</h2> <p>In order to test our API, we first run it using the command <code class="language-plaintext highlighter-rouge">npm run dev</code>. That will open up a browser (if you‚Äôve set <code class="language-plaintext highlighter-rouge">headless</code> to <code class="language-plaintext highlighter-rouge">false</code>)</p> <p>Running the server will give us the QR Code to authenticate because it‚Äôs the first time you run it. So, you have to scan it through WhatsApp.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641642355849/9jDhG2-nd.png" alt="image.png"/></p> <p>Once authenticated, you will notice that a <code class="language-plaintext highlighter-rouge">session.json</code> file has been created with the following contents.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641642315529/HTwbVxMBq.png" alt="image.png"/></p> <p>Now in VS Code itself, we‚Äôll use an extension called <strong>Thunder Client</strong>, which works like Postman for API testing. <a href="https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client">Here‚Äôs the link</a> to install it.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641642506648/MYLChp2-l.png" alt="image.png"/></p> <p>Create a <strong>New Request</strong> in Thunder Client, and then add the following details. In the <code class="language-plaintext highlighter-rouge">number</code> field, add the mobile number followed by the country code of the number.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641645569198/ysdOUnwwE.png" alt="image.png"/></p> <blockquote> <p>Look at the image carefully</p> </blockquote> <p>And then hit <strong>Send</strong>.</p> <p>If the message is sent successfully, the number you entered will receive it and you will get back the <code class="language-plaintext highlighter-rouge">msg</code> as the response. If not, you will get an error.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641643609398/muQhzRQSn.png" alt="image.png"/></p> <p><img src="https://c.tenor.com/68a5_Ug62VYAAAAM/success-strong.gif" alt="success.gif"/></p> <h2 id="conclusion">Conclusion</h2> <p>You can read more about the library here:</p> <p><a href="https://wwebjs.dev">https://wwebjs.dev</a></p> <p>I hope you enjoyed building out the WhatsApp API using Node.js, Express, and <code class="language-plaintext highlighter-rouge">whatsapp-web.js</code>.</p> <p>Comment down your thoughts! There is always room for improvement so let me know your suggestions on this project!</p> <p><strong>Connect with me on my <a href="https://youtube.com/MaxProgramming">YouTube channel</a> and my <a href="https://twitter.com/maxprogramming1">Twitter</a> üòâ</strong></p> <p>Until next time, keeping awesome ‚úåÔ∏è.</p>]]></content><author><name>usman</name></author><category term="backend"/><category term="node-js"/><category term="api"/><summary type="html"><![CDATA[The complete guide to building a WhatsApp API using Node.js, Express and whatsapp-web.js]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1641723506307/rnT9FncaZ.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1641723506307/rnT9FncaZ.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Making a toast notification with HTML, CSS, and JS</title><link href="https://genicsblog.com/anishde12020/making-a-toast-notification-with-html-css-and-js" rel="alternate" type="text/html" title="Making a toast notification with HTML, CSS, and JS"/><published>2022-01-07T00:00:00+00:00</published><updated>2022-01-07T00:00:00+00:00</updated><id>https://genicsblog.com/anishde12020/making-a-toast-notification-with-html-css-and-js</id><content type="html" xml:base="https://genicsblog.com/anishde12020/making-a-toast-notification-with-html-css-and-js"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Toasts are very useful for showing users some information. It has a wide variety of uses from displaying success messages for successful actions, showing error messages in case something goes wrong, and much more.</p> <p>Today we are going to build a simple toast with HTML and CSS. We are going to be using some javascript to add some interactivity.</p> <h3 id="what-we-are-making--">What we are making -</h3> <p>We are going to be making a toast that shows up when a button is clicked. It can also be closed, which is hidden away, by clicking a close button.</p> <div class="mb-6 aspect-video"> <iframe class="w-full h-full rounded-xl" scrolling="no" src="https://codepen.io/anishde12020/embed/preview/JjrYMrW?default-tab=html%2Cresult&amp;theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true"> </iframe> </div> <h2 id="basic-css-to-make-a-toast">Basic CSS to make a toast</h2> <p>To make a toast animate in or out, we need to make the toast first. For this example, I am going to add a simple icon and some text in a box and that is going to be our toast.</p> <p>So, in the markup, let us start by adding a <code class="language-plaintext highlighter-rouge">div</code> for out toast -</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"toast"</span> <span class="na">id=</span><span class="s">"toast"</span><span class="nt">&gt;&lt;/div&gt;</span>
</code></pre></div></div> <p>Now, we need to add an icon. I am going to grab a simple information icon from <a href="https://heroicons.com/">HeroIcons</a> and put in the SVG -</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"toast"</span> <span class="na">id=</span><span class="s">"toast"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;svg</span>
    <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span>
    <span class="na">fill=</span><span class="s">"none"</span>
    <span class="na">class=</span><span class="s">"icon"</span>
    <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span>
    <span class="na">stroke=</span><span class="s">"currentColor"</span>
  <span class="nt">&gt;</span>
    <span class="nt">&lt;path</span>
      <span class="na">stroke-linecap=</span><span class="s">"round"</span>
      <span class="na">stroke-linejoin=</span><span class="s">"round"</span>
      <span class="na">stroke-width=</span><span class="s">"2"</span>
      <span class="na">d=</span><span class="s">"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"</span>
    <span class="nt">/&gt;</span>
  <span class="nt">&lt;/svg&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <p>Let us also add a text -</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"toast"</span> <span class="na">id=</span><span class="s">"toast"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;svg</span>
    <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span>
    <span class="na">fill=</span><span class="s">"none"</span>
    <span class="na">class=</span><span class="s">"icon"</span>
    <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span>
    <span class="na">stroke=</span><span class="s">"currentColor"</span>
  <span class="nt">&gt;</span>
    <span class="nt">&lt;path</span>
      <span class="na">stroke-linecap=</span><span class="s">"round"</span>
      <span class="na">stroke-linejoin=</span><span class="s">"round"</span>
      <span class="na">stroke-width=</span><span class="s">"2"</span>
      <span class="na">d=</span><span class="s">"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"</span>
    <span class="nt">/&gt;</span>
  <span class="nt">&lt;/svg&gt;</span>
  <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"text"</span><span class="nt">&gt;</span>Some Information<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <p>This is what our page should look like -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1638691425468/rYVyqWbLO.png" alt="image.png"/></p> <p>The icon is so big that is doesn‚Äôt even fit in the view. Let us fix this design with some CSS and then style it.</p> <p>First, we are going to style the icon by defining a width and a height -</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.icon</span> <span class="p">{</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">2rem</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">2rem</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Let us now make our toast a flexbox and add some margin on the icon. I am also going to position the toast on the top-right using an absolute position.</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.icon</span> <span class="p">{</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">2rem</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">2rem</span><span class="p">;</span>
  <span class="nl">margin-right</span><span class="p">:</span> <span class="m">1rem</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.toast</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
  <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">50px</span><span class="p">;</span>
  <span class="nl">right</span><span class="p">:</span> <span class="m">80px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1638691746319/Xe8uqB4fX.png" alt="image.png"/></p> <p>Everything looks good except for the styling. Let us add some colors and other styles -</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.icon</span> <span class="p">{</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">2rem</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">2rem</span><span class="p">;</span>
  <span class="nl">margin-right</span><span class="p">:</span> <span class="m">1rem</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.text</span> <span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.toast</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
  <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">50px</span><span class="p">;</span>
  <span class="nl">right</span><span class="p">:</span> <span class="m">80px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">black</span><span class="p">;</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="m">12px</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0.5rem</span> <span class="m">1rem</span><span class="p">;</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">5px</span> <span class="nb">solid</span> <span class="m">#029c91</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>We have changed the background color of the toast, added a border to it, added some border radius, and changed the colors of the icon and the text so that they are visible on the black background.</p> <p>This is how our toast should now look like -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1638691938348/ZVHA6pQDM.png" alt="image.png"/></p> <p>Let us also add a button that will trigger the animation, that is, show the toast -</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"toast"</span> <span class="na">id=</span><span class="s">"toast"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;svg</span>
    <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span>
    <span class="na">fill=</span><span class="s">"none"</span>
    <span class="na">class=</span><span class="s">"icon"</span>
    <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span>
    <span class="na">stroke=</span><span class="s">"currentColor"</span>
  <span class="nt">&gt;</span>
    <span class="nt">&lt;path</span>
      <span class="na">stroke-linecap=</span><span class="s">"round"</span>
      <span class="na">stroke-linejoin=</span><span class="s">"round"</span>
      <span class="na">stroke-width=</span><span class="s">"2"</span>
      <span class="na">d=</span><span class="s">"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"</span>
    <span class="nt">/&gt;</span>
  <span class="nt">&lt;/svg&gt;</span>
  <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"text"</span><span class="nt">&gt;</span>Some Information<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"show-toast"</span> <span class="na">class=</span><span class="s">"show-toast"</span><span class="nt">&gt;</span>Show Toast<span class="nt">&lt;/button&gt;</span>
</code></pre></div></div> <p>Let us also style this button as it looks quite ugly now</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.show-toast</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">black</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="m">8px</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">8px</span><span class="p">;</span>
  <span class="nl">cursor</span><span class="p">:</span> <span class="nb">pointer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Let us also disable any overflow -</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">html</span><span class="o">,</span>
<span class="nt">body</span> <span class="p">{</span>
  <span class="nl">overflow</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>This is how everything should look like now -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1638692227596/Bp9zQYJd3.png" alt="image.png"/></p> <h2 id="adding-animations">Adding animations</h2> <p>Now that we have the toast and a button to trigger the animations, it is time to add the animations.</p> <p>First of all, we are going to give the toast a starting point by putting it outside the view. So let us edit the CSS for the toast -</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.toast</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
  <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">50px</span><span class="p">;</span>
  <span class="nl">right</span><span class="p">:</span> <span class="m">-500px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">black</span><span class="p">;</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="m">12px</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0.5rem</span> <span class="m">1rem</span><span class="p">;</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">5px</span> <span class="nb">solid</span> <span class="m">#029c91</span><span class="p">;</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0%</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Now let us make a new class called <code class="language-plaintext highlighter-rouge">toast-active</code> that will get added to the toast whenever the button is clicked -</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.toast-active</span> <span class="p">{</span>
  <span class="nl">right</span><span class="p">:</span> <span class="m">80px</span><span class="p">;</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Notice that we are also changing the opacity during the transition. This just makes it look a little better.</p> <p>Now let us write some javascript to add this class to the toast whenever the button is clicked -</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">toast</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">toast</span><span class="dl">"</span><span class="p">);</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">show-toast</span><span class="dl">"</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">toast</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">toast-active</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>Here, whenever the button is clicked, the <code class="language-plaintext highlighter-rouge">toast-active</code> class is being added to the toast. Right now the animation is instant, which doesn‚Äôt look good. Let us add a transition -</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.toast</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
  <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">50px</span><span class="p">;</span>
  <span class="nl">right</span><span class="p">:</span> <span class="m">-500px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">black</span><span class="p">;</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="m">12px</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0.5rem</span> <span class="m">1rem</span><span class="p">;</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">5px</span> <span class="nb">solid</span> <span class="m">#029c91</span><span class="p">;</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0%</span><span class="p">;</span>
  <span class="nl">transition</span><span class="p">:</span> <span class="n">all</span> <span class="m">0.25s</span> <span class="n">ease-out</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Here the transition goes on for a quarter of a second and we have also eased it out so it isn‚Äôt harsh.</p> <h2 id="adding-a-close-button-to-the-toast">Adding a close button to the toast</h2> <p>We would like to give the user a close button that they can click to close the toast.</p> <p>First of all, we need to add a button the the toast in our markup -</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"toast"</span> <span class="na">id=</span><span class="s">"toast"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;svg</span>
    <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span>
    <span class="na">fill=</span><span class="s">"none"</span>
    <span class="na">class=</span><span class="s">"icon"</span>
    <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span>
    <span class="na">stroke=</span><span class="s">"currentColor"</span>
  <span class="nt">&gt;</span>
    <span class="nt">&lt;path</span>
      <span class="na">stroke-linecap=</span><span class="s">"round"</span>
      <span class="na">stroke-linejoin=</span><span class="s">"round"</span>
      <span class="na">stroke-width=</span><span class="s">"2"</span>
      <span class="na">d=</span><span class="s">"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"</span>
    <span class="nt">/&gt;</span>
  <span class="nt">&lt;/svg&gt;</span>
  <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"text"</span><span class="nt">&gt;</span>Some Information<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"close-button"</span> <span class="na">class=</span><span class="s">"close-button"</span><span class="nt">&gt;</span><span class="ni">&amp;#10005;</span><span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"show-toast"</span> <span class="na">class=</span><span class="s">"show-toast"</span><span class="nt">&gt;</span>Show Toast<span class="nt">&lt;/button&gt;</span>
</code></pre></div></div> <p>Let us also style it so that it is visible -</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.close-button</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">black</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
  <span class="nl">border</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">cursor</span><span class="p">:</span> <span class="nb">pointer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Now, when this button will be clicked, it will just do the reverse of what the show toast button did, that is, remove the <code class="language-plaintext highlighter-rouge">toast-active</code> class -</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">close-button</span><span class="dl">"</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">toast</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="dl">"</span><span class="s2">toast-active</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>Now, clicking the cross symbol (close button) in the toast should take it away from the screen with a transition.</p> <h2 id="conclusion">Conclusion</h2> <p>If everything has worked out well so far, give yourself a pat on the back because you have just built a toast with nothing but HTML, CSS, and JS!!!</p> <p>If you had any issues, feel free to comment down below or reach out to me via <a href="https://twitter.com/AnishDe12020">Twitter</a>.</p> <h2 id="links">Links</h2> <p><a href="https://codepen.io/anishde12020/pen/JjrYMrW">Codepen for this project</a></p> <p><a href="https://heroicons.com">HeroIcons</a></p> <p><a href="https://twitter.com/AnishDe12020">My Twitter</a></p>]]></content><author><name>anishde12020</name></author><category term="web"/><category term="web-development"/><category term="beginners"/><summary type="html"><![CDATA[A guide to making toast notifications for your webpage with HTML, CSS, and JavaScript.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1638697970037/zAYKG5UvP.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1638697970037/zAYKG5UvP.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Building a CRUD API with Node.js and MongoDB</title><link href="https://genicsblog.com/avneesh/building-a-crud-api-with-node-js-and-mongodb" rel="alternate" type="text/html" title="Building a CRUD API with Node.js and MongoDB"/><published>2022-01-07T00:00:00+00:00</published><updated>2022-01-07T00:00:00+00:00</updated><id>https://genicsblog.com/avneesh/building-a-crud-api-with-node-js-and-mongodb</id><content type="html" xml:base="https://genicsblog.com/avneesh/building-a-crud-api-with-node-js-and-mongodb"><![CDATA[<p>Howdy everyone, in this article we are going to build a CRUD (Create, Read, Update, Delete) API with <a href="https://nodejs.org/">Node.js</a> and <a href="https://www.mongodb.com/">MongoDB</a>. This API will be able to add, get, edit and delete todos!</p> <h2 id="setting-up-our-node-app">Setting up our node app</h2> <p>Create a new folder and give it a name-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>crud-API
</code></pre></div></div> <p>Navigate into the project-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>crud-API
</code></pre></div></div> <p>Initialize node-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm init <span class="nt">-y</span>
</code></pre></div></div> <p>Installing the packages needed-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npm <span class="nb">install </span>mongoose express dotenv cors
</code></pre></div></div> <p>Installing nodemon as dev dependency-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-D</span> nodemon
</code></pre></div></div> <h2 id="creating-our-server">Creating our server</h2> <p>Create a new file <code class="language-plaintext highlighter-rouge">index.js</code> and add the following-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="mi">8000</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`server up on port </span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>Open <code class="language-plaintext highlighter-rouge">package.json</code> and inside <code class="language-plaintext highlighter-rouge">scripts</code> block add this new script-</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"nodemon index.js"</span><span class="w">
</span></code></pre></div></div> <p>If you now run <code class="language-plaintext highlighter-rouge">npm run start</code> it will show <strong>server up on port 8000</strong> in the console</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641473134275/mzJa8km_l.png" alt="image.png"/></p> <h2 id="creating-the-router-and-routes">Creating the router and routes</h2> <p>Create a new file <code class="language-plaintext highlighter-rouge">router.js</code> and add the following-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">).</span><span class="nx">Router</span><span class="p">();</span>

<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">Let's build a CRUD API!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</code></pre></div></div> <p>This will create a new get create route on the home page. So let‚Äôs use the router in our app now. Go back to <code class="language-plaintext highlighter-rouge">index.js</code> and add a middleware like this-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">);</span>
</code></pre></div></div> <p>We also need to import router-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./router</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> <p>If you now go to <a href="http://localhost:8000/">http://localhost:8000/</a> we can see ‚ÄúLet‚Äôs build a CRUD API!‚Äù ü•≥</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641481274514/hRJsLjpPi.png" alt="image.png"/></p> <h2 id="setting-up-mongodb">Setting up MongoDB</h2> <p>Go to <a href="https://www.mongodb.com/">MongoDB</a> and sign up/login. After you sign in click on create a new project and give your project a name!</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641481563753/QrhtaOhMY.png" alt="image.png"/></p> <p>You can also add a member if you want but I am not going to do that right now.</p> <p>After the project has been created, click on <em>Build a database</em>. You will be able to see 3 plans to choose from. We are good to go with the free one for now. It will prompt you to select a location for your database, I would recommend you to go with the closes one :)</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641481727736/lNwDldKp-.png" alt="image.png"/></p> <p>Create a new user with a username and password, you are going to need this to connect MongoDB to your node.js app so don‚Äôt forget it so fast :P. Now, select database in the sidebar. It will probably show you that the cluster is being created so wait for some time.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641481882117/HGe6n3j1a.png" alt="image.png"/></p> <p>After the database is created click on <strong>Connect</strong>. You can allow access from everywhere for now.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641481984705/7NRmEugH-.png" alt="image.png"/></p> <p>Finally, click on choose a connection method then connect your application. Copy the URL that you get as we are going to need it now.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641482056780/HJxQtKqHQ.png" alt="image.png"/></p> <p>Let‚Äôs head back to our code now.</p> <h2 id="connecting-mongodb-to-nodejs">Connecting MongoDB to Node.js</h2> <p>Inside of our app create a new file <code class="language-plaintext highlighter-rouge">.env</code> and create a new variable <code class="language-plaintext highlighter-rouge">MONGODB_URL</code> like this-</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MONGODB_URL=mongodb+srv://avneesh0612:password&gt;@cluster0.wz3aq.mongodb.net/myFirstDatabase?retryWrites=true&amp;w=majority
</code></pre></div></div> <p>You need to replace the URL with the one you got from MongoDB and also change the password to your actual password.</p> <p>Go to <code class="language-plaintext highlighter-rouge">index.js</code> and add in the following for connecting our app to MongoDB-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">mongoose</span>
  <span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGODB_URL</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">useNewUrlParser</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">useUnifiedTopology</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Connected to MongoDB</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
  <span class="p">});</span>
</code></pre></div></div> <p>Import mongoose-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">mongoose</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> <p>You also need to restart the server as we have changed the env variables. So, cut the server and restart the dev server with <code class="language-plaintext highlighter-rouge">npm start</code></p> <p>This is going to give us an error as we haven‚Äôt configured our env variables yet, so you need to add just these two lines-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">dotenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">dotenv</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">();</span>
</code></pre></div></div> <p>It finally shows us that our app is connected to MongoDB!</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641482554808/XVseGRbMW.png" alt="image.png"/></p> <h2 id="creating-the-model-for-our-todo">Creating the Model for our Todo</h2> <p>We are going to create a new folder <code class="language-plaintext highlighter-rouge">Model</code> to keep things organized. So, create a new folder <code class="language-plaintext highlighter-rouge">Model</code> and a file <code class="language-plaintext highlighter-rouge">Todo.js</code> inside of it. Our model is going to have only 4 things- <code class="language-plaintext highlighter-rouge">title</code>, <code class="language-plaintext highlighter-rouge">description</code>, <code class="language-plaintext highlighter-rouge">completed</code>, and <code class="language-plaintext highlighter-rouge">createdAt</code>. So add the following in <code class="language-plaintext highlighter-rouge">Todo.js</code>-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">mongoose</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">TodoSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
  <span class="na">title</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">description</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">completed</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">Boolean</span><span class="p">,</span>
    <span class="na">default</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">createdAt</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">Date</span><span class="p">,</span>
    <span class="na">default</span><span class="p">:</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">});</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="dl">"</span><span class="s2">Todo</span><span class="dl">"</span><span class="p">,</span> <span class="nx">TodoSchema</span><span class="p">);</span>
</code></pre></div></div> <p>If you want to have more/less data then feel free to edit this.</p> <h2 id="creating-crud-functionality">Creating CRUD functionality</h2> <p>Create a new folder <code class="language-plaintext highlighter-rouge">controllers</code> and <code class="language-plaintext highlighter-rouge">Todo.js</code> inside of it. I am going to create a dummy function for now-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getTodos</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">I am the get todos route</span><span class="dl">"</span><span class="p">);</span>
<span class="p">};</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">getTodos</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div> <p>Now, go to <code class="language-plaintext highlighter-rouge">router.js</code> and create a new get route like this-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/todos</span><span class="dl">"</span><span class="p">,</span> <span class="nx">getTodos</span><span class="p">);</span>
</code></pre></div></div> <p>You also need to import <code class="language-plaintext highlighter-rouge">getTodos</code>-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">getTodos</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./controllers/Todo</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> <p>If you now go to <a href="http://localhost:8000/todos">http://localhost:8000/todos</a> then it will show you ‚ÄúI am the get todos route‚Äù</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641483166717/V3avffkKx.png" alt="image.png"/></p> <p>First, let‚Äôs build the create functionality then we will do the read functionality!</p> <h3 id="building-create-functionality">Building Create functionality</h3> <p>Create a new POST todos route in <code class="language-plaintext highlighter-rouge">router.js</code>-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/todos</span><span class="dl">"</span><span class="p">,</span> <span class="nx">createTodo</span><span class="p">);</span>
</code></pre></div></div> <p>Import <code class="language-plaintext highlighter-rouge">createTodo</code> from the controller-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">getTodos</span><span class="p">,</span> <span class="nx">createTodo</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./controllers/Todo</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> <p>Now create a new function in <code class="language-plaintext highlighter-rouge">controllers/Todo.js</code>-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">createTodo</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">todo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Todo</span><span class="p">({</span>
    <span class="na">title</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span>
    <span class="na">description</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">description</span><span class="p">,</span>
    <span class="na">completed</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">completed</span><span class="p">,</span>
  <span class="p">});</span>

  <span class="nx">todo</span><span class="p">.</span><span class="nx">save</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">todo</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">todo</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div> <p>This is going to take the <code class="language-plaintext highlighter-rouge">title</code>, <code class="language-plaintext highlighter-rouge">description</code>, and <code class="language-plaintext highlighter-rouge">completed</code> from the body and create a new Todo from the model that we created. Also, it will save it to to the database with the <code class="language-plaintext highlighter-rouge">.save</code> function. We also need to import <code class="language-plaintext highlighter-rouge">Todo</code> like this-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Todo</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../model/Todo</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> <p>We also need to export <code class="language-plaintext highlighter-rouge">createTodo</code>-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">getTodos</span><span class="p">,</span>
  <span class="nx">createTodo</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div> <p>I am going to use <a href="https://www.postman.com/">Postman</a> for testing the API. You can use any client :). So open postman and create a new post request to <a href="http://localhost:8000/todos">http://localhost:8000/todos</a> with this in the body-</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Title 1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Description 1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"completed"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641537330553/BScnjJoIT.png" alt="image.png"/></p> <p>Let‚Äôs hit send ü•Å, and we get an error.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641537369607/4CGUbdzCe.png" alt="image.png"/></p> <p>We get this error because we haven‚Äôt used some middleware. So inside of <code class="language-plaintext highlighter-rouge">index.js</code> just above <code class="language-plaintext highlighter-rouge">app.use(router)</code> and below <code class="language-plaintext highlighter-rouge">mongoose.connect()</code> add the following middlewares-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cors</span><span class="p">());</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="na">extended</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}));</span>
</code></pre></div></div> <p>We also need to import <code class="language-plaintext highlighter-rouge">cors</code>-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">cors</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">cors</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> <p>If we re-run the request on Postman, it works!</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641537549997/iTXN_7pGn.png" alt="image.png"/></p> <h3 id="building-read-functionality">Building Read functionality</h3> <p>We are going to need to change the <code class="language-plaintext highlighter-rouge">getTodos</code> function that we created. So, replace the function with this-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getTodos</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">Todo</span><span class="p">.</span><span class="nx">find</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">todos</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">todos</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div> <p>This is going to show all the todos in the collection of ‚ÄúTodos‚Äù, now if we make a <code class="language-plaintext highlighter-rouge">GET</code> request to <a href="http://localhost:8000/todos">http://localhost:8000/todos</a> then it will show us all the todos!</p> <p>Currently, we only have one todo.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641538593222/J52-Pqe-S.png" alt="image.png"/></p> <p>We can also test this by adding another todo and it will then show us both the todos.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641538653691/LMuxHDP8z.png" alt="image.png"/></p> <h3 id="edit-functionality">Edit functionality</h3> <p>Create a new <code class="language-plaintext highlighter-rouge">PUT</code> route in <code class="language-plaintext highlighter-rouge">router.js</code>-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">router</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="dl">"</span><span class="s2">/todos/:todoID</span><span class="dl">"</span><span class="p">,</span> <span class="nx">updateTodo</span><span class="p">);</span>
</code></pre></div></div> <p>Import it from <code class="language-plaintext highlighter-rouge">controllers/Todo.js</code>-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">getTodos</span><span class="p">,</span> <span class="nx">createTodo</span><span class="p">,</span> <span class="nx">updateTodo</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./controllers/Todo</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> <p>Inside <code class="language-plaintext highlighter-rouge">controllers/Todo.js</code> let‚Äôs build our <code class="language-plaintext highlighter-rouge">updateTodo</code> function-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">updateTodo</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">Todo</span><span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">(</span>
    <span class="p">{</span> <span class="na">_id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">todoID</span> <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">$set</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">title</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span>
        <span class="na">description</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">description</span><span class="p">,</span>
        <span class="na">completed</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">completed</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span> <span class="na">new</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
    <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">Todo</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">Todo</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div> <p>This will take a new <code class="language-plaintext highlighter-rouge">title</code>, <code class="language-plaintext highlighter-rouge">description</code>, and <code class="language-plaintext highlighter-rouge">completed</code> field from the request body and update it according to the id in the URL. So, in postman create a new PUT request to <a href="http://localhost:8000/todos/todo_id">http://localhost:8000/todos/todo_id</a>. You also need to provide data in the body-</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Title 3"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Description 3"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"completed"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>It works! üéâ</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641539951484/KDMf5aZSv.png" alt="image.png"/></p> <p>If you make a new GET request, you will see the updated todos.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641540003110/QPfvHNrPF.png" alt="image.png"/></p> <h3 id="delete-functionality">Delete functionality</h3> <p>Create another route in <code class="language-plaintext highlighter-rouge">router.js</code>-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">router</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="dl">"</span><span class="s2">/todos/:todoID</span><span class="dl">"</span><span class="p">,</span> <span class="nx">deleteTodo</span><span class="p">);</span>
</code></pre></div></div> <p>You also need to import as always-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span>
  <span class="nx">getTodos</span><span class="p">,</span>
  <span class="nx">createTodo</span><span class="p">,</span>
  <span class="nx">updateTodo</span><span class="p">,</span>
  <span class="nx">deleteTodo</span><span class="p">,</span>
<span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./controllers/Todo</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> <p>Finally, create a new function in <code class="language-plaintext highlighter-rouge">Todo.js</code>-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">deleteTodo</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">Todo</span><span class="p">.</span><span class="nx">deleteOne</span><span class="p">({</span> <span class="na">_id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">todoID</span> <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Todo Deleted</span><span class="dl">"</span> <span class="p">}))</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
<span class="p">};</span>
</code></pre></div></div> <p>This will take the <code class="language-plaintext highlighter-rouge">todoID</code> from the URL and delete it. Export the function-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">getTodos</span><span class="p">,</span>
  <span class="nx">createTodo</span><span class="p">,</span>
  <span class="nx">updateTodo</span><span class="p">,</span>
  <span class="nx">deleteTodo</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div> <p>Let‚Äôs put it to the test now. It works now!</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641540501970/J51YyZxZ2l.png" alt="image.png"/></p> <p>We now have a fully working CRUD API! Let‚Äôs deploy it to Heroku.</p> <h2 id="deploying-to-heroku">Deploying to Heroku</h2> <h3 id="creating-a-github-repo">Creating a GitHub repo</h3> <p>Initialize git-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div></div> <p>Create a new file <code class="language-plaintext highlighter-rouge">.gitignore</code> and add the node modules in it-</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/node_modules
</code></pre></div></div> <p>Commit the code-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>

git commit <span class="nt">-m</span> <span class="s2">"your commit message"</span>
</code></pre></div></div> <p>Go to GitHub and create a <a href="https://github.com/new">New Repo</a>. You can give it any name you like!</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641540984748/ODEVW_8Oh.png" alt="image.png"/></p> <p>Copy the commands in ‚Äúpush an existing repository from the command line‚Äù and paste it into your terminal.</p> <p>If you now refresh the page, you will be able to see your code!</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641541147661/83n1nZ7ZS.png" alt="image.png"/></p> <p>Now, go to <a href="https://heroku.com/">heroku</a>, sign in/sign up. Then, create a new app</p> <p>Give your app a name and hit ‚ÄúCreate app‚Äù</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641541408361/svlAnPnpX.png" alt="image.png"/></p> <p>Connect GitHub and select your repository.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641541552495/D52ZnJBfg.png" alt="image.png"/></p> <p>You can enable automatic deploys and also click on deploy branch.</p> <p>We also need to add the env variables, so go to the settings tab, scroll down to Config Vars and paste in the variable.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1641541717089/Ffo01DZdp.png" alt="image.png"/></p> <p>You are going to see an error in your app, so head back to the code! Inside <code class="language-plaintext highlighter-rouge">package.json</code> change the start script to-</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node index.js
</code></pre></div></div> <p>The script should look like this-</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node index.js"</span><span class="w">
</span></code></pre></div></div> <p>We also need to change the port, so inside <code class="language-plaintext highlighter-rouge">index.js</code> change port to this-</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>
</code></pre></div></div> <p>Now, you can push the code again!</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>

git commit <span class="nt">-m</span> <span class="s2">"fix: deploy errors"</span>

git push
</code></pre></div></div> <p>If you enabled automatic deploys then it will deploy automatically, else manually deploy the branch. Now our API successfully works!</p> <p><a href="https://crud-api-demo.herokuapp.com/">Here is the API</a> if you want to try it out.</p> <h2 id="conclusion">Conclusion</h2> <p>Hope you were able to build an amazing CRUD API for your next project. Feel free to drop your questions below üòâ. See ya in the next one ‚úåÔ∏è</p> <h3 id="useful-links">Useful links</h3> <p><a href="https://github.com/avneesh0612/crud-api">GitHub repo</a></p> <p><a href="https://crud-api-demo.herokuapp.com/todos">API we built</a></p> <p><a href="https://links.avneesh.tech/">Connect with me</a></p>]]></content><author><name>avneesh</name></author><category term="backend"/><category term="node-js"/><category term="mongodb"/><category term="api"/><summary type="html"><![CDATA[The ultimate guide to building a CRUD API with Node.js and MongoDB from scratch.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/76690419/148522889-a8618d72-4e52-4a78-b452-7690e9135709.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/76690419/148522889-a8618d72-4e52-4a78-b452-7690e9135709.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry></feed>