<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://genicsblog.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://genicsblog.com/" rel="alternate" type="text/html"/><updated>2022-01-04T05:55:13+00:00</updated><id>https://genicsblog.com/feed.xml</id><title type="html">Genics Blog</title><subtitle>An open source developer publication aimed at sharing well explained tutorials on various topics for the developer community</subtitle><entry><title type="html">How to Add Swipe Animations to a CardView in an Android App</title><link href="https://genicsblog.com/swipe-animation-on-a-cardview-android" rel="alternate" type="text/html" title="How to Add Swipe Animations to a CardView in an Android App"/><published>2021-11-15T00:00:00+00:00</published><updated>2021-11-15T00:00:00+00:00</updated><id>https://genicsblog.com/swipe-animation-on-a-cardview-android</id><content type="html" xml:base="https://genicsblog.com/swipe-animation-on-a-cardview-android"><![CDATA[<p>If you’re building an Android app, you should consider adding animations. They can improve your app’s user experience and increase retention.</p> <p>These days, if you see an app that has no animation, it can feel odd and out-dated. And since interactive experiences are kind of the new norm, you’ll want to figure out ways to set your app apart.</p> <h2 id="what-well-build-here">What We’ll Build Here</h2> <p>Now, it might seem difficult to make your app stand out if you just have something basic like a quote sharing app (which is what we are going to work on here). It can be hard to hook the user and keep them interested.</p> <p>Of course, you could just add two simple buttons to load the next/previous quote and call it a day. But that’s pretty basic and any app could do that! Even if you’re just building a simple side-project, there’s no trade-off for good UX :)</p> <p>So what we’ll do in this tutorial is drop the buttons, and instead have logic where a user can swipe the card to the left. When they’ve swiped far enough, the app will load a new card with a new quote.</p> <p>By the end of this post, you will learn how to make a really smooth animated card which a user can swipe that can perform whatever action you choose. Here’s a demo of how it works:</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1636995092206/__FOPUD4R.gif" alt="iHxFjvI4x.gif"/></p> <p>Amazing, right? Let’s get into it!</p> <h2 id="prerequisites">Prerequisites</h2> <p>For this tutorial, we will use Kotlin as the programming language for our app – but you can easily translate the code to Java and it would work the same.</p> <p>For reference, this is the quote card that we wish to enable the swipe feature on.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1636995144169/sl0mqK8IG.png" alt="9CVHyoJfV.png"/></p> <p>It is an androidX <code class="language-plaintext highlighter-rouge">CardView</code> with a bunch of <code class="language-plaintext highlighter-rouge">TextView</code>s and an <code class="language-plaintext highlighter-rouge">ImageView</code>. There’s also a <code class="language-plaintext highlighter-rouge">ProgressBar</code> that gets shown while loading a new quote.</p> <p>We won’t be making the XML code for the user interface. You can get the layout I used here from the GitHub repository, or build your own.</p> <p><a href="https://github.com/gouravkhunger/QuotesApp" rel="dofollow">Here’s the complete code</a> for our Quotes app, if you wish to check it out. It uses the MVVM design pattern, but this article doesn’t rely on what pattern you use for the business logic of your app, as we’ll just be working on the UI part.</p> <p>Now, we’re ready to make that awesome swipe interface!</p> <h2 id="how-to-handle-swipes-in-our-app">How to Handle Swipes in Our App</h2> <p>To handle swipes, we first need to set a touch listener on the card. Each time an action is performed on the card, the touch listener is called. Within the listener, we will add the logic to do the math and perform the animations.</p> <p>Here is the blueprint of the touch listener we will be using:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">quoteCard</span><span class="p">.</span><span class="nf">setOnTouchListener</span><span class="p">(</span>
    <span class="nc">View</span><span class="p">.</span><span class="nc">OnTouchListener</span> <span class="p">{</span> <span class="n">view</span><span class="p">,</span> <span class="n">event</span> <span class="p">-&gt;</span>
        <span class="k">when</span> <span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
            <span class="nc">MotionEvent</span><span class="p">.</span><span class="nc">ACTION_MOVE</span> <span class="p">-&gt;</span> <span class="p">{</span>
            	<span class="c1">// TODO: Handle ACTION_MOVE</span>
            <span class="p">}</span>
            <span class="nc">MotionEvent</span><span class="p">.</span><span class="nc">ACTION_UP</span> <span class="p">-&gt;</span> <span class="p">{</span>
            	<span class="c1">// TODO: Handle ACTION_UP</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">// required to by-pass lint warning</span>
        <span class="n">view</span><span class="p">.</span><span class="nf">performClick</span><span class="p">()</span>
        <span class="k">return</span><span class="nd">@OnTouchListener</span> <span class="k">true</span>
    <span class="p">}</span>
<span class="p">)</span>
</code></pre></div></div> <p>Here, we are specifically listening for 2 actions on the card – the <code class="language-plaintext highlighter-rouge">ACTION_MOVE</code> and the <code class="language-plaintext highlighter-rouge">ACTION_UP</code>.</p> <ul> <li>The <code class="language-plaintext highlighter-rouge">ACTION_MOVE</code> event is called when a user starts swiping the card, that is, moving it.</li> <li>The <code class="language-plaintext highlighter-rouge">ACTION_UP</code> is called when a user lifts their finger from the card, basically, when they release it.</li> </ul> <p>There are many other action events that we can override, such as <code class="language-plaintext highlighter-rouge">ACTION_DOWN</code> that’s called when a person gets hold of the view, but we don’t need them for this feature.</p> <p>The basic setup for the card is done, so let’s figure out the swiping logic.</p> <h2 id="the-math-behind-the-swipe-action">The math behind the swipe action</h2> <p>First, let’s re-think what we want to achieve. Implementing functionality is easier when you know exactly what you wish to have. Your code will also make more sense when your requirements are clear.</p> <p>Here, we have a quote card. We want users to be able to swipe it only to the left, and if the minimum threshold to load a new quote is reached, it should move back to its original position and load a new quote.</p> <p>Now, to achieve this, let’s think of it in terms of the card. Let’s define the mean position as the center of the card.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1636995345595/1Y88cyjU7.png" alt="dEnpWr7e4.png"/></p> <p>We want the card to swipe if and only if the user swipes it to the left of the mean position.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1636995363765/mQspVxd8R.gif" alt="7epeWn53S.gif"/></p> <p>So how can we make this happen?</p> <p>You guessed it – we will calculate the mean position and on the <code class="language-plaintext highlighter-rouge">ACTION_MOVE</code> event, we will check if the user swiped to the left and move the card accordingly.</p> <h2 id="how-to-implement-the-swipe-logic">How to implement the swipe logic</h2> <p>To implement the logic, we first need to have the starting position of the card, which is fairly easy to calculate. We will just make sure that it is calculated with respect to the full-screen width, not just the card’s width.</p> <p>Place these lines of code before the <code class="language-plaintext highlighter-rouge">when(event.action)</code> statement:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">quoteCard</span><span class="p">.</span><span class="nf">setOnTouchListener</span><span class="p">(</span>
    <span class="nc">View</span><span class="p">.</span><span class="nc">OnTouchListener</span> <span class="p">{</span> <span class="n">view</span><span class="p">,</span> <span class="n">event</span> <span class="p">-&gt;</span>
    
        <span class="c1">// variables to store current configuration of quote card.</span>
        <span class="kd">val</span> <span class="py">displayMetrics</span> <span class="p">=</span> <span class="n">resources</span><span class="p">.</span><span class="n">displayMetrics</span>
        <span class="kd">val</span> <span class="py">cardWidth</span> <span class="p">=</span> <span class="n">quoteCard</span><span class="p">.</span><span class="n">width</span>
        <span class="kd">val</span> <span class="py">cardStart</span> <span class="p">=</span> <span class="p">(</span><span class="n">displayMetrics</span><span class="p">.</span><span class="n">widthPixels</span><span class="p">.</span><span class="nf">toFloat</span><span class="p">()</span> <span class="p">/</span> <span class="mi">2</span><span class="p">)</span> <span class="p">-</span> <span class="p">(</span><span class="n">cardWidth</span> <span class="p">/</span> <span class="mi">2</span><span class="p">)</span>

        <span class="k">when</span> <span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
        	<span class="o">..</span><span class="p">.</span>
        <span class="p">}</span>
        <span class="o">..</span><span class="p">.</span>
    <span class="p">}</span>
<span class="p">)</span>
</code></pre></div></div> <p>First we get the <code class="language-plaintext highlighter-rouge">displayMetrics</code> from <code class="language-plaintext highlighter-rouge">resources</code>, which will give us the width of the screen using <code class="language-plaintext highlighter-rouge">displayMetrics.widthPixels.toFloat()</code>.</p> <p>Then we get the <code class="language-plaintext highlighter-rouge">cardWidth</code> using the <code class="language-plaintext highlighter-rouge">width</code> property of the <code class="language-plaintext highlighter-rouge">quoteCard</code>.</p> <p>Finally, we calculate the starting position of the card using the formula <code class="language-plaintext highlighter-rouge">(width of screen/2) - (cardWidth/2)</code>. Essentially, this gives us the x-coordinate of this position of the card:</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1636995431988/CH21jNCaQ.gif" alt="NiH3lsseM.gif"/></p> <p>Now, let’s implement the code for the <code class="language-plaintext highlighter-rouge">ACTION_MOVE</code> event.</p> <h2 id="how-to-handle-the-action_move-event">How to handle the <code class="language-plaintext highlighter-rouge">ACTION_MOVE</code> event</h2> <p>Inside the <code class="language-plaintext highlighter-rouge">ACTION_MOVE</code> block, we first initialise the <code class="language-plaintext highlighter-rouge">newX</code> variable that holds the new x-coordinate that the card has been swiped to.</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">newX</span> <span class="p">=</span> <span class="n">event</span><span class="p">.</span><span class="n">rawX</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">event.rawX</code> gives us the absolute value of the new coordinate with respect to the screen width.</p> <p><code class="language-plaintext highlighter-rouge">newX</code> will contain the x-coordinate where the user’s finger is, at any given moment. The value <code class="language-plaintext highlighter-rouge">0.0</code> for <code class="language-plaintext highlighter-rouge">newX</code> means that the user swiped to the left-most part of the screen. And for my emulator, <code class="language-plaintext highlighter-rouge">1080.0</code> represents the right-most edge of the screen.</p> <p>Since, we want the card to swipe only if <code class="language-plaintext highlighter-rouge">newX</code> is less than the mean position of the card, we will place an if-condition here to verify that this is the case.</p> <p>Think of this with simple values. Let’s suppose that the mean position of the card is at x-coordinate <code class="language-plaintext highlighter-rouge">540.0</code> (small x-coordinate) and the user swipes to <code class="language-plaintext highlighter-rouge">710.0</code> (bigger x-coordinate). But we don’t want them to be able to swipe to the right. And if the user swipes to <code class="language-plaintext highlighter-rouge">320.0</code> (smaller x-coordinate), then we need to carry out the swipe and move the card to the new position.</p> <p>Here’s the code to implement the above logic:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">newX</span> <span class="p">-</span> <span class="n">cardWidth</span> <span class="p">&lt;</span> <span class="n">cardStart</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// or newX &lt; cardStart + cardWidth</span>
    <span class="n">quoteCard</span><span class="p">.</span><span class="nf">animate</span><span class="p">().</span><span class="nf">x</span><span class="p">(</span>
        <span class="nf">min</span><span class="p">(</span><span class="n">cardStart</span><span class="p">,</span> <span class="n">newX</span> <span class="p">-</span> <span class="p">(</span><span class="n">cardWidth</span> <span class="p">/</span> <span class="mi">2</span><span class="p">))</span>
    <span class="p">)</span>
    <span class="p">.</span><span class="nf">setDuration</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">start</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div> <p>We subtract <code class="language-plaintext highlighter-rouge">cardWidth</code> from <code class="language-plaintext highlighter-rouge">newX</code> because <code class="language-plaintext highlighter-rouge">newX</code> is an absolute value which is not relative to the card. It has a higher value because <code class="language-plaintext highlighter-rouge">cardStart</code> is towards the start of the screen, and <code class="language-plaintext highlighter-rouge">newX</code> is initially somewhere in the middle (a user would generally swipe from the middle).</p> <p>We want to compare the value of shift in the x-coordinate and median to the value of <code class="language-plaintext highlighter-rouge">cardStart</code>, not the value of <code class="language-plaintext highlighter-rouge">newX</code>, so we take this into account by subtracting <code class="language-plaintext highlighter-rouge">cardWidth</code>.</p> <p>Then, we carry out the animation using <code class="language-plaintext highlighter-rouge">quoteCard.animate()</code> and we change its x coordinate using the <code class="language-plaintext highlighter-rouge">x()</code> function.</p> <p>Now, why do we do <code class="language-plaintext highlighter-rouge">min(cardStart, newX - (cardWidth/2))</code>?</p> <p>This is very interesting and intuitive to understand. From the beginning, we are emphasizing that the card should move only to the left and not to the right.</p> <p><code class="language-plaintext highlighter-rouge">newX - (cardWidth/2))</code> is nothing but the swiped distance towards the left (so subtraction is involved – for the right side, it should be added).</p> <p>The <code class="language-plaintext highlighter-rouge">min()</code> function here returns the minimum of the two values provided. If the swiped distance is less than the <code class="language-plaintext highlighter-rouge">cardStart</code>, it is returned, otherwise <code class="language-plaintext highlighter-rouge">cardStart</code> is used. This is the condition we want to meet and <code class="language-plaintext highlighter-rouge">min()</code> makes it really easy to handle.</p> <p><code class="language-plaintext highlighter-rouge">setDuration(0)</code> ensures that the animation is carried instantaneously (which keeps swiping from feeling laggy). <code class="language-plaintext highlighter-rouge">start()</code> actually starts the animation with the given properties.</p> <p>This animation will clear any doubt your have on how this works:</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1636995634763/Sk_XJiR5M.gif" alt="other.gif"/></p> <p>(I don’t have expertise on making animations, this was the best I could come up with.)</p> <p>Here is the final code for the <code class="language-plaintext highlighter-rouge">ACTION_MOVE</code> event:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">MotionEvent</span><span class="p">.</span><span class="nc">ACTION_MOVE</span> <span class="p">-&gt;</span> <span class="p">{</span>
    <span class="c1">// get the new coordinate of the event on X-axis</span>
    <span class="kd">val</span> <span class="py">newX</span> <span class="p">=</span> <span class="n">event</span><span class="p">.</span><span class="n">rawX</span>

    <span class="c1">// carry out swipe only if newX - cardWidth &lt; cardStart, that is</span>
    <span class="c1">// the card is swiped to the left side, not to the right</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">newX</span> <span class="p">-</span> <span class="n">cardWidth</span> <span class="p">&lt;</span> <span class="n">cardStart</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">quoteCard</span><span class="p">.</span><span class="nf">animate</span><span class="p">()</span>
            <span class="p">.</span><span class="nf">x</span><span class="p">(</span>
                <span class="nf">min</span><span class="p">(</span><span class="n">cardStart</span><span class="p">,</span> <span class="n">newX</span> <span class="p">-</span> <span class="p">(</span><span class="n">cardWidth</span> <span class="p">/</span> <span class="mi">2</span><span class="p">))</span>
            <span class="p">)</span>
        <span class="p">.</span><span class="nf">setDuration</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">start</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>You can also include a <code class="language-plaintext highlighter-rouge">TextView</code> to the UI that reflects when the user should release the card. Place this code inside the above <code class="language-plaintext highlighter-rouge">if</code> statement too:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">quoteCard</span><span class="p">.</span><span class="n">x</span> <span class="p">&lt;</span> <span class="nc">MIN_SWIPE_DISTANCE</span><span class="p">)</span> <span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="nf">getString</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">releaseCard</span><span class="p">)</span>
<span class="k">else</span> <span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="nf">getString</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">infoText</span><span class="p">)</span>
</code></pre></div></div> <p>where <code class="language-plaintext highlighter-rouge">MIN_SWIPE_DISTANCE</code> is <code class="language-plaintext highlighter-rouge">-250</code>:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// -250 produces best result, feel free to change to your liking</span>
<span class="k">const</span> <span class="kd">val</span> <span class="py">MIN_SWIPE_DISTANCE</span> <span class="p">=</span> <span class="p">-</span><span class="mi">250</span> <span class="c1">// User should move alteast -250 from mean position to load new quote</span>
</code></pre></div></div> <p>Now, the <code class="language-plaintext highlighter-rouge">ACTION_MOVE</code> event is handled properly. Let’s write the code to handle the <code class="language-plaintext highlighter-rouge">ACTION_UP</code> event, that is, when the card is released.</p> <h2 id="how-to-handle-the-action_up-event">How to handle the <code class="language-plaintext highlighter-rouge">ACTION_UP</code> event</h2> <p>For the <code class="language-plaintext highlighter-rouge">ACTION_UP</code> event, we want the card to come back to its original position, wait for about <code class="language-plaintext highlighter-rouge">100</code> milliseconds, then load a new quote.</p> <p>The logic to animate the card is similar, but this time we will make its animation duration about <code class="language-plaintext highlighter-rouge">150</code> millisecond to make it look smooth.</p> <p>First, create a variable <code class="language-plaintext highlighter-rouge">currentX</code> that holds the current value of the x coordinate of the quote card. We’ll use this variable later.</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">currentX</span> <span class="p">=</span> <span class="n">quoteCard</span><span class="p">.</span><span class="n">x</span>
</code></pre></div></div> <p>Then, start the animation on the card. Pass the <code class="language-plaintext highlighter-rouge">cardStart</code> variable to the <code class="language-plaintext highlighter-rouge">x()</code> function to make it return to its original position and set the duration to <code class="language-plaintext highlighter-rouge">150</code>.</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">quoteCard</span><span class="p">.</span><span class="nf">animate</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">x</span><span class="p">(</span><span class="n">cardStart</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">setDuration</span><span class="p">(</span><span class="mi">150</span><span class="p">)</span>
<span class="c1">// continued below</span>
</code></pre></div></div> <p>This time, we set a listener on the animation. A listener is something that keeps an eye on the animation. By using it, we can perform actions on various animation events such as start, end, resume, and more.</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// continuation</span>
<span class="p">.</span><span class="nf">setListener</span><span class="p">(</span>
    <span class="kd">object</span> <span class="err">: </span><span class="nc">AnimatorListenerAdapter</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">override</span> <span class="k">fun</span> <span class="nf">onAnimationEnd</span><span class="p">(</span><span class="n">animation</span><span class="p">:</span> <span class="nc">Animator</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">viewLifecycleOwner</span><span class="p">.</span><span class="n">lifecycleScope</span><span class="p">.</span><span class="nf">launch</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="nc">Default</span><span class="p">)</span> <span class="p">{</span>
                <span class="nf">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
                <span class="c1">// check if the swipe distance was more than</span>
                <span class="c1">// minimum swipe required to load a new quote</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">currentX</span> <span class="p">&lt;</span> <span class="nc">MIN_SWIPE_DISTANCE</span><span class="p">)</span> <span class="p">{</span>
                    <span class="c1">// Add logic to load a new quote if swiped adequately</span>
                    <span class="n">viewModel</span><span class="p">.</span><span class="nf">getRandomQuote</span><span class="p">()</span>
                    <span class="n">currentX</span> <span class="p">=</span> <span class="mf">0f</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">)</span>
<span class="p">.</span><span class="nf">start</span><span class="p">()</span>
</code></pre></div></div> <p>We set a listener to look for the ending of the animation by overriding the <code class="language-plaintext highlighter-rouge">onAnimationEnd()</code> function.</p> <p>As soon as the animation ends, we launch a coroutine (similar to Threads in Java but much more efficient) with a delay of <code class="language-plaintext highlighter-rouge">100</code> milliseconds. It then checks if the user had swiped further than the <code class="language-plaintext highlighter-rouge">MIN_SWIPE_DISTANCE</code> needed to load a new quote. The variable <code class="language-plaintext highlighter-rouge">currentX</code> is used for the comparison here.</p> <p>If the user actually swipes passing the minimum distance, the coroutine is delayed for <code class="language-plaintext highlighter-rouge">100</code> milliseconds. Then the view model loads a new random quote from the API, also resetting the <code class="language-plaintext highlighter-rouge">currentX</code> variable to <code class="language-plaintext highlighter-rouge">0f</code>.</p> <p>The final code for the <code class="language-plaintext highlighter-rouge">ACTION_UP</code> event looks like this:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">MotionEvent</span><span class="p">.</span><span class="nc">ACTION_UP</span> <span class="p">-&gt;</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="py">currentX</span> <span class="p">=</span> <span class="n">quoteCard</span><span class="p">.</span><span class="n">x</span>
    <span class="n">quoteCard</span><span class="p">.</span><span class="nf">animate</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">x</span><span class="p">(</span><span class="n">cardStart</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">setDuration</span><span class="p">(</span><span class="mi">150</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">setListener</span><span class="p">(</span><span class="kd">object</span> <span class="err">: </span><span class="nc">AnimatorListenerAdapter</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">override</span> <span class="k">fun</span> <span class="nf">onAnimationEnd</span><span class="p">(</span><span class="n">animation</span><span class="p">:</span> <span class="nc">Animator</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">viewLifecycleOwner</span><span class="p">.</span><span class="n">lifecycleScope</span><span class="p">.</span><span class="nf">launch</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="nc">Default</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nf">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
                    <span class="c1">// check if the swipe distance was more than</span>
                    <span class="c1">// minimum swipe required to load a new quote</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">currentX</span> <span class="p">&lt;</span> <span class="nc">MIN_SWIPE_DISTANCE</span><span class="p">)</span> <span class="p">{</span>
                    	<span class="c1">// Add logic to load a new quote if swiped adequately</span>
                        <span class="n">viewModel</span><span class="p">.</span><span class="nf">getRandomQuote</span><span class="p">()</span>
                        <span class="n">currentX</span> <span class="p">=</span> <span class="mf">0f</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="nf">start</span><span class="p">()</span>
    <span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="nf">getString</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">infoText</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="final-code">Final Code</h2> <p>This is the final code for the complete <code class="language-plaintext highlighter-rouge">onTouchListener()</code>:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">quoteCard</span><span class="p">.</span><span class="nf">setOnTouchListener</span><span class="p">(</span>
    <span class="nc">View</span><span class="p">.</span><span class="nc">OnTouchListener</span> <span class="p">{</span> <span class="n">v</span><span class="p">,</span> <span class="n">event</span> <span class="p">-&gt;</span>

        <span class="c1">// variables to store current configuration of quote card.</span>
        <span class="kd">val</span> <span class="py">displayMetrics</span> <span class="p">=</span> <span class="n">resources</span><span class="p">.</span><span class="n">displayMetrics</span>
        <span class="kd">val</span> <span class="py">cardWidth</span> <span class="p">=</span> <span class="n">quoteCard</span><span class="p">.</span><span class="n">width</span>
        <span class="kd">val</span> <span class="py">cardStart</span> <span class="p">=</span> <span class="p">(</span><span class="n">displayMetrics</span><span class="p">.</span><span class="n">widthPixels</span><span class="p">.</span><span class="nf">toFloat</span><span class="p">()</span> <span class="p">/</span> <span class="mi">2</span><span class="p">)</span> <span class="p">-</span> <span class="p">(</span><span class="n">cardWidth</span> <span class="p">/</span> <span class="mi">2</span><span class="p">)</span>

        <span class="k">when</span> <span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
            <span class="nc">MotionEvent</span><span class="p">.</span><span class="nc">ACTION_UP</span> <span class="p">-&gt;</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="py">currentX</span> <span class="p">=</span> <span class="n">quoteCard</span><span class="p">.</span><span class="n">x</span>
                <span class="n">quoteCard</span><span class="p">.</span><span class="nf">animate</span><span class="p">()</span>
                    <span class="p">.</span><span class="nf">x</span><span class="p">(</span><span class="n">cardStart</span><span class="p">)</span>
                    <span class="p">.</span><span class="nf">setDuration</span><span class="p">(</span><span class="mi">150</span><span class="p">)</span>
                    <span class="p">.</span><span class="nf">setListener</span><span class="p">(</span>
                        <span class="kd">object</span> <span class="err">: </span><span class="nc">AnimatorListenerAdapter</span><span class="p">()</span> <span class="p">{</span>
                            <span class="k">override</span> <span class="k">fun</span> <span class="nf">onAnimationEnd</span><span class="p">(</span><span class="n">animation</span><span class="p">:</span> <span class="nc">Animator</span><span class="p">)</span> <span class="p">{</span>
                                <span class="n">viewLifecycleOwner</span><span class="p">.</span><span class="n">lifecycleScope</span><span class="p">.</span><span class="nf">launch</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="nc">Default</span><span class="p">)</span> <span class="p">{</span>
                                    <span class="nf">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>

                                    <span class="c1">// check if the swipe distance was more than</span>
                                    <span class="c1">// minimum swipe required to load a new quote</span>
                                    <span class="k">if</span> <span class="p">(</span><span class="n">currentX</span> <span class="p">&lt;</span> <span class="nc">MIN_SWIPE_DISTANCE</span><span class="p">)</span> <span class="p">{</span>
                                        <span class="c1">// Add logic to load a new quote if swiped adequately</span>
                                        <span class="n">viewModel</span><span class="p">.</span><span class="nf">getRandomQuote</span><span class="p">()</span>
                                        <span class="n">currentX</span> <span class="p">=</span> <span class="mf">0f</span>
                                    <span class="p">}</span>
                                <span class="p">}</span>
                            <span class="p">}</span>
                        <span class="p">}</span>
                    <span class="p">)</span>
                    <span class="p">.</span><span class="nf">start</span><span class="p">()</span>
                <span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="nf">getString</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">infoText</span><span class="p">)</span>
            <span class="p">}</span>
            <span class="nc">MotionEvent</span><span class="p">.</span><span class="nc">ACTION_MOVE</span> <span class="p">-&gt;</span> <span class="p">{</span>
                <span class="c1">// get the new co-ordinate of X-axis</span>
                <span class="kd">val</span> <span class="py">newX</span> <span class="p">=</span> <span class="n">event</span><span class="p">.</span><span class="n">rawX</span>

                <span class="c1">// carry out swipe only if newX &lt; cardStart, that is,</span>
                <span class="c1">// the card is swiped to the left side, not to the right</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">newX</span> <span class="p">-</span> <span class="n">cardWidth</span> <span class="p">&lt;</span> <span class="n">cardStart</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">quoteCard</span><span class="p">.</span><span class="nf">animate</span><span class="p">()</span>
                        <span class="p">.</span><span class="nf">x</span><span class="p">(</span>
                            <span class="nf">min</span><span class="p">(</span><span class="n">cardStart</span><span class="p">,</span> <span class="n">newX</span> <span class="p">-</span> <span class="p">(</span><span class="n">cardWidth</span> <span class="p">/</span> <span class="mi">2</span><span class="p">))</span>
                        <span class="p">)</span>
                        <span class="p">.</span><span class="nf">setDuration</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
                        <span class="p">.</span><span class="nf">start</span><span class="p">()</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">quoteCard</span><span class="p">.</span><span class="n">x</span> <span class="p">&lt;</span> <span class="nc">MIN_SWIPE_DISTANCE</span><span class="p">)</span> 
                        <span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="nf">getString</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">releaseCard</span><span class="p">)</span>
                    <span class="k">else</span> <span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="nf">getString</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">infoText</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">// required to by-pass lint warning</span>
        <span class="n">v</span><span class="p">.</span><span class="nf">performClick</span><span class="p">()</span>
        <span class="k">return</span><span class="nd">@OnTouchListener</span> <span class="k">true</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Congrats! In this tutorial, we’ve implemented animation that lets a user swipe a card containing a quote to get a new quote.</p> <p>Don’t forget to download the app and test it out yourself. Stars and contributions on the <a href="https://github.com/gouravkhunger/QuotesApp" rel="dofollow">GitHub repository</a> are welcomed!</p> <h2 id="conclusion">Conclusion</h2> <p>Now you have learned how to animate a card and handle animation listeners on it. This helps create better UX that makes your app stand out.</p> <p>Using the knowledge you gained in this post, you can now create most of the following animations for views in Android:</p> <h4 id="programmatically-create-sliding-animations-for-android-views">Programmatically create sliding animations for Android views.</h4> <p>Just as we did in this tutorial.</p> <h4 id="left-to-right-animation">Left to right animation</h4> <p>This is fairly simple, just turn the subtraction in the variables to addition and <code class="language-plaintext highlighter-rouge">&lt;</code> signs in the <code class="language-plaintext highlighter-rouge">if</code> statements to <code class="language-plaintext highlighter-rouge">&gt;</code> signs. With these few tweaks here and there, the right to left animations in card view can be turned into left to right ones!</p> <h4 id="you-can-also-show-and-hide-views-using-animations">You can also show and hide views using animations.</h4> <p>For this, you have to keep track of the start position and end position then animate them with <code class="language-plaintext highlighter-rouge">alpha()</code> from <code class="language-plaintext highlighter-rouge">0</code> to <code class="language-plaintext highlighter-rouge">1</code>. For an example, you can refer to my library <a href="https://github.com/gouravkhunger/AccoLib" rel="dofollow">Accolib</a> to create animated FAQ accordions.</p> <h4 id="basic-animated-layout-changes-can-be-achieved-with-view-animations">Basic animated layout changes can be achieved with view animations.</h4> <p>Thanks a lot for reading so far, I hope this post added some value. Subscribe to my newsletter(at the top of the article) to stay updated with latest Android content!</p> <p><a href="/contributor/gouravkhunger">Let’s Connect</a></p>]]></content><author><name>gouravkhunger</name></author><category term="android"/><category term="animation"/><category term="app-development"/><summary type="html"><![CDATA[Learn how to add swipe animation to a card view. In this tutorial, we will add a sliding animation to a card view to simulate slide to refresh behaviour.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1636707430801/EOfL2jKCy.gif"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1636707430801/EOfL2jKCy.gif" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How to Support Multiple Fonts in an Android App</title><link href="https://genicsblog.com/how-to-support-multiple-fonts-in-an-android-app" rel="alternate" type="text/html" title="How to Support Multiple Fonts in an Android App"/><published>2021-11-07T00:00:00+00:00</published><updated>2021-11-07T00:00:00+00:00</updated><id>https://genicsblog.com/how-to-support-multiple-fonts-in-an-android-app</id><content type="html" xml:base="https://genicsblog.com/how-to-support-multiple-fonts-in-an-android-app"><![CDATA[<p>You would hardly see any Android app that allows its users to be able to choose from a set of fonts to be used for the whole app, based on the user’s preference. The major reason being it is hard to implement!</p> <h2 id="why-should-you-bother">Why should you bother?</h2> <p>Accessibility is a major aspect that every app developer should focus on. Imagine an app with an amazing utility but one that is barely usable. You don’t want to loose your user base!</p> <p>I used to neglect this, but here’s why I am writing this post.</p> <p>If you follow me on any social media, or here on my blog, you know that <a href="https://genicsblog.com/introducing-jekyllex-android-app">I built JekyllEx</a> to be able to manage Jekyll blogs from my Android device.</p> <p>Recently, I <a href="https://github.com/jekyllex/jekyllex-android/issues/2">a person reached out</a> to discuss about their chronic headaches that are triggered by font and colours that don’t go well on their eyes and it would be great if I allowed some settings to be able to customise it based on user preferences.</p> <p>I quickly went to have a look at what the <a href="https://developer.android.com/guide/topics/ui/accessibility">Android accessibility guidelines</a> had to say.</p> <p>But to my surprise- I DIDN’T FIND ANYTHING. If you take a look at those guidelines, you’ll find Google actually emphasizes developers a lot to take measures and make their app accessible for all kind of users. But such a common problem hasn’t been addressed. Believe me, there are many a people with varied levels of such reading problems.</p> <p>And I usually don’t enable such settings in apps, but I thought it would be a great challenge to overcome, because mostly, all the solutions that already exist are inefficient: most stack overflow answers ask to traverse the <code class="language-plaintext highlighter-rouge">ViewGroup</code>’s children and apply custom typeface as they find Text.</p> <p>I had some other thoughts and it was obvious I would be making an Android library that somehow resolves this issue.</p> <h2 id="the-challenge">The Challenge</h2> <p>In broad aspects, an Android app is just a set of <code class="language-plaintext highlighter-rouge">View</code>(s), held together by <code class="language-plaintext highlighter-rouge">ViewGroup</code>(s), that perform certain actions when loaded, clicked, etc. All that together makes the functional app.</p> <p>But here’s the catch- each view has its own <code class="language-plaintext highlighter-rouge">Context</code>, that gives access to the current state of the view, and that makes it harder to think about how to implement the multiple-font feature, as each view needs separate handling to update its font.</p> <p>Here is a typical example of how to update the font of a single <code class="language-plaintext highlighter-rouge">TextView</code>:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">typeface</span> <span class="p">=</span> <span class="nc">ResourcesCompat</span><span class="p">.</span><span class="nf">getFont</span><span class="p">(</span><span class="k">this</span><span class="nd">@MainActivity</span><span class="p">,</span> <span class="nc">R</span><span class="p">.</span><span class="n">font</span><span class="p">.</span><span class="n">source_code_pro</span><span class="p">)</span> <span class="c1">// get font from res/font/ directory</span>
<span class="n">binding</span><span class="p">.</span><span class="n">helloWorld</span><span class="p">.</span><span class="n">typeface</span> <span class="p">=</span> <span class="n">typeface</span> <span class="c1">// apply the font to the text view</span>
</code></pre></div></div> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1636027952199/bY0CrvEb8.png" alt="image.png"/></p> <p>Imagine you have 20+ text views, or rather a RecyclerView(as in <a href="https://jekyllex.xyz">JekyllEx</a>), in which each of the items has a significantly large number of <code class="language-plaintext highlighter-rouge">TextView</code>(s).</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1636028456465/fi0vdUzhZ.png" alt="image.png"/></p> <p>Here, <a href="https://github.com/jekyllex/jekyllex-android/blob/main/app/src/main/res/layout/other_repository_item.xml">each RecyclerView item</a> actually has 8 TextViews! Imagine updating the font manually for each view, one-by-one. It would be really inconvenient!</p> <p>I had a look to some stack overflow questions and as told earlier, most of them were old and in-efficient.</p> <h2 id="the-solution">The Solution</h2> <p>From the very beginning I knew I would store the default font in a <code class="language-plaintext highlighter-rouge">SharedPreference</code>. For those who don’t know about it, it is Android’s way to allow apps to store simple key-value paired data that the app can use without write access to the disk. For most of the cases, it suffices to use <code class="language-plaintext highlighter-rouge">SharedPreference</code> instead of writing to disk and it was super handy in this case.</p> <p>I would store the resource id, an integer identifier that is given to all types of resources in any app, in <code class="language-plaintext highlighter-rouge">SharedPreference</code>, and retrieve that value to apply the font when the view is inflated (rendered on screen).</p> <p>This was the most efficient way I could come up with, because <code class="language-plaintext highlighter-rouge">SharedPreference</code> is really optimised. The values are cached and retrieving multiple values within a short time doesn’t affect performance much.</p> <p>There exists another way, by changing the <code class="language-plaintext highlighter-rouge">themes.xml</code> values at runtime and applying font directly from the styles itself, but it requires minimum API level 23 (Android 6.0). So it wouldn’‘t be backward compatible and make the app crash on lower Android versions. I didn’t want to do so.</p> <h2 id="the-result">The Result</h2> <p>As a result, I built the android library <a href="https://github.com/gouravkhunger/Fontize">Fontize</a></p> <p>Once you add it to your project, you need to follow certain steps mentioned in the <a href="https://github.com/gouravkhunger/Fontize/blob/main/README.md">repository’s <code class="language-plaintext highlighter-rouge">README.md</code> file</a> and your project will migrate to use intelligent <code class="language-plaintext highlighter-rouge">Fontize</code> views that can work united and can change fonts in a snap.</p> <p>Here’s a demo of what you can Achieve with Fontize:</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1636224247599/d04oZY7Pf.gif" alt="Fontize Android library demo"/></p> <p>To set the default font for the app, you just have to add this line of code just below <code class="language-plaintext highlighter-rouge">onCreate()</code> function in your app’s launcher activity (the one that is triggered when app icon is clicked) only once:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Fontize</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nf">setDefaultFont</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">font</span><span class="p">.</span><span class="n">exo_2</span><span class="p">)</span> <span class="c1">// replace with the font you desire</span>
</code></pre></div></div> <p>Internally, this function creates a <code class="language-plaintext highlighter-rouge">SharedPreference</code> value if it doesn’t already exist:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">setDefaultFont</span><span class="p">(</span><span class="n">resourceId</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">sharedPref</span> <span class="p">=</span> <span class="nc">PreferenceManager</span><span class="p">.</span><span class="nf">getDefaultSharedPreferences</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">fontId</span> <span class="p">=</span> <span class="n">sharedPref</span><span class="p">.</span><span class="nf">getInt</span><span class="p">(</span><span class="s">"fontFamily"</span><span class="p">,</span> <span class="nc">ResourcesCompat</span><span class="p">.</span><span class="nc">ID_NULL</span><span class="p">)</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">fontId</span> <span class="p">==</span> <span class="nc">ResourcesCompat</span><span class="p">.</span><span class="nc">ID_NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sharedPref</span><span class="p">.</span><span class="nf">edit</span><span class="p">()</span>
            <span class="p">.</span><span class="nf">putInt</span><span class="p">(</span><span class="s">"fontFamily"</span><span class="p">,</span> <span class="n">resourceId</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">apply</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>To update the font for the entire app, you just need to run this code and Fontize will handle it automatically for you:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Fontize</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nf">updateFont</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">font</span><span class="p">.</span><span class="n">zen_old_mincho</span><span class="p">)</span> <span class="c1">// updates fontFamily throughout app</span>
</code></pre></div></div> <p>Here’s the interesting part, this function just updates the <code class="language-plaintext highlighter-rouge">fontFamily</code> value stored in <code class="language-plaintext highlighter-rouge">SharedPreference</code> for the app:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">updateFont</span><span class="p">(</span><span class="n">resourceId</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">sharedPref</span> <span class="p">=</span> <span class="nc">PreferenceManager</span><span class="p">.</span><span class="nf">getDefaultSharedPreferences</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
    <span class="n">sharedPref</span><span class="p">.</span><span class="nf">edit</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">putInt</span><span class="p">(</span><span class="s">"fontFamily"</span><span class="p">,</span> <span class="n">resourceId</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">apply</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div> <p>The actual work happens in the view classes. Let’s take the example of <code class="language-plaintext highlighter-rouge">FontizeTextView</code>, or any similar class. It just extends the parent View and applies the font by picking its value from <code class="language-plaintext highlighter-rouge">SharedPreference</code>:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">FontizeTextView</span><span class="p">(</span>
    <span class="n">context</span><span class="p">:</span> <span class="nc">Context</span><span class="p">,</span>
    <span class="n">attrs</span><span class="p">:</span> <span class="nc">AttributeSet</span>
<span class="p">)</span> <span class="p">:</span> <span class="nc">AppCompatTextView</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">attrs</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">init</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">prefs</span> <span class="p">=</span> <span class="nc">PreferenceManager</span><span class="p">.</span><span class="nf">getDefaultSharedPreferences</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
        <span class="kd">val</span> <span class="py">fontId</span> <span class="p">=</span> <span class="n">prefs</span><span class="p">.</span><span class="nf">getInt</span><span class="p">(</span><span class="s">"fontFamily"</span><span class="p">,</span> <span class="nc">ResourcesCompat</span><span class="p">.</span><span class="nc">ID_NULL</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">fontId</span> <span class="p">!=</span> <span class="nc">ResourcesCompat</span><span class="p">.</span><span class="nc">ID_NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">val</span> <span class="py">typeface</span> <span class="p">=</span> <span class="nc">ResourcesCompat</span><span class="p">.</span><span class="nf">getFont</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">fontId</span><span class="p">)</span>
            <span class="k">this</span><span class="p">.</span><span class="n">typeface</span> <span class="p">=</span> <span class="n">typeface</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>All this code does is, to override the default view to apply the font family as soon as it inflates. Similar classes for views that support texts within them, like workarounds for <code class="language-plaintext highlighter-rouge">MenuItem</code>(s) and <code class="language-plaintext highlighter-rouge">Toolbar</code>(s), will be shipped soon.</p> <p>If you need to look at a live project that uses Fontize in production- <a href="https://github.com/jekyllex/jekyllex-android">checkout JekyllEx app on GitHub</a>. It doesn’t use the initial version that was published on Jitpack, but it uses a custom fork as per its needs and requirements, but Fontize will soon evolve and be able to do a lot more than just <code class="language-plaintext highlighter-rouge">TextViews</code> 😄</p> <h2 id="conclusion">Conclusion</h2> <p>Believe me or not, starting this project, to finishing the base version with a working <code class="language-plaintext highlighter-rouge">FontizeTextView</code>, to publishing it on jitpack- all just finished within 2 hours! <a href="https://github.com/gouravkhunger/Fontize">Fontize</a> deserves a star for that effort 😎.</p> <p>I hope you learnt something new out of this post. If you want to keep reading quality Android development content, consider joining my newsletter, fill out the box at the top of the article.</p> <p>Do comment and let me know what topic should I pick to publish an article next week. All kinds of feedbacks are appreciated :)</p> <p>Thanks and happy coding!</p>]]></content><author><name>gouravkhunger</name></author><category term="android"/><category term="app-development"/><category term="android-libraries"/><category term="a11y"/><summary type="html"><![CDATA[This article explains how to increase an android app's accessibility by providing users the option to choose from a variety of fonts that suite their need.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1636226069099/jLbjyNOXm.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1636226069099/jLbjyNOXm.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Integrate Authentication to your Android App with Auth0</title><link href="https://genicsblog.com/authentication-in-android-app-with-auth0" rel="alternate" type="text/html" title="Integrate Authentication to your Android App with Auth0"/><published>2021-09-26T00:00:00+00:00</published><updated>2021-09-26T00:00:00+00:00</updated><id>https://genicsblog.com/authentication-in-android-app-with-auth0</id><content type="html" xml:base="https://genicsblog.com/authentication-in-android-app-with-auth0"><![CDATA[<p><a href="https://auth0.com">Auth0</a> is an amazing tool to easily integrate user authentication in any kind of app you are building. It has a great set of tools to enable auth in your app in a few really quick steps.</p> <p>Today, we are going to look into how to integrate Auth0 into your Android App! First, we’ll set up the local project for integrating Auth0, and then we’ll set up the app on the Auth0 dashboard.</p> <p>Check out this video to learn what we are going to build in this tutorial:</p> <div class="mb-6 aspect-video"> <iframe src="https://www.youtube.com/embed/obk3q1AaH6I" class="w-full h-full rounded-xl" allowfullscreen="" loading="lazy"> </iframe> </div> <p>The code for this basic app that we are going to build is present <a href="https://github.com/gouravkhunger/auth0-demo-android">here on GitHub</a>, star it and follow me :)</p> <h1 id="android-app-setup">Android app setup</h1> <h2 id="initialize-the-project">Initialize the project</h2> <p>First, create a new Android Studio Project. If you are just checking out Auth0, you can follow the steps mentioned in <a href="https://genicsblog.com/how-to-create-your-first-android-app-using-android-studio">my previous article</a> on how to make a basic project using Android Studio:</p> <p>You can also use any existing project!</p> <h2 id="set-up-view-binding">Set up view binding</h2> <h3 id="what-is-it">What is it?</h3> <p>View binding is a new way of referencing views from XML layouts inside your java/kotlin classes. View Binding creates a Binding class for each XML layout resource which you can use to refer views without the hassle of using <code class="language-plaintext highlighter-rouge">findViewById()</code> or using the deprecated kotlin synthetics.</p> <h3 id="enable-view-binding">Enable View Binding</h3> <p>If you are reading this post in the future, chances are that view binding is supported right into new projects using Android Studio.</p> <p>If not, you can go into the App level <code class="language-plaintext highlighter-rouge">build.gradle</code> file and add this piece of code anywhere inside the <code class="language-plaintext highlighter-rouge">android</code> scope.</p> <div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">buildFeatures</span> <span class="o">{</span>
    <span class="n">viewBinding</span> <span class="kc">true</span>
<span class="o">}</span>
</code></pre></div></div> <p>This image will give you a gist of where to add it:</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632594546418/IWp7Zd5Ju.png" alt="Enable view binding in Android apps"/></p> <h2 id="integrate-auth0">Integrate Auth0</h2> <p>To integrate Auth0 into our project, we need to do the following things.</p> <h3 id="add-auth0-dependencies">Add Auth0 dependencies</h3> <p>In your app level <code class="language-plaintext highlighter-rouge">build.gradle</code> dependencies section, add the following:</p> <div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dependencies</span> <span class="o">{</span>
  <span class="c1">// ... other dependencies</span>

  <span class="c1">// Auth0 Android SDK</span>
  <span class="n">implementation</span> <span class="s1">'com.auth0.android:auth0:2.4.0'</span>
<span class="o">}</span>
</code></pre></div></div> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632596987895/ChRu2ueYY.png" alt="Adding auth0 sdk to android app"/></p> <h3 id="add-manifest-placeholders">Add manifest placeholders</h3> <p>You need to add one more simple line of code to the app level <code class="language-plaintext highlighter-rouge">build.gradle</code> file:</p> <div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">android</span> <span class="o">{</span>
    <span class="n">defaultConfig</span> <span class="o">{</span>

        <span class="c1">// ...</span>

        <span class="c1">// Add this</span>
        <span class="n">manifestPlaceholders</span> <span class="o">=</span> <span class="o">[</span><span class="nl">auth0Domain:</span> <span class="s2">"@string/com_auth0_domain"</span><span class="o">,</span> <span class="nl">auth0Scheme:</span> <span class="s2">"demo"</span><span class="o">]</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>This creates an <code class="language-plaintext highlighter-rouge">intent-filter</code> which is used by the library to open your app back once the login is done by the user. If this is not done you have to define an <code class="language-plaintext highlighter-rouge">intent-filter</code> on your own. This method is easier than handling that.</p> <p><em>The <code class="language-plaintext highlighter-rouge">@string/com_auth0_domain</code> is actually a string resource, you need to declare it in your <code class="language-plaintext highlighter-rouge">strings.xml</code> as follows:</em></p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;string</span> <span class="na">name=</span><span class="s">"com_auth0_domain"</span><span class="nt">&gt;</span>Your domain here<span class="nt">&lt;/string&gt;</span>
</code></pre></div></div> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632597709645/Q0e7v73bC.png" alt="strings.xml file in android"/></p> <p>Don’t worry if you don’t have a domain like this yet, scroll below to find the auth0 dashboard setup, or you can skip this for now and come back to it later!</p> <p><strong>Press Sync Now on the notification bar to complete the finalize the above things</strong>.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632597868902/ZQFHTYOs_.png" alt="Android Studio Gradle sync notification"/></p> <h3 id="add-internet-permissions-to-manifest">Add Internet Permissions to Manifest</h3> <p>You would need to add the internet permission to the <code class="language-plaintext highlighter-rouge">AndroidManifest.xml</code> file to allow network access, else the app may crash during login process.</p> <p>Add this line in your <code class="language-plaintext highlighter-rouge">AndroidManifest.xml</code> file as shown in the image below:</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">"android.permission.INTERNET"</span> <span class="nt">/&gt;</span>
</code></pre></div></div> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632598305357/oBXJKdYTY.png" alt="Adding internet permission in AndroidManifest.xml file"/></p> <h2 id="make-a-basic-ui">Make a basic UI</h2> <p>Open the <code class="language-plaintext highlighter-rouge">res/layout/activity_main.xml</code> file and replace the content with this layout:</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;LinearLayout</span>
    <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">xmlns:app=</span><span class="s">"http://schemas.android.com/apk/res-auto"</span>
    <span class="na">xmlns:tools=</span><span class="s">"http://schemas.android.com/tools"</span>
    <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
    <span class="na">android:orientation=</span><span class="s">"vertical"</span>
    <span class="na">android:gravity=</span><span class="s">"center"</span>
    <span class="na">tools:context=</span><span class="s">".MainActivity"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;TextView</span>
        <span class="na">android:id=</span><span class="s">"@+id/nameTv"</span>
        <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">android:layout_margin=</span><span class="s">"10dp"</span>
        <span class="na">android:textSize=</span><span class="s">"30sp"</span>
        <span class="na">android:textColor=</span><span class="s">"#000000"</span>
        <span class="na">android:text=</span><span class="s">"@string/john_doe"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;TextView</span>
        <span class="na">android:id=</span><span class="s">"@+id/emailTv"</span>
        <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">android:layout_marginBottom=</span><span class="s">"28dp"</span>
        <span class="na">android:textSize=</span><span class="s">"18sp"</span>
        <span class="na">android:text=</span><span class="s">"@string/email"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;Button</span>
        <span class="na">android:text=</span><span class="s">"@string/login"</span>
        <span class="na">android:id=</span><span class="s">"@+id/loginBtn"</span>
        <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">android:layout_marginTop=</span><span class="s">"20dp"</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;Button</span>
        <span class="na">android:text=</span><span class="s">"@string/logout"</span>
        <span class="na">android:id=</span><span class="s">"@+id/logoutBtn"</span>
        <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">android:layout_marginTop=</span><span class="s">"10dp"</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;/LinearLayout&gt;</span>
</code></pre></div></div> <p>This will create a simple layout that has the name and email text on top and two buttons to log-in and log-out. You’ll have to create string resources for dummy name and email placeholder.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632600993177/-UK3Y3RsZ.png" alt="Basic user profile layout preview for demo Android app"/></p> <h2 id="coding-the-mainactivity">Coding the <code class="language-plaintext highlighter-rouge">MainActivity</code></h2> <h3 id="initialize-view-binding">Initialize View Binding</h3> <p>Create a <code class="language-plaintext highlighter-rouge">lateinit var</code> for the view binding:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">lateinit</span> <span class="kd">var</span> <span class="py">binding</span><span class="p">:</span> <span class="nc">ActivityMainBinding</span>
</code></pre></div></div> <p>Inflate the binding the the <code class="language-plaintext highlighter-rouge">onCreate()</code> method:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">binding</span> <span class="p">=</span> <span class="nc">ActivityMainBinding</span><span class="p">.</span><span class="nf">inflate</span><span class="p">(</span><span class="n">layoutInflater</span><span class="p">)</span>
</code></pre></div></div> <p>Finally, set the root element of the binding as the content view:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">setContentView</span><span class="p">(</span><span class="n">binding</span><span class="p">.</span><span class="n">root</span><span class="p">)</span>
</code></pre></div></div> <p>Here’s what the <code class="language-plaintext highlighter-rouge">MainActivity.kt</code> file looks like after doing the above changes:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// package name</span>
<span class="k">package</span> <span class="nn">com.github.gouravkhunger.auth0demo</span>

<span class="c1">// imports</span>
<span class="k">import</span> <span class="nn">...</span>

<span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>

    <span class="k">private</span> <span class="k">lateinit</span> <span class="kd">var</span> <span class="py">binding</span><span class="p">:</span> <span class="nc">ActivityMainBinding</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>

        <span class="n">binding</span> <span class="p">=</span> <span class="nc">ActivityMainBinding</span><span class="p">.</span><span class="nf">inflate</span><span class="p">(</span><span class="n">layoutInflater</span><span class="p">)</span>
        <span class="nf">setContentView</span><span class="p">(</span><span class="n">binding</span><span class="p">.</span><span class="n">root</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="initialize-auth0">Initialize Auth0</h3> <p>First, you’ll need to create an instance of the Auth0 class.</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Imports</span>
<span class="k">import</span> <span class="nn">...</span>

<span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>

    <span class="c1">// other vars ...</span>
    <span class="k">private</span> <span class="k">lateinit</span> <span class="kd">var</span> <span class="py">account</span><span class="p">:</span> <span class="nc">Auth0</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>

        <span class="c1">// ...</span>

        <span class="c1">// Set up the account object with the Auth0 application details</span>
        <span class="n">account</span> <span class="p">=</span> <span class="nc">Auth0</span><span class="p">(</span>
            <span class="s">"xljNBT32DCsVDN7sYDM1qEHMD2mA1fVp"</span><span class="p">,</span>
            <span class="s">"auth0-demo-android.us.auth0.com"</span>
        <span class="p">)</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><em>This is the client id and domain of my sample app, replace it with yours to make it work.</em> To get these parameters for your app, skip ahead to the setting up auth0 section.</p> <h3 id="add-log-in">Add Log-in</h3> <p>Now, proceed to set the <code class="language-plaintext highlighter-rouge">onClickListener</code> on the button. This will be triggered whenever the button will be clicked.</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>

        <span class="n">binding</span><span class="p">.</span><span class="n">loginBtn</span><span class="p">.</span><span class="nf">setOnClickListener</span> <span class="p">{</span>
            <span class="nc">WebAuthProvider</span><span class="p">.</span><span class="nf">login</span><span class="p">(</span><span class="n">account</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">withScheme</span><span class="p">(</span><span class="s">"demo"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">withScope</span><span class="p">(</span><span class="s">"openid profile email"</span><span class="p">)</span>
                <span class="c1">// Launch the authentication passing the callback where the results will be received</span>
                <span class="p">.</span><span class="nf">start</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="kd">object</span> <span class="err">: </span><span class="nc">Callback</span><span class="p">&lt;</span><span class="nc">Credentials</span><span class="p">,</span> <span class="nc">AuthenticationException</span><span class="p">&gt;</span> <span class="p">{</span>
                    <span class="c1">// Called when there is an authentication failure</span>
                    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onFailure</span><span class="p">(</span><span class="n">error</span><span class="p">:</span> <span class="nc">AuthenticationException</span><span class="p">)</span> <span class="p">{</span>
                        <span class="c1">// Something went wrong!</span>
                        <span class="nc">Toast</span>
                            <span class="p">.</span><span class="nf">makeText</span><span class="p">(</span><span class="k">this</span><span class="nd">@MainActivity</span><span class="p">,</span> <span class="s">"Login Error: \n${error.message}"</span><span class="p">,</span> <span class="nc">Toast</span><span class="p">.</span><span class="nc">LENGTH_LONG</span><span class="p">)</span>
                            <span class="p">.</span><span class="nf">show</span><span class="p">()</span>
                    <span class="p">}</span>

                    <span class="c1">// Called when authentication completed successfully</span>
                    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSuccess</span><span class="p">(</span><span class="n">result</span><span class="p">:</span> <span class="nc">Credentials</span><span class="p">)</span> <span class="p">{</span>
                        <span class="c1">// Get the access token from the credentials object.</span>
                        <span class="c1">// This can be used to call APIs</span>
                        <span class="kd">val</span> <span class="py">accessToken</span> <span class="p">=</span> <span class="n">result</span><span class="p">.</span><span class="n">accessToken</span>
                        <span class="nf">showUserProfile</span><span class="p">(</span><span class="n">accessToken</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">})</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Now, once a user presses this button, the login process will start and they’ll be asked to log in with their E-mail id.</p> <p>You can use any scheme name, here I used <code class="language-plaintext highlighter-rouge">demo</code>. But I recommend not to use <code class="language-plaintext highlighter-rouge">https</code> because it might conflict with the intent-filters internally. I got this error while building <a href="https://genicsblog.com/introducing-jekyllex-android-app">JekyllEx</a>.</p> <p>Once the login is successful, we can get the access token which can be used to retrieve the user profile. Let’s make a function to get the user profile from the token:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">fun</span> <span class="nf">showUserProfile</span><span class="p">(</span><span class="n">accessToken</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">client</span> <span class="p">=</span> <span class="nc">AuthenticationAPIClient</span><span class="p">(</span><span class="n">account</span><span class="p">)</span>

    <span class="c1">// With the access token, call `userInfo` and get the profile from Auth0.</span>
    <span class="n">client</span><span class="p">.</span><span class="nf">userInfo</span><span class="p">(</span><span class="n">accessToken</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">start</span><span class="p">(</span><span class="kd">object</span> <span class="err">: </span><span class="nc">Callback</span><span class="p">&lt;</span><span class="nc">UserProfile</span><span class="p">,</span> <span class="nc">AuthenticationException</span><span class="p">&gt;</span> <span class="p">{</span>
            <span class="k">override</span> <span class="k">fun</span> <span class="nf">onFailure</span><span class="p">(</span><span class="n">error</span><span class="p">:</span> <span class="nc">AuthenticationException</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// Something went wrong!</span>
                <span class="nc">Toast</span><span class="p">.</span><span class="nf">makeText</span><span class="p">(</span>
                    <span class="k">this</span><span class="nd">@MainActivity</span><span class="p">,</span>
                    <span class="s">"Error getting profile \n${error.message}"</span><span class="p">,</span>
                    <span class="nc">Toast</span><span class="p">.</span><span class="nc">LENGTH_LONG</span>
                <span class="p">).</span><span class="nf">show</span><span class="p">()</span>
            <span class="p">}</span>

            <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSuccess</span><span class="p">(</span><span class="n">result</span><span class="p">:</span> <span class="nc">UserProfile</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// We have the user's profile!</span>
                <span class="n">binding</span><span class="p">.</span><span class="n">nameTv</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="n">result</span><span class="p">.</span><span class="n">name</span>
                <span class="n">binding</span><span class="p">.</span><span class="n">emailTv</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="n">result</span><span class="p">.</span><span class="n">email</span>
                <span class="nc">Toast</span><span class="p">.</span><span class="nf">makeText</span><span class="p">(</span>
                    <span class="k">this</span><span class="nd">@MainActivity</span><span class="p">,</span>
                    <span class="s">"Login Successful!"</span><span class="p">,</span>
                    <span class="nc">Toast</span><span class="p">.</span><span class="nc">LENGTH_SHORT</span>
                <span class="p">).</span><span class="nf">show</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="add-log-out">Add Log-out</h3> <p>Now, let’s make a function that enables logging out.</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">fun</span> <span class="nf">logout</span><span class="p">()</span> <span class="p">{</span>
    <span class="nc">WebAuthProvider</span><span class="p">.</span><span class="nf">logout</span><span class="p">(</span><span class="n">account</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">withScheme</span><span class="p">(</span><span class="s">"demo"</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">start</span><span class="p">(</span>
            <span class="k">this</span><span class="p">,</span>
            <span class="kd">object</span> <span class="err">: </span><span class="nc">Callback</span><span class="p">&lt;</span><span class="nc">Void</span><span class="p">?,</span> <span class="nc">AuthenticationException</span><span class="p">&gt;</span> <span class="p">{</span>
                <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSuccess</span><span class="p">(</span><span class="n">result</span><span class="p">:</span> <span class="nc">Void</span><span class="p">?)</span> <span class="p">{</span>
                    <span class="c1">// The user has been logged out!</span>
                    <span class="nc">Toast</span><span class="p">.</span><span class="nf">makeText</span><span class="p">(</span>
                        <span class="k">this</span><span class="nd">@MainActivity</span><span class="p">,</span>
                        <span class="s">"Successfully logged out!"</span><span class="p">,</span>
                        <span class="nc">Toast</span><span class="p">.</span><span class="nc">LENGTH_SHORT</span>
                    <span class="p">).</span><span class="nf">show</span><span class="p">()</span>
                    <span class="n">binding</span><span class="p">.</span><span class="n">nameTv</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="n">resources</span><span class="p">.</span><span class="nf">getString</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">john_doe</span><span class="p">)</span>
                    <span class="n">binding</span><span class="p">.</span><span class="n">emailTv</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="n">resources</span><span class="p">.</span><span class="nf">getString</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">email</span><span class="p">)</span>
                <span class="p">}</span>

                <span class="k">override</span> <span class="k">fun</span> <span class="nf">onFailure</span><span class="p">(</span><span class="n">error</span><span class="p">:</span> <span class="nc">AuthenticationException</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nc">Toast</span><span class="p">.</span><span class="nf">makeText</span><span class="p">(</span>
                        <span class="k">this</span><span class="nd">@MainActivity</span><span class="p">,</span>
                        <span class="s">"Couldn't Logout!"</span><span class="p">,</span>
                        <span class="nc">Toast</span><span class="p">.</span><span class="nc">LENGTH_SHORT</span>
                    <span class="p">).</span><span class="nf">show</span><span class="p">()</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>Now, our app is ready to handle log-in and logout. You can also <a href="https://github.com/gouravkhunger/auth0-demo-android/blob/main/app/src/main/java/com/github/gouravkhunger/auth0demo/MainActivity.kt">checkout the content</a> of the <code class="language-plaintext highlighter-rouge">MainActivity.kt</code> file on the repo.</p> <h1 id="setting-up-auth0">Setting up Auth0</h1> <h2 id="make-an-account">Make an account</h2> <p>First, let’s do the setup needed at the auth0 dashboard.</p> <p>Go to the official <a href="https://auth0.com/">Auth0</a> site and press signup on the navigation bar. After making an account, you would be taken to the dashboard where you can create a tenant. Here, the tenant is what auth0 calls a project. A project can have a number of applications in it.</p> <p><em>All the applications in a single-tenant have the same user database and storage.</em></p> <h2 id="set-up-the-tenant">Set up the tenant</h2> <p>Create a new tenant. You can choose any domain name for your tenant, here I am choosing <code class="language-plaintext highlighter-rouge">auth0-demo-android</code>. For now, this will be a subdomain, but you can customize it to your custom domain by upgrading your free plan.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632595285718/pzRUUPZSOX.png" alt="Creating a new tenant in Auth0 dashboard"/></p> <h2 id="create-a-new-app">Create a new app</h2> <p>Go to the applications section and press create a new app. Since we are building an Android app, choose the native field and hit create.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632595589796/u_K9yatlS.png" alt="Creating a new app in auth0 dashboard"/></p> <p>Since we are going to develop an app that will use this tenant, tag it in the <code class="language-plaintext highlighter-rouge">development</code> phase.</p> <p>After creating your app, go to the app settings</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632648478901/D6LpFj98V.png" alt="Settings tab of an app in Auth0"/></p> <p>Scroll down to the Application URIs section, there add callback URLs for login and logout. These are required to let Auth0 know what apps are authorized to perform these actions as these strings contain identifiers for our app.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>demo://&lt;tenant-domain&gt;.us.auth0.com/android/PACKAGE_NAME/callback
</code></pre></div></div> <p><em>Replace the package name and tenant domain with that of your own app. If you have set a scheme other than <code class="language-plaintext highlighter-rouge">demo</code>, change it here.</em></p> <p>Here’s an example:</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632648617407/DJhXTcFJH.png" alt="Auth0 allowed callbacks urls"/></p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632648626448/y2zKRWq53.png" alt="Auth0 allowed login urls"/></p> <p>After adding them, scroll all the way to the bottom and save the changes.</p> <p>Now you can go ahead and replace the Client IDs and such things in the code, wherever necessary.</p> <h1 id="congratulations-">Congratulations 🥳</h1> <p>You have successfully added Auth0 to your Android app. Trust me, though this post was long, it is actually really easy if you try it on your own.</p> <p>If you stayed along till this far, I am really thankful to you! Please comment on your experience with Auth0 and this article.</p> <p><a href="/contributor/gouravkhunger">Let’s connect</a> with each other :)</p>]]></content><author><name>gouravkhunger</name></author><category term="android"/><category term="auth0"/><category term="authentication"/><category term="app-development"/><summary type="html"><![CDATA[The complete guide to integrating auth0 authentication in your Android app.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1632651818188/OlwaCV_aL.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1632651818188/OlwaCV_aL.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Trying out Next.js for the first time 🤯</title><link href="https://genicsblog.com/trying-out-nextjs" rel="alternate" type="text/html" title="Trying out Next.js for the first time 🤯"/><published>2021-09-26T00:00:00+00:00</published><updated>2021-09-26T00:00:00+00:00</updated><id>https://genicsblog.com/trying-out-nextjs</id><content type="html" xml:base="https://genicsblog.com/trying-out-nextjs"><![CDATA[<p>You read the title right! I tried something other than Android this time :P</p> <p>I have always been wanting to learn web development. If you know my background, you probably know I first learned HTML, CSS, and really basic Javascript at first. If not, consider reading <a href="/3-years-of-blogging">this article</a> to know more about my journey.</p> <p>But just learning that wasn’t enough to make better websites. Technically we can make functional websites with them. But <strong>it isn’t intuitive</strong>. Using just HTML and CSS to make a good-looking website is a headache because files become too long to manage. At least that was the case for me :(</p> <p>Sure, you can use tools like Tailwind CSS, but neither was I aware of such tools nor did I knew there are frameworks like React, Angular, Vue, etc. which can make the process of building websites easy.</p> <p>It was obvious that I left web dev back then and that was when I turned to Android. I have been doing Android dev for more than 2 years now. And I recently realized - <strong>staying in a single domain while the tech world progresses will slow down your progress</strong>.</p> <p>I am not saying you should learn everything that comes out each day. But having a gist of other things won’t be harming you. I have tried both things- sticking to a single tech and also trying different things. And I bet you, trying new things teaches more than repeating what you know again and again!</p> <p>For a long time, I wanted to try out web dev again, more because websites work on any device, and just knowing Android was limiting me to the devices I can make apps for.</p> <p>The <a href="https://hashnode.com/bootcamp">Hashnode Bootcamp</a>’s Day 5 task was a perfect moment I could try a new thing and write about it. And here I am writing about using Next.js for two really basic things I needed to work on. Here are the projects:</p> <h2 id="birthday-wish-generator">Birthday Wish Generator</h2> <p><strong><a href="https://hbdwish.ml" rel="dofollow">Check it out</a></strong></p> <p>GitHub Repo:</p> <p>%[https://github.com/gouravkhunger/nextjs-birthday-wish]</p> <p>One of my friend’s birthdays is near and I wanted to do something special for them. And looking at the Next.js, I quickly thought to make a simple page with some confetti popping in the background, and their name on the front.</p> <p>I quickly made the project with:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx create-next-app nextjs-birthday-wish
</code></pre></div></div> <p>But this thought struck my mind: Since I am gonna deploy it to Vercel anyway, I can make a home page where anyone can enter the name of the person they want to send a wish, and then copy the generated link to be sent.</p> <p>Also, I could make it open source <s>just to increase the number of reports on my profile so that I can flex on the count</s>.</p> <p>I quickly created two pages, along with their CSS modules. Here are the screenshots:</p> <h3 id="home-page">Home Page</h3> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632674975999/NHbFfU1vZ.jpeg" alt="one.jpeg"/></p> <h3 id="birthday-wish">Birthday Wish</h3> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632675120489/1uZ_YLvsn.jpeg" alt="two.jpeg"/></p> <p>I completed the project in 3 hours, took so long because I had to test 7 different confetti libraries that work with Next.js 😂. Finally used <code class="language-plaintext highlighter-rouge">[confetti-js](https://www.npmjs.com/package/confetti-js)</code>.</p> <p>I also spent some time on CSS and the routing stuff- because I don’t know CSS that well, but I am improving day by day. The CSS design of this blog is done by me!</p> <p>But I think I did a pretty decent job. And it was fun trying next js for the first time, it’s a great framework on top of React, so if you are learning Next.js you are learning concepts of React too. So it is a win-win case.</p> <h2 id="s̶t̶r̶i̶k̶e̶d̶-̶t̶e̶x̶t̶-̶g̶e̶n̶e̶r̶a̶t̶o̶r̶">S̶t̶r̶i̶k̶e̶d̶ ̶T̶e̶x̶t̶ ̶G̶e̶n̶e̶r̶a̶t̶o̶r̶</h2> <p>(The title for this section is generated with this tool 😂)</p> <p><strong><a href="https://strikeit.ml/" rel="dofollow">Check it out</a></strong></p> <p>GitHub repo:</p> <p>%[https://github.com/gouravkhunger/nextjs-strikeit]</p> <p>Here are the images:</p> <h3 id="home-page-1">Home Page</h3> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632674734678/ik7IJW6Yt.jpeg" alt="one.jpeg"/></p> <h3 id="preview-of-striked-text">Preview of striked text</h3> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632674743501/Wvr_3Y_om.jpeg" alt="two.jpeg"/></p> <p>I needed this generator because I use Google Calendar to stay focused and plan the work I have for a day.</p> <p>I don’t clutter my day with huge time boxes because that doesn’t work for me and I need the flexibility to carry out my tasks.</p> <p>What I do is: I copy a template of three events for each day the day before it, and put the things I need to carry out in their respective category.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632672045301/bk9x2KLPn.png" alt="image.png"/></p> <p>This works well for me. But actually, the text in google calendar events cannot be striked through once it is completed- as you can do for tasks rather than events.</p> <p>I could have used many of the text formatting tools available online to cut my text and strike to check them off. But I generally forget random website names and the same would be the case with many 😂. Also, most free tools have ads and trackers, which isn’t convenient.</p> <p>So, why not try to build this thing with Next.js? <s>The thought of increasing repo count on GitHub profile still came 😜</s>.</p> <p>I again quickly made a new Next.js project, deleted the unnecessary blurb that comes by default then <s>copied from the last project</s> added the text box.</p> <p>This time I faced a new difficulty- to display the striked text preview in a paragraph below the input box. I could set an event listener when the input box’s text changed, but didn’t know what to do to get a reference of the paragraph below it, as we can’t do the traditional <code class="language-plaintext highlighter-rouge">document.getElementById()</code> in Next.js apps.</p> <p>With some research, I learned we can use <code class="language-plaintext highlighter-rouge">useRef</code> to maintain a ref of elements, and it worked! I learned how <a href="https://stackoverflow.com/a/53836006/9819031">this snippet</a> gives you striked version of the text and then implemented it when input occurs.</p> <p>I learned how easy it is to copy something to the device clipboard using Next.js. This piece of snippet does the work:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">navigator</span><span class="p">.</span><span class="nx">clipboard</span><span class="p">.</span><span class="nx">writeText</span><span class="p">(</span><span class="dl">"</span><span class="s2">This will be copied!</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> <p>It took me ~4 hours for this project because I wanted to make it responsive and I was struggling with the input box width for different screens, at the end made it work well with some hit and trial 😆</p> <h1 id="final-words">Final Words</h1> <p>I hope you liked the article, consider commenting to let me know what you think!</p> <p>It was my first experience with Next.js and I must admit it was really good. Though I got many errors and go to learn a lot in the meantime, it was worth it!</p> <p>Do check out the projects on GitHub and star them. And since you are going to star them, why not follow me there too? 😆</p> <p>I post resourceful content on this blog, consider subscribing to the newsletter by filling the form at the top of the article to get notified of the new content that I keep posting. Alternatively, <a href="https://hashnode.com/@gouravkhunger/joinme">join Hashnode</a> and <a href="https://hashnode.com/@gouravkhunger">follow me</a>!</p> <p><a href="https://genicsblog.com/contact">Let’s get in touch</a>.</p>]]></content><author><name>gouravkhunger</name></author><category term="web"/><category term="web-development"/><category term="next-js"/><summary type="html"><![CDATA[I tried to learn Next.js by building basic web-apps and here's my reaction.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1632678583912/7LS_JbQIY.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1632678583912/7LS_JbQIY.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Android Application Fundamentals - Understand the bits and bytes</title><link href="https://genicsblog.com/android-application-fundamentals" rel="alternate" type="text/html" title="Android Application Fundamentals - Understand the bits and bytes"/><published>2021-09-22T00:00:00+00:00</published><updated>2021-09-22T00:00:00+00:00</updated><id>https://genicsblog.com/android-application-fundamentals</id><content type="html" xml:base="https://genicsblog.com/android-application-fundamentals"><![CDATA[<p>Hello there!</p> <p>In the last article at the <a href="https://genicsblog.com/series/android-development">Android app development series</a>, we learned <a href="https://genicsblog.com/how-to-create-your-first-android-app-using-android-studio">how to make a Hello World app</a>. We made a new project in Android Studio and ran the app.</p> <p>Now, in this article, we are going to learn more about the Android App structure, its basic components, how to use <a href="https://developer.android.com/studio">Android Studio</a>, how to navigate through the project, and a lot many things that will be helpful along the way!</p> <p>Let’s dig into it!</p> <h2 id="know-android-studio-in-depth">Know Android Studio in depth</h2> <p><a href="https://genicsblog.com/how-to-create-your-first-android-app-using-android-studio">Last time</a>, after we created a new app, this kind of screen popped up after the app was built.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631773265969/Sq2JDNXFps.png" alt="Android Studio main window"/></p> <p>We’ll go through the window pane-by-pane. On the left side of the IDE window, you can see the project files in different views. By default, the project opens in the “Android” view, whereby you can see all the files that are relevant for your final app.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632131895518/PvcNew3hC.png" alt="rl-2Vl276G.png"/></p> <p>There are many other default files that (most of the time) aren’t needed to mess with, so Android Studio provides a really handy way to keep aside the mess and focus on what files you need for the project.</p> <p>These are the different views you can use to show/hide relevant files.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632131754395/fELwPHyzG.png" alt="image.png"/></p> <p>But, most of the time, you would only need either the “Android” view or the “Project” view.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632131855925/kIBWYnRTxg.png" alt="7IM_tC9oR.png"/></p> <p><strong>Android View</strong>: This view shows only relevant files related to your app screens and layout/resources.</p> <p><strong>Project View</strong>: This view shows all the files in the current project. You might need this while adding external files to a specific location in the project. Example: Adding <code class="language-plaintext highlighter-rouge">google-services.json</code> file to integrate Firebase in an Android app.</p> <p>Let’s get back to the main window, where you can write code.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632132266927/V7A34rdSN.png" alt="image.png"/></p> <p>You can double-click on any file on the left pane, and it will open in the editor. The image above is of is an <code class="language-plaintext highlighter-rouge">XML</code> file. Each <code class="language-plaintext highlighter-rouge">XML</code> file has three different views, <strong>Code</strong>, <strong>Split</strong> and <strong>Design</strong> view.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632132831458/ziYWINZCA.png" alt="image.png"/></p> <p>You can see just the code in the <strong>Code</strong> view, see code as well as and live updates in the <strong>Split</strong> view, or access the drag and drop layout builder in the <strong>Design</strong> view.</p> <p>On the top bar, you would be able to see the various standard features any IDE would have. You can try going through all the options and find various things you might need.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632129954919/ip7yaj4dw.png" alt="JDNXFps.pn"/></p> <p>And just below the bar, there are various useful things. On the left side you can see the current file you are working on, and the path it has inside the project.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632133059267/0869cuIRl.png" alt="image.png"/></p> <p>On the right side, you can see various buttons, which I will explain one by one:</p> <ul> <li>The <strong>build</strong>(green hammer) is used to build your project.</li> <li>the <strong>run button</strong>(green triangle) is used to build your project while installing the built <code class="language-plaintext highlighter-rouge">APK</code> on your connected Android device. You can select the device to launch your app from the drop-down beside your project. <ul> <li>When the app is running on a device, the two buttons beside the run button become active. They are for reloading the app once you made changes.</li> </ul> <p>This is useful because it takes less time to build as it only considers the changes in code and builds them, which results in a significant reduction in build time.</p> </li> <li> <p>Then there is the <strong>debug</strong> button. In addition to what the run button does, it attaches a debugger to the app which logs what happens to your android device when the app is running. It is pretty helpful to debug errors and crashes.</p> </li> <li> <p>Then there is the <strong>profiler</strong> tool which allows you to scan how your app is using CPU, memory, network, battery, and other resources on the device where it is running.</p> </li> <li>There are other buttons related to project structure, Gradle, AVD(Android Virtual Device) manager, and others. You can try them out. I have explained most of the tools you would need.</li> </ul> <p>On the bottom, you would be able to see this:</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632136020773/S-5CQBIRt.png" alt="image.png"/></p> <p>The specific tabs open up to show different things. Like, the debug tab opens up when you press the debug button, Profiler opens when you press profile, Logcat can be used to find logs of the running app, TODO lists all the TODOs (reminder to yourself) you have set anywhere in the project, etc.</p> <p>These were the basic things you would need to know to get started with Android Studio 🥳</p> <p>Now, as you have learned Android Studio. Let’s understand what files constitute different parts of an Android app.</p> <h2 id="android-project-file-structure">Android Project File Structure</h2> <p>I would recommend you to open the <em>Project</em> view for understanding what responsibility each file/folder has.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632138739381/mVpoCB8HG.jpeg" alt="Screenshot 2021-09-20 172135.jpg"/></p> <p>Under the root folder, there are sub-folders for different things.</p> <p>First, there is the <code class="language-plaintext highlighter-rouge">.gradle</code> folder. It is the local cache for Gradle to speed up some build processes. You would have noticed by now that the first Gradle build takes time and subsequent builds are a bit faster - that’s because Gradle stores cache to make things faster on further builds.</p> <p>The <code class="language-plaintext highlighter-rouge">.idea</code> folder has all the local settings for your current environment. Since Android Studio is based on IntelliJ IDEA, it follows IDEA’s blueprints.</p> <p>The <code class="language-plaintext highlighter-rouge">build</code> folder would have the assets you generate- like a signed APK or so.</p> <p>Then there comes a cluster of files, I will cover them together because they are all related to Gradle:</p> <ul> <li> <p>The root-level <code class="language-plaintext highlighter-rouge">build.gradle</code> file: It contains configurations that are used by the app you are making, and all the libraries included in the project too.</p> </li> <li> <p>The <code class="language-plaintext highlighter-rouge">settings.gradle</code> contains references of the repositories in which Gradle should look for while importing a library. It also unites all the libraries and the app together.</p> </li> <li> <p>The <code class="language-plaintext highlighter-rouge">gradle.properties</code> defines settings that Gradle uses for the current project.</p> </li> <li> <p>The <code class="language-plaintext highlighter-rouge">local.properties</code> file, as the name suggests, is for local environment settings.</p> </li> <li> <p><a href="https://stackoverflow.com/a/44861408/9819031">Read this answer</a> on StackOverflow to know in-depth about the <code class="language-plaintext highlighter-rouge">gradlew</code> and the <code class="language-plaintext highlighter-rouge">gradle.bat</code> file.</p> </li> </ul> <p>Let’s move to the <code class="language-plaintext highlighter-rouge">app</code> folder now. This is where the source code of our app lives.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632139910393/1n9oXmT24.jpeg" alt="Screenshot 2021-09-20 172135.jpg"/></p> <p>The <code class="language-plaintext highlighter-rouge">libs</code> folder here would contain any external libraries you would import to the project. The <code class="language-plaintext highlighter-rouge">build</code> folder is the same, it contains generated files. The <code class="language-plaintext highlighter-rouge">proguard-rules.pro</code> file has configurations for ProGuard - which allows obfuscating code for an app.</p> <p>The <code class="language-plaintext highlighter-rouge">src</code> folder is the big deal. It contains all of your code files that define different pages(activities) in your app. All things related to the functioning of the app are contained inside this folder.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632321699792/96aiZUoGx.png" alt="Screenshot 2021-09-22 at 8.09.30 PM.png"/></p> <ul> <li>The <code class="language-plaintext highlighter-rouge">androidTest</code> folder contains tests written to test the user interface of the app. For example, Tests that validate if a screen opens properly in different scenarios.</li> <li>the <code class="language-plaintext highlighter-rouge">test</code> folder has test files to test general functions implemented in the app. For example, Tests that validate if a function that validates E-Mail formatting is working fine or not.</li> <li>Finally, the <code class="language-plaintext highlighter-rouge">main</code> folder contains the actual files that make up the app.</li> </ul> <p>We will know about testing in android apps in future articles :)</p> <p>Now, open the <code class="language-plaintext highlighter-rouge">main</code> folder. Here comes the interesting part. Don’t worry if the above things went over your head, this section will be understood by most of you because it’s intuitive.</p> <p>Now, you will be able to see three elements:</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632327366167/XuraJ03g0.png" alt="image.png"/></p> <p>We will start with the <code class="language-plaintext highlighter-rouge">AndroidManifest.xml</code> file. Consider this scenario, someone gives you a book but in an ambiguous way, they just pass you the pages, and the book isn’t bound altogether. Then, the pages and the chapters won’t make any sense to you, right?</p> <p>This is the same with Android Operating System. Let’s consider you made an app with multiple screens. The Android system doesn’t know the screens that your app contains and it can misunderstand them to other screens implemented in other apps. Now how does it know what all screens are a part of your app?</p> <p>Here comes the <code class="language-plaintext highlighter-rouge">AndroidManifest.xml</code> file into play. It is a structured file that lists all the activities that are a part of the app, and any other components that the app may contain, like implementations for background services that the app may utilize, the permissions that the app would use to give its full functionality or some other meta-data information.</p> <p>Now, I am sure it would be clear to you what <code class="language-plaintext highlighter-rouge">AndroidManifest.xml</code> file does. Now, hop into the <code class="language-plaintext highlighter-rouge">java</code> folder.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632328494066/T3uWJn4wF.png" alt="image.png"/></p> <p>It contains different packages with different files for anything you want to do. It can contain activity classes, utility classes for some functions that you want to reuse in the project again and again, for implementing data classes to store data, and basically anything that isn’t related to the user interface.</p> <p>The <code class="language-plaintext highlighter-rouge">xml</code> folder is where all the UI elements should be placed.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632328636033/7q5XnEdIC.png" alt="image.png"/></p> <ul> <li>The <code class="language-plaintext highlighter-rouge">drawable</code> folder should contain vector graphics that can be shown on the screen.</li> <li>The <code class="language-plaintext highlighter-rouge">layout</code> folder is the place where the screens are actually placed. It should contain the files that implement the user interface for different screens.</li> <li>The <code class="language-plaintext highlighter-rouge">mipmap</code> cluster of folders would contain non-scalable image assets. And if you are assuming that one has to define all the densities by themselves before importing them to Android Studio- then no, you are wrong 😂. Android Studio has an inbuilt feature that assists you to convert graphics to different densities.</li> <li>The <code class="language-plaintext highlighter-rouge">values</code> and <code class="language-plaintext highlighter-rouge">values-night</code> contain constant values in kind of a key-value format. You can access these values from the <code class="language-plaintext highlighter-rouge">java</code>/<code class="language-plaintext highlighter-rouge">kotlin</code> code at runtime by referencing the key. The <code class="language-plaintext highlighter-rouge">values</code> folder is used by android when the app is using a light theme, and the other one is automatically picked up if you turn to dark mode.</li> </ul> <h2 id="final-words">FiNaL WoRdS</h2> <p>Okay, so this was it to know how a really basic Android project is structured. Now, you can go and have a look at various <a href="https://github.com/topics/android">open source android projects</a> on GitHub. Try to remember what significance a file has in a project.</p> <p>You can also try to make projects in Android Studio using the starter templates and have a look into different things.</p> <p>I hope was able to explain to you how an Android project looks like. In future articles, we’ll get into further details by making simple apps and understanding the use of different things in an android app.</p> <p>Comment on this post if this was even a bit of help for you 🙌. It motivates me to keep writing and sharing useful things :)</p> <p>Happy Coding :)</p>]]></content><author><name>gouravkhunger</name></author><category term="android"/><category term="app-development"/><summary type="html"><![CDATA[A complete guide to understanding Android Studio basics and Android app structure.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1632128417570/zaxOSlbso.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1632128417570/zaxOSlbso.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How to create your first Android app using Android Studio?</title><link href="https://genicsblog.com/how-to-create-your-first-android-app-using-android-studio" rel="alternate" type="text/html" title="How to create your first Android app using Android Studio?"/><published>2021-09-16T00:00:00+00:00</published><updated>2021-09-16T00:00:00+00:00</updated><id>https://genicsblog.com/how-to-create-your-first-android-app-using-android-studio</id><content type="html" xml:base="https://genicsblog.com/how-to-create-your-first-android-app-using-android-studio"><![CDATA[<p>Hello there!</p> <p>This is the second article in the <a href="https://genicsblog.com/series/android-development">Android App Development For Beginner</a> series. If you have followed along with the previous article, then you will have Android Studio set up.</p> <p>I will continue this article from where the previous article ended, and by the end, we will be having a Hello World Android App ready!</p> <p>Let’s dig into it now!</p> <h2 id="create-a-new-project">Create a new project</h2> <p>We are now going to create the project, first open Android Studio and you will be presented with this screen.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631772463954/WoC110PBE.png" alt="Welcome to Android Studio Screen"/></p> <p>This is the latest Android Studio Arctic Fox <code class="language-plaintext highlighter-rouge">2020.3.1</code>. This might be different from the older post but yeah, the installation process remains the same.</p> <p>Once Android Studio is open, press the New Project button.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631772561088/aBJwhkyQ_.png" alt="New Project Button"/></p> <p>Pressing it will take you to the New Project window.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631731580840/3jpz5Ssw7.png" alt="New Project Window"/></p> <p>There, you will see a bunch of starter templates for Android Projects, like Basic Activity, Bottom Navigation, Tabbed Activity, etc.</p> <p>If the word Activity is strange to you, don’t be afraid. I will explain the concepts in the later articles, but for now, you can understand that an Activity is like a page in the app. Anything that you see in an app, that is, the page, is called an Activity.</p> <p>An app can have multiple activities with multiple widgets in them(called Views) that make the app functional. We will dig into the fundamentals of Android and practice them later, for now, you can go with the Empty Activity.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631732822722/J6Kp0MJqq.png" alt="Select Empty Activity From Prebuilt Templates"/></p> <p>Press the next button. Now you will be asked to give some information about the android app.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631733019453/GNXLb_Ode.png" alt="Give information to Android Studio about your app"/></p> <p>The information required is:</p> <h3 id="app-name">App Name</h3> <p>Give your app a suitable name. If you don’t wish to give it a name yet, don’t worry you can edit this later too.</p> <h3 id="package-name">Package Name</h3> <p>This is a unique identifier of your app. The package name is used by the android operating system to distinguish your app from other apps, and also by the google play store to identify different apps on their platform, no two different apps on the store or on an android device can have the same package name.</p> <p>Usually, companies give set the package name of their app by reversing their domain. Like:</p> <ul> <li>Google uses <code class="language-plaintext highlighter-rouge">com.google.android.&lt;identifier-of-app&gt;</code> for their apps.</li> <li>Whatsapp uses <code class="language-plaintext highlighter-rouge">com.whatsapp</code> as their Android app’s package name</li> <li>Discord uses <code class="language-plaintext highlighter-rouge">com.discord</code> as their app’s package name.</li> </ul> <p>In the same way, if you do have a domain name registered under your name, you can proceed to create a package name as explained above.</p> <p>Otherwise, you can use the same structure as I am using. Even though I own <code class="language-plaintext highlighter-rouge">genicsblog.com</code> and <code class="language-plaintext highlighter-rouge">gouravkhunger.xyz</code>, I prefer to use my GitHub URL as the package. Since we are making a hello world app here, I have kept the package name as <code class="language-plaintext highlighter-rouge">com.github.gouravkhunger.helloworld</code>.</p> <p>This identifier is more unique to you because your GitHub account will be used to host your personal projects so I prefer using it that way.</p> <p><strong>Quick Clarification</strong>: You don’t actually need to own the domain you put into the package name, and there will be no verification if you put another domain. But if you publish the project and later someone claims the domain, there can be conflicts so it’s better to use your own, or the way I used my GitHub username.</p> <h3 id="save-location">Save location</h3> <p>Android studio will store the project at this location - feel free to store it anywhere you like. The folder must not exist before as Android Studio will create it for you.</p> <h3 id="language">Language</h3> <p>I would prefer to use kotlin because it is the official language to create android apps. I expect you to know a bit of Java or any other object-oriented programming language like C++ because that would help you to adopt kotlin very easily.</p> <h3 id="minimum-sdk">Minimum SDK</h3> <p>This is the minimum Android version the app needs to run. It is required to specify it because there are certain things that don’t work in older versions of Android. So to ensure backward compatibility, you need to specify the minimum SDK so that all features work seamlessly on the devices.</p> <p>You can always change this field later, so you can choose API 23, which is Android 6.0 (Marshmellow), for now. From my past experience, this API level works with most of the libraries (pre-written code for android apps that makes development easier) and works on ~85% of the devices in the market.</p> <p>Now, you can hit the Finish button and Android Studio will set things up for you! Please wait for 2-3 minutes to let it build the project (depending on your hardware specifications it can take longer/shorter time).</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631734256571/QJ9wDuGId.png" alt="Finish button in New Project Window - Android Studio"/></p> <h2 id="run-the-hello-world-project">Run the Hello World project</h2> <p>Once the project is built, you will see the IDE window with two files open: <code class="language-plaintext highlighter-rouge">MainActivity.kt</code> and <code class="language-plaintext highlighter-rouge">acitvity_main.xml</code>. Actually, Android Studio puts in a simple hello world app when we select an Empty Activity, we will go into more details when subsequent articles get released in this series.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631773265969/Sq2JDNXFps.png" alt="Android Studio IDE Project Screen Image"/></p> <p><a href="https://genicsblog.com/beginning-android-development-with-android-studio#emulators-yes-or-no">In the last article</a>, I explained whether or not you should use emulators or not. In this article, I will run the app on my device but you can also use</p> <p>Now, you can enable USB debugging on your Android Device through developer options (I will write an article on it and link it here). Then connect your android device to your machine, and you will see that Android Studio shows the device name on the toolbar.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631774295972/kWzS5YgOC.png" alt="Connected Devices in Android Studio"/></p> <p>Press the green button beside the name of the device and Android Studio will build an APK and install it on your device. You might need to allow the installation from a pop-up dialog on your device if it is your first time while installing from android studio.</p> <p>Watch the below gif for the above steps in action.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631775449659/4y5k5NRlC.gif" alt="Build and run an Android app on a real device - Android Studio"/></p> <p>If you are wondering- I didn’t use any android emulators, as my laptop won’t be able to handle screen recording with Android Studio as well as an android emulator open. I have used a tool called <a href="https://github.com/Genymobile/scrcpy">scrcpy</a> to simulate my real android device’s screen to the laptop, any changes that occur on the device are reflected on the screen.</p> <p>It’s instant, so you can opt in to choose that way too if you wish to feel an emulator without really having an emulator.</p> <p><strong>CONGRATULATIONS</strong>!</p> <p>You have successfully built your first Hello World project and installed it on your device 😀.</p> <p>I hope you learned something new today! Make sure to subscribe to my newsletter (email field at the starting of this article) to never miss any article I post. New articles coming soon to this series!</p> <p>I would really appreciate it to know your views on this article. All kinds of feedback are welcome!</p> <p>Happy coding :)</p>]]></content><author><name>gouravkhunger</name></author><category term="android"/><category term="auth0"/><category term="authentication"/><category term="app-development"/><summary type="html"><![CDATA[The complete guide to learn how to create an app using Android Studio IDE.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1631777577034/9OA5pi8ph.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1631777577034/9OA5pi8ph.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">3 years of blogging - Here’s how it all started!</title><link href="https://genicsblog.com/3-years-of-blogging" rel="alternate" type="text/html" title="3 years of blogging - Here’s how it all started!"/><published>2021-09-14T00:00:00+00:00</published><updated>2021-09-14T00:00:00+00:00</updated><id>https://genicsblog.com/3-years-of-blogging</id><content type="html" xml:base="https://genicsblog.com/3-years-of-blogging"><![CDATA[<p>Hello there!</p> <p>I am really excited to share my journey in technical writing and how I got into it! First, I am really thankful to <a href="https://hashnode.com">hashnode</a> for providing us with an amazing <a href="https://hashnode.com/bootcamp">bootcamp</a>.</p> <p>Yesterday was the first session of the Bootcamp hosted by <a href="https://hashnode.com/@tanoaksam">Sam Sycamore</a>, where <a href="https://hashnode.com/@quincy">Quincy Larson</a> and <a href="https://hashnode.com/@didicodes">Edidiong Asikpo</a> shared amazing tips on technical writing which really helped a lot!</p> <p>Here in this article, I am going to share my background in technical writing - from where it started where it is heading towards and what is my vision. I would also include some tips at the end for you which I learned by hit and trial, the hard way 😂.</p> <h2 id="flashback-2018">Flashback 2018</h2> <p>I was in 8th grade back then, and I was trying to learn android app development from an amazing book by J. F. Dimarzio titled “<a href="https://amzn.to/3A93YMM">Beginning Android Programming with Android Studio</a>”.</p> <p><a href="https://amzn.to/3A93YMM"><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631599770243/LwI6JWpNE.jpeg" alt="Beginning Android Development with Android Studio Book"/></a></p> <p>I had also learned basic web dev skills like HTML and CSS. Javascript, or broadly, web dev didn’t appeal to me that much so I went to learn native app development. I didn’t know about frameworks like Vue or React back then, so that was it.</p> <p>At that time, I found out various resources and learned a lot of things from other’s blogs, but sometimes, though I could understand the concepts, it just happened that the article wasn’t that well written or it was hard to understand all by reading, and some struggle was needed. In short, it wasn’t that beginner-friendly.</p> <p>I would sometimes also want to document things I learn because teaching someone else makes your own concepts stronger, and that is more powerful than just reading and practicing.</p> <p>The above things were accompanied by my thoughts of having my own place on the internet where I could share things I love about, and have the world read them. And that’s how I started with blogging.</p> <p>At first, I came to know about blogger- Google’s service that allows you to make minimal blogs. It was actually a good start for beginners who wished to make a simple blog. <em>But</em>, it turned out it was not a good fit to make a developer blog.</p> <p>From there, I turned to many platforms, from blogger to WordPress, from WordPress to medium and dev community, but none could give the freedom of owning your own content- and having all the SEO juice to your own domain. That’s where hashnode came in and I quickly migrated and use it as my daily driver for blogging!</p> <p>And yeah, it has been 3 years since I started blogging and I have learned a lot through the way! From making an article enjoyable for the readers to improving my English- and even making good friends in the community. I also feel blessed to have the opportunity to help others through my articles!</p> <h2 id="my-motivation">My motivation</h2> <p>Everyone needs some motivation to keep doing a thing, and if they love what they do, the motivation manifests from the passion for the work itself!</p> <p>It’s similar in my case. I really enjoy programming and I can sit hours coding an app. I really love how what we code actually works in real life- designing the UI and embracing it.</p> <p>And this passion for programming motivates me to write about it on this blog. The comments and feedback from the community really help to keep up the spirit.</p> <p>Sometimes it’s hard to keep writing because there are other things to consider, like schooling and studies, but I do write when I am bored from other work because it gives refreshment from the usual routine!</p> <p>There are other ways I keep myself motivated- by challenging myself for each article I write, aiming for at least x views per post, and then sharing it to different platforms, it just feels good even if I get 100 views on an article and I feel it was worth my time.</p> <h2 id="my-goals">My goals</h2> <p>As far as this blog is concerned, I wish to take it up to 10k views a month, which is 10x to the current scenario. For that, I spend time on on-site and off-site SEO and my small efforts have started to make a difference.</p> <p>Here’s an image from the Google search console about this blog’s analytics for the past one and a half years.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631601870247/zyuBYbzn7.png" alt="Genics Blog Analytics From Google Search Console Image"/></p> <p>There used to be good traffic earlier because I wrote consistently when I was on WordPress, but then I had left blogging for some months, mostly because studies became dominant.</p> <p>But then I started again on hashnode, and I was happy to regain the impressions I generally used to get, all because of hashnode.</p> <p>Hashnode is really awesome platform because it allows you to post your content on your blog, but at the same time they circulate the article on their platform, so you’ll always have a base audience ready! And since the content remains on your domain, you get all the SEO benefits :)</p> <p><a href="https://hashnode.com/@gouravkhunger/joinme">Join hashnode now</a>!</p> <p>Also, on a side note, I am looking forward to learning some new technologies and write about them, so follow me on hashnode to stay updated with what I post.</p> <h2 id="some-tips-for-new-writers">Some tips for new writers</h2> <p>Now is the time to share some things I learned over time!</p> <h3 id="dont-fear-what-others-will-think-about-your-article">Don’t fear what others will think about your article</h3> <p>Many people face this! Even I used to be conscious about each word I wrote when I was new to blogging. But with different experiments, I found out the more informal you write a tutorial or any kind of article, the better it is perceived by people.</p> <p>It is hard to keep up with formal language- otherwise, what’s the need for blogs, documentations would have been enough for the people to understand things 😂.</p> <h3 id="avoid-slangs">Avoid slangs</h3> <p>The point just discussed doesn’t mean you should be using different internet slangs to make your article informal. That can actually put a bad impact.</p> <p>What I do is I speak what I am writing, just as if you are conversing with someone and explaining the tech you are writing about. That helps to write articles that are easy to understand and at the same time write articles that don’t bore the reader.</p> <p>Here’s another thing I usually do, and it was also shared by <a href="https://hashnode.com/@didicodes">Edidiong Asikpo</a> during the Bootcamp session yesterday:</p> <p>To improve your writing skills, you can try to write an article and read it as if you don’t even know who has written it, that helps to point out parts of the article that are hard to understand and also fix any grammatical issues, speaking of which, I recommend you to use <a href="https://grammarly.com">grammarly</a> 😀</p> <h3 id="its-ok-to-make-mistakes">It’s ok to make mistakes</h3> <p>Mistakes are how you learn things. Nobody is born perfect =)</p> <p>It’s ok if you can’t write good words, or if your English fluency is a hurdle, just start going with the flow, and over time, you’ll become better at the skill.</p> <h3 id="focus-on-a-niche-that-you-are-passionate-about">Focus on a niche that you are passionate about</h3> <p>It’s hard to come up with article ideas if you start writing about tech that you don’t enjoy. Find out what you like because that can help you stay consistent. Also, you yourself will enjoy the researching process when you wish to explore new things about the tech that you didn’t know.</p> <h3 id="keep-the-interaction-going">Keep the interaction going</h3> <p>You should try to reply to each comment your post gets, because that invokes interaction and builds trust around your blog, and if your blog is an active community- people are likely to come back to read your articles again!</p> <p>You can make an email newsletter too- that helps to regain users. You know what? Hashnode blogs get an email newsletter feature completely free! What are you waiting for? <a href="https://hashnode.com/@gouravkhunger/joinme">Join hashnode</a> and start blogging in minutes!</p> <p>Here’s one of my in-depth articles about some of the <a href="https://genicsblog.com/mistakes-that-beginners-do-in-blogging-dont-make-these-yourself">mistakes I had been making in blogging</a>, which you should stop making right away!</p> <h2 id="final-words">Final words</h2> <p>I hope you enjoyed the article and took away something from it - thanks for reading so far! I would appreciate it if you could take 5 more minutes to write down your opinions and feedback :)</p>]]></content><author><name>gouravkhunger</name></author><category term="blogging"/><category term="motivation"/><category term="tips"/><summary type="html"><![CDATA[I share my background in blogging, how it started 3 years ago, and some tips for you at the end :)]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1631596605889/xCcnwfFVk.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1631596605889/xCcnwfFVk.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How and when to override Android Activity’s Lifecycle methods?</title><link href="https://genicsblog.com/how-and-when-to-override-android-activity-lifecycle-methods" rel="alternate" type="text/html" title="How and when to override Android Activity’s Lifecycle methods?"/><published>2021-09-06T00:00:00+00:00</published><updated>2021-09-06T00:00:00+00:00</updated><id>https://genicsblog.com/how-and-when-to-override-android-activity-lifecycle-methods</id><content type="html" xml:base="https://genicsblog.com/how-and-when-to-override-android-activity-lifecycle-methods"><![CDATA[<p>Yesterday, I came across a <a href="https://stackoverflow.com/questions/69064102/how-can-i-stop-the-progressdialog-after-returning-to-the-activity">StackOverflow question</a>.</p> <p>The OP(original poster) of the question had a scenario like this:</p> <p>He made a <code class="language-plaintext highlighter-rouge">ProgressDialog</code> in an activity. After pressing a <code class="language-plaintext highlighter-rouge">CardView</code> in that activity corresponding to a meditation session, a <code class="language-plaintext highlighter-rouge">ProgressDialog</code> should appear for 3 seconds, and then the other activity would open - the <code class="language-plaintext highlighter-rouge">m1</code> activity.</p> <p>The problem he faced was - After returning to <code class="language-plaintext highlighter-rouge">MeditationActivity</code>, the <code class="language-plaintext highlighter-rouge">ProgressDialog</code> continued to show up and never stopped.</p> <p>He wanted that the progress dialog is closed once the user comes back from the <code class="language-plaintext highlighter-rouge">m1</code> activity to the <code class="language-plaintext highlighter-rouge">MeditationActivity</code>.</p> <p>Just after reading the question, it should strike to the mind that one can override the default methods present in an Activity’s Lifecycle and dismiss the dialog from there!</p> <p>Here’s how the lifecycle of an Android Activity looks like:</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630915330208/6F9zSmseW2.png" alt="activity_lifecycle.png"/></p> <p><em>This is an image from the official <a href="https://developer.android.com/guide/components/activities/activity-lifecycle">android documentation</a></em></p> <p>From the flowchart, we can see that it is the <code class="language-plaintext highlighter-rouge">onResume()</code> method that is called whenever a person comes back to the activity from another screen. So it seems to be the place where we should place the logic for dismissing the dialog!</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630915509631/Eq9kO4b_9.png" alt="activity_lifecycle.png"/></p> <p>Here’s how we can do that:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">(){</span>
    <span class="kd">super</span><span class="o">.</span><span class="na">onResume</span><span class="o">();</span>
    <span class="k">if</span><span class="o">(</span><span class="n">progressDialog</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">progressDialog</span><span class="o">.</span><span class="na">dismiss</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div> <p>The null check is placed because the <code class="language-plaintext highlighter-rouge">progressDialog</code> was initialized only when the person presses the <code class="language-plaintext highlighter-rouge">CardView</code>. And if it is initialized earlier, then there would be redundant dismissals of the <code class="language-plaintext highlighter-rouge">progressDialog</code>.</p> <p>This was a perfect example where we could override the default lifecycle methods provided by an Android <code class="language-plaintext highlighter-rouge">Activity</code> to perform actions pertaining to lifecycle.</p> <p><a href="https://stackoverflow.com/a/69064294/9819031">Here’s my answer</a> to the original question on StackOverflow! I’ll be writing more explanations to StackOverflow Questions, so consider following me on hashnode.</p> <p>I hope you find this article helpful :)</p>]]></content><author><name>gouravkhunger</name></author><category term="android"/><category term="app-development"/><category term="lifecycle"/><summary type="html"><![CDATA[Explanation of a StackOverflow question regarding an Android Activity's lifecycle]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1630916159630/gZuyRfFaz.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1630916159630/gZuyRfFaz.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Introducing JekyllEx - The easiest way to manage a Jekyll blog from an Android device!</title><link href="https://genicsblog.com/introducing-jekyllex-android-app" rel="alternate" type="text/html" title="Introducing JekyllEx - The easiest way to manage a Jekyll blog from an Android device!"/><published>2021-08-31T00:00:00+00:00</published><updated>2021-08-31T00:00:00+00:00</updated><id>https://genicsblog.com/introducing-jekyllex-android-app</id><content type="html" xml:base="https://genicsblog.com/introducing-jekyllex-android-app"><![CDATA[<p>Hello, awesome people!</p> <p>Today I present to you my latest project - <a href="https://jekyllex.xyz">JekyllEx</a>, which I have been working on for the <a href="https://townhall.hashnode.com/auth0-hackathon">Hashnode Auth0 August Hackathon</a>!</p> <h2 id="-detailed-background">🎊 Detailed Background</h2> <hr/> <p><strong>TLDR</strong>: I built JekyllEx because Jekyll(a static site generator) has a lot of potentials, but the learning curve for a non-tech-savvy person was high.</p> <p>To bridge the gap, I am presenting JekyllEx which can intuitively manage a Jekyll blog’s posts with a much simpler UI and effective editor- using which you don’t need to mess with code and commits for any article you write!</p> <hr/> <p>A few months ago, I got to learn about <a href="https://jekyllrb.com/">Jekyll</a>, which is a static site generator. In short:</p> <blockquote> <p>Jekyll is a simple, blog-aware, static site generator perfect for personal, project, or organization sites. Think of it like a file-based CMS, without all the complexity. Jekyll takes your content, renders Markdown and Liquid templates, and spits out a complete, static website ready to be served by Apache, Nginx, or another web server.</p> </blockquote> <p>This caught my attention in the first go as I am a blogging freak who has been <a href="https://genicsblog.com/introductory-first-post">testing different blogging solutions for a few years now</a> 😆.</p> <p>I used Jekyll in many places, testing things locally and then finally making <a href="https://samdisha.me" rel="dofollow">my sister’s blog</a> with it, and helped someone(can’t mention) to make a <a href="https://60wordsofwisdom.xyz">small blog</a> for him.</p> <p>It was just the fact that after initial setup, all we need to do for a new post is write markdown and let Jekyll do the further work… And, since it builds a static site, we can host it for free on Github Pages!</p> <p>This seems a good deal for someone, who doesn’t want to pay much amount for hosting and themes (if we consider WordPress and alternatives), and just want a minimal site for the content they want to put up.</p> <p>So, I went on to make the blog for my sister. But here comes the tricky part. Jekyll is actually hard for non-techy people. For, at least they must understand basic coding principles and some web dev to be able to understand what goes on in their Jekyll theme and posts.</p> <p>This was the birth of <strong>JekyllEx</strong>, a solution to a problem that isn’t solved because Jekyll hasn’t that vast of a community for it to have such solutions.</p> <blockquote> <p><strong>Jekyll is used by 0.1% of all the websites</strong> whose content management system we know. This is 0.1% of all websites.</p> <p>~ <a href="https://w3techs.com/technologies/details/cm-jekyll">w3techs.com</a></p> </blockquote> <p>I had the idea of making a blog manager app for Jekyll, partly because I hadn’t coded in a while because of my studies, and partly because my sister would eat my head if there’s any single typo in her blog post because I was the one who managed it 😆. I had to edit, preview, test, and commit for such small things which seemed tedious.</p> <p>I was just procrastinating making this cool project, but as soon as I heard about Auth0, and how easily they let integrating login functionality in an app, I was pretty sure I would be using it. And coincidently, Hashnode partnered with Auth0 to organize the august hackathon challenge and that provided the motivation to work on the project!</p> <p>JekyllEx wouldn’t be made such a short amount of time if Hashnode hadn’t partnered with Auth0 to present this hackathon. That’s because JekyllEx depends on Github API, and integration with GitHub is in turn provided by Auth0. JekyllEx, at its core, uses the GitHub API to manage jekyll repositories.</p> <p>To put things in a better structure, these were the points that lead me to make JekyllEx:</p> <ul> <li>My sister personally needed an intuitive manager app for her Jekyll blog, using which she can do things from her phone itself.</li> <li>I wanted to get my hands dirty on some project as I hadn’t coded for a while</li> <li>I also wanted to do something for this blog, as it had been inactive for some months because I couldn’t get the time to post anything 😅</li> <li>Hashnode’s august hackathon in partnership with Auth0 provided the zeal required to start a new project!</li> </ul> <hr/> <h2 id="-introducing-jekyllex">🚀 Introducing JekyllEx</h2> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630347657127/VGBAZJ7zN.png" alt="round_logo.png"/></p> <p>JekyllEx is the new way to write articles for a Jekyll blog. It is an android app using which you can create/edit/delete posts for the blog hosted at Github Pages.</p> <p>Download and install the <a href="https://github.com/jekyllex/jekyllex-android/releases/latest">latest release</a> of the app to start relishing the power of blogging from your mobile!</p> <p>Check out the demo video to know how to use JekyllEx!</p> <div class="mb-6 aspect-video"> <iframe src="https://www.youtube.com/embed/U92BmvFzmCc" class="w-full h-full rounded-xl" allowfullscreen="" loading="lazy"> </iframe> </div> <hr/> <h3 id="-some-handy-links">🔗 Some Handy Links:</h3> <p>Before the App tour, let me give you the links to different resources that revolve around JekyllEx and will be referred to, later in the post.</p> <h4 id="github-repositories">GitHub Repositories</h4> <p>Go smash a star on all of ‘em 😆. If not all, do star the app’s repository 😀</p> <ul> <li><a href="https://github.com/jekyllex">GitHub Organisation</a></li> <li><a href="https://github.com/jekyllex/jekyllex-android">JekyllEx Android App</a></li> <li><a href="https://github.com/jekyllex/jekyllex-api">Proxy API</a></li> <li><a href="https://github.com/gouravkhunger/demo-jekyll-blog">Demo Jekyll blog</a>(to test the app)</li> </ul> <h4 id="others">Others</h4> <ul> <li><a href="https://jekyllex.xyz">Landing Page</a></li> <li><a href="https://docs.jekyllex.xyz">Documentation</a> (under construction)</li> <li><a href="https://api.jekyllex.xyz">Hosted API</a></li> <li><a href="https://demo.jekyllex.xyz">Demo blog’s link</a></li> </ul> <hr/> <h2 id="-app-tour">🔎 App Tour</h2> <p>This section showcases the UI of the JekyllEx app.</p> <h3 id="authentication">Authentication</h3> <p>This is the auth page where the user must connect his GitHub account with JekyllEx to authorize the App to manage the blog repository.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630351766117/Q5GSw4BdA.png" alt="auth-page.png"/></p> <h3 id="home-page">Home Page</h3> <p>The home page of the app lists all your repositories on the home page, so you can choose the repository that has the Jekyll blog in it.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630351781213/6x7woWiw8.png" alt="home-page.png"/></p> <h3 id="posts-page">Posts Page</h3> <p>Clicking on any repository on the Home Page takes you to the Posts page. If the selected repository is a Jekyll blog, then the posts of the blog will be loaded, else an error will be shown that the repository isn’t a Jekyll project.</p> <p>Implementing the logic of loading posts from the <code class="language-plaintext highlighter-rouge">_posts</code> folder in the repository was a bit tricky, it took me around 1-2 hours to come up with a solution. More on this later in the post!</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630355745666/OuiVtnSgk.png" alt="posts-page.png"/></p> <h3 id="new-post">New Post</h3> <p>From the posts page, you can create a new post by pressing the icon on the top right representing “New Post”.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630355869755/bv7Unn3vJ.png" alt="new-post.png"/></p> <h3 id="the-editor">The Editor</h3> <p>This is the core page of the app where a user can edit and preview the markdown post being rendered live, and also set post metadata. Meta Data in a Jekyll post is a collection of some variables that define specifics about a post like its <code class="language-plaintext highlighter-rouge">Title</code>, <code class="language-plaintext highlighter-rouge">Description</code>, <code class="language-plaintext highlighter-rouge">Summary</code>…</p> <p>These fields are then used by the installed Jekyll theme to present the posts in the rendered HTML accordingly…</p> <p>The Editor has two tabs- the <strong>EDIT FILE</strong> tab and the <strong>PREVIEW CHANGES</strong> tab. As the text is entered in the editing pane, it gets auto rendered on the preview pane live.</p> <p>Another feature of the editor is synchronized scrolling, that is, as soon as one scrolls down in the editing pane, the preview pane scrolls by the same unit so that the editor and the preview show pretty much the same thing and provide a seamless experience of editing.</p> <p>This is really helpful if the post file is large and the sections that are to be edited are far away, in such scenarios, synchronized scrolling helps a lot.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630355928541/fYHl0Gzkr.png" alt="editing-page.png"/></p> <h3 id="profile-page">Profile Page</h3> <p>The app has a cool profile page that shows user information that it receives from the GitHub API. Once the data is fetched, it is cached and saved to a local room database. But the user can force refresh the profile from the menu too.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630355109995/TcAVSCdzsQ.png" alt="profile-page.png"/></p> <h3 id="some-other-sections">Some other sections</h3> <p>These are some of the things that were left in the above images, so included aside:</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630356234366/bxtpJ84ko.png" alt="other.png"/></p> <hr/> <h2 id="-technical-details">🛠 Technical Details</h2> <p>The codebase of the app is based on the MVVM pattern. Here’s a list of tools/libraries/components JekyllEx uses:</p> <h3 id="frontend">Frontend</h3> <h4 id="platform">Platform</h4> <ul> <li>Android</li> </ul> <h4 id="languages-used">Languages Used</h4> <ul> <li>Kotlin</li> <li>XML</li> </ul> <h4 id="libraries">Libraries</h4> <ul> <li>Android Architecture Components</li> <li><a href="https://auth0.com/">Auth0</a> : For user authentication</li> <li><a href="https://github.com/square/retrofit">Retrofit</a> : For network requests</li> <li><a href="https://developer.android.com/training/data-storage/room">Room</a> : For local database and caching user profile</li> <li>Kotlin extensions and Coroutines for Room</li> <li><a href="https://github.com/noties/Markwon">Markwon</a> : Markdown rendering</li> <li><a href="https://github.com/javiersantos/AppUpdater">App Updater</a> : To check for updates from GitHub Releases</li> <li><a href="https://github.com/bumptech/glide">Glide</a> : For image loading.</li> <li><a href="https://firebase.google.com/">Firebase</a> : For push notifications, analytics and crashlytics.</li> </ul> <p>I used <a href="https://plugins.jetbrains.com/plugin/15057-ktlint-unofficial-">the unofficial <code class="language-plaintext highlighter-rouge">ktlint</code> plugin</a> for linting the code files locally, and used <a href="https://github.com/github/super-linter">GitHub super linter</a> as a second lint test for the code files. The super linter also lints XML files.</p> <h4 id="mad-score">M.A.D. Score</h4> <p>JekyllEx has a <a href="https://goo.gle/MADscore">M.A.D.</a> score of MAD legend, the Greatest Of All Time of Android development.</p> <p>Check out the <a href="https://madscorecard.withgoogle.com/scorecards/878880162/">score card</a>.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630400803535/RMu_MMtyW.png" alt="summary.png"/></p> <h3 id="backend">Backend</h3> <p>Language: <strong>JavaScript</strong></p> <p>JekyllEx uses a proxy API to securely retrieve user information from Auth0 Management API <a href="https://auth0.com/docs/connections/calling-an-external-idp-api#from-the-frontend">as recommended in the Auth0 docs</a>.</p> <p>The API is built using express and is hosted on Heroku.</p> <h3 id="️-license">🛡️ License</h3> <p>This project is <a href="https://github.com/jekyllex/jekyllex-android/blob/main/LICENSE"><code class="language-plaintext highlighter-rouge">MIT</code></a> licensed.</p> <hr/> <h2 id="-development-journey">👨🏻‍💻 Development Journey</h2> <p>Developing JekyllEx was a lot of fun because it involved learning new things!</p> <p>I completed most of the UI in 3 days, then took some time to figure out the Proxy API thing. It was completely new for me so I had to struggle a bit for 2 days to understand how Express APIs work.</p> <p>Then I made the different features by integrating GitHub API. Authorization was effortlessly handled by Auth0! I used the Retrofit library to do all the networking stuff like API calls, handling responses, etc.</p> <p>I quickly made a <a href="https://demo.jekyllex.xyz">demo blog</a> with a minimal theme and tested features of JekyllEx once it was done.</p> <h2 id="-challenges">😎 Challenges</h2> <h3 id="making-the-proxy-api">Making the Proxy API</h3> <p>The biggest challenge I faced during development was building the proxy API, which was needed to securely retrieve user credentials.</p> <p>I had to look through a lot of articles to understand how Node.js works and how would I get my API to work.</p> <p>With considerable theoretical help from @<a href="@SamJakob">SamJakob</a>, I got clarity and could proceed to start developing the API.</p> <p>To get user profiles from Auth0 Management API, we first get an access token that can be used to retrieve the profile.</p> <p>I use this snippet to refresh the Auth0 access token periodically:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Function to renew Auth0 Management API access token</span>
<span class="kd">function</span> <span class="nx">getAccessToken</span><span class="p">()</span> <span class="p">{</span>

  <span class="c1">// time after which token must be refreshed, It will be updated later</span>
  <span class="nx">refreshAfter</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

  <span class="c1">// required parameter to pass to Auth0 Management API OAuth</span>
  <span class="kd">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
    <span class="dl">"</span><span class="s2">client_id</span><span class="dl">"</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">CLIENT_ID</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">client_secret</span><span class="dl">"</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">CLIENT_SECRET</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">audience</span><span class="dl">"</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AUTH0_AUDIENCE</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">grant_type</span><span class="dl">"</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">GRANT_TYPE</span>
  <span class="p">});</span>

  <span class="c1">// axios request to get the access token</span>
  <span class="nx">axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">`https://</span><span class="p">${</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AUTH0_DOMAIN</span><span class="p">}</span><span class="s2">/oauth/token`</span><span class="p">,</span> <span class="nx">body</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
      <span class="c1">// Overwrite Axios' automatically set Content-Type</span>
      <span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span>
    <span class="p">}</span>
  <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// get the access token</span>
    <span class="nx">accessToken</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">access_token</span><span class="p">;</span>

    <span class="c1">// token must refresh every 10 minutes before the expiration time</span>
    <span class="nx">refreshAfter</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">expires_in</span> <span class="o">-</span> <span class="mi">600</span><span class="p">;</span>

    <span class="c1">// refresh the token</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">getAccessToken</span><span class="p">,</span> <span class="p">(</span><span class="nx">refreshAfter</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">));</span>
  <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">accessToken</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="c1">// execute the function for the first time</span>
<span class="nx">getAccessToken</span><span class="p">();</span>
</code></pre></div></div> <p>This refreshes the Auth0 Management API access token 10 minutes before it expires. This token can be used to query the API to get details of a specific user.</p> <h3 id="getting-files-from-the-_posts-folder">Getting files from the <code class="language-plaintext highlighter-rouge">_posts</code> folder</h3> <p>It feels good to give yourself a pat on the shoulders when you do something good, and that also boosts your motivation to strive and do better than ever. I felt this when making the logic for retrieving all the files under the <code class="language-plaintext highlighter-rouge">_post</code> folder(Jekyll blogs need a <code class="language-plaintext highlighter-rouge">_post</code> folder with <code class="language-plaintext highlighter-rouge">md</code> files)</p> <p>When we query for items at a particular path in a repository, the GitHub API returns a list of items present there.</p> <p>So it seems simple that the files will be there in the <code class="language-plaintext highlighter-rouge">_posts</code> folder and we can query the content present there from the API and show the posts to the user.</p> <p>But this is not the case. The thing is, Jekyll looks for markdown files in the _posts folder on nested folders too. That means if someone has a file at the following path:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>_posts/android/2021-08-29-introduction-to-android.md
</code></pre></div></div> <p>that will also be considered a valid post, even though it is in the <code class="language-plaintext highlighter-rouge">android</code> subdirectory. So to solve this problem, we could query the GitHub API recursively, as we get the path of a folder when it is returned from the API.</p> <p>Here’s a snippet of how I am achieving this:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Function to get the content of the repository at a specific path inside it.</span>
<span class="k">fun</span> <span class="nf">getContentFromPath</span><span class="p">(</span>
    <span class="n">shouldPost</span><span class="p">:</span> <span class="nc">Boolean</span><span class="p">,</span>
    <span class="n">repoName</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
    <span class="n">path</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
    <span class="n">accessToken</span><span class="p">:</span> <span class="nc">String</span>
<span class="p">):</span> <span class="nc">ArrayList</span><span class="p">&lt;</span><span class="nc">RepoContentItemModel</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">postsArray</span> <span class="p">=</span> <span class="n">arrayListOf</span><span class="p">&lt;</span><span class="nc">RepoContentItemModel</span><span class="p">&gt;()</span>
    <span class="nf">runBlocking</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">response</span> <span class="p">=</span> <span class="n">repository</span><span class="p">.</span><span class="nf">getRepoContent</span><span class="p">(</span><span class="n">repoName</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">accessToken</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">isSuccessful</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">()</span><span class="o">!!</span><span class="p">.</span><span class="nf">forEach</span> <span class="p">{</span>
                <span class="k">when</span> <span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">type</span><span class="p">)</span> <span class="p">{</span>
                    <span class="s">"file"</span> <span class="p">-&gt;</span> <span class="n">postsArray</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
                    <span class="s">"dir"</span> <span class="p">-&gt;</span> <span class="p">{</span>
                        <span class="kd">val</span> <span class="py">nextLevel</span> <span class="p">=</span> <span class="nf">getContentFromPath</span><span class="p">(</span><span class="k">false</span><span class="p">,</span> <span class="n">repoName</span><span class="p">,</span> <span class="n">it</span><span class="p">.</span><span class="n">path</span><span class="p">,</span> <span class="n">accessToken</span><span class="p">)</span>
                        <span class="n">postsArray</span><span class="p">.</span><span class="nf">addAll</span><span class="p">(</span><span class="n">nextLevel</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">shouldPost</span><span class="p">)</span> <span class="n">posts</span><span class="p">.</span><span class="nf">postValue</span><span class="p">(</span><span class="n">postsArray</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">hasPosts</span><span class="p">.</span><span class="nf">postValue</span><span class="p">(</span><span class="k">false</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">postsArray</span>
<span class="p">}</span>
</code></pre></div></div> <p>What this code does is, it takes some parameters such as <code class="language-plaintext highlighter-rouge">repoName</code> and <code class="language-plaintext highlighter-rouge">path</code> to query for the content at the path in the provided repository. The <code class="language-plaintext highlighter-rouge">shouldPost</code> variable dictates whether all the folders have been checked or not. Once all the folders have been queried, then it returns the array of posts, else it keeps on querying for folders sequentially- one level at a time.</p> <p>Notice <code class="language-plaintext highlighter-rouge">runBlocking</code>, it is used to carry out the tasks defined in the block, on the main thread, because if the folders are queried from the coroutines(that carry out code asynchronously), then there can be errors when the posts are returned by GitHub API, consider this case:</p> <p>There are two folders- both are queried from separate threads, the problem here is, suppose the API didn’t return content for the first folder but returned content for the second folder faster than the first one, now since there are only 2 folders, the function would return the posts array as all folders have been marked as queried…</p> <p>And if by chance the API returns content for the second folder, this could lead to a crash, as the posts folder has already been returned. Also, if not a crash, this could lead to missing posts.</p> <h3 id="synchronizing-editor-with-the-preview-tab">Synchronizing Editor With the Preview Tab</h3> <p>The idea of synchronizing came to me when I once edited a markdown file in visual studio code, there was a markdown plugin that actually scrolled the preview by the same distance as the editing screen would.</p> <p>So I thought of implementing it in JekyllEx too, as that would be a really handy feature.</p> <p><code class="language-plaintext highlighter-rouge">MutableLiveData</code>, when used in a <code class="language-plaintext highlighter-rouge">ViewModel</code> easily, allows emitting data that can be observed from Activities/Fragments. I used it to store the scroll distance as soon as the user scrolls inside the Editing tab, and it was observed by the Preview Fragment and was configured to set the scroll of the preview the same.</p> <h4 id="editorviewmodelkt"><code class="language-plaintext highlighter-rouge">EditorViewModel.kt</code></h4> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// other stuff...</span>

<span class="c1">// Observable live data variables.</span>
<span class="kd">val</span> <span class="py">scrollDist</span><span class="p">:</span> <span class="nc">MutableLiveData</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">&gt;</span> <span class="k">by</span> <span class="nf">lazy</span> <span class="p">{</span> <span class="nc">MutableLiveData</span><span class="p">()</span> <span class="p">}</span>
<span class="c1">// other variables</span>

<span class="c1">// Function to set the Scroll View scroll distance.</span>
<span class="k">fun</span> <span class="nf">setScrollDist</span><span class="p">(</span><span class="n">newDist</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">scrollDist</span><span class="p">.</span><span class="nf">postValue</span><span class="p">(</span><span class="n">newDist</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// other stuff...</span>
</code></pre></div></div> <h4 id="editingfragmentkt"><code class="language-plaintext highlighter-rouge">EditingFragment.kt</code></h4> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// other stuff...</span>

<span class="c1">// Synchronize scroll distance with the preview tab.</span>
<span class="n">editorBinding</span><span class="p">.</span><span class="n">editorScrollView</span><span class="p">.</span><span class="nf">setOnScrollChangeListener</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">scrollY</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="p">-&gt;</span>
    <span class="n">viewModel</span><span class="p">.</span><span class="nf">setScrollDist</span><span class="p">(</span><span class="n">scrollY</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// other stuff...</span>
</code></pre></div></div> <h4 id="previewfragmentkt"><code class="language-plaintext highlighter-rouge">PreviewFragment.kt</code></h4> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// other stuff...</span>

<span class="c1">// Observe the scroll dist of the editor area and scroll to that distance.</span>
<span class="n">viewModel</span><span class="p">.</span><span class="n">scrollDist</span><span class="p">.</span><span class="nf">observe</span><span class="p">(</span><span class="n">viewLifecycleOwner</span><span class="p">,</span> <span class="p">{</span>
    <span class="n">previewBinding</span><span class="p">.</span><span class="n">previewScrollView</span><span class="p">.</span><span class="nf">smoothScrollTo</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">it</span><span class="p">)</span>
<span class="p">})</span>

<span class="c1">// other stuff...</span>
</code></pre></div></div> <p>The same logic was used for text, as soon as text would be edited, it will be observed by the Preview Fragment and set the rendered markdown.</p> <hr/> <h2 id="-roadmap">🔥 Roadmap</h2> <p>JekyllEx solves the major problem of managing posts. But there exists another problem, one can manage their blog from JekyllEx, but how could they make the Jekyll blog in the first place?</p> <p>Well, this is a major feature and it could bring a great change in how Jekyll Blogs are made, transforming from the traditional coding style, migrating to mobile devices. Then everyone could relish the power of Jekyll. Still, in the end, Jekyll remains only for those who don’t wish to have big features on their site and want to keep their hosting bills low, but still want the flexibility to be able to change every single bit of their blog.</p> <p>On a side note: For those who want to have an awesome newsletter, custom CSS and complete ownership of their blog for free, and still don’t want to mess up with code, Hashnode is a really great fit for them! <a href="https://hashnode.com/@gouravkhunger/joinme">Go sign up now</a> and start blogging in minutes.</p> <p>Here’s a list of features I am planning to add to JekyllEx in the future:</p> <ul> <li>Add functionality to make a blog using open-source Jekyll Themes directly from the app.</li> <li>Add feature to edit pages too.</li> <li>Add the “Continue where you left off” feature.</li> <li>Add syntax highlighting to the markdown editor.</li> <li>Improve the Meta Data editor to a more intuitive chip-based editor rather than a text box.</li> <li>Allow editing <code class="language-plaintext highlighter-rouge">config.yml</code> file from the App.</li> <li>Save deleted posts to local DB to act as a restore point if deleted in error.</li> <li><strong>If possible</strong>, make a section to share your article with other JekyllEx users, like a community sort of thing.</li> </ul> <hr/> <h2 id="-real-usage">💡 Real Usage</h2> <p>JekyllEx is already being used to manage:</p> <ul> <li><a href="https://samdisha.me" rel="dofollow">The personal blog of my sister</a></li> <li><a href="https://60wordsofwisdom.xyz">60 w.o.w blog</a></li> </ul> <p>If you use JekyllEx <s>and want to get some backlinks and referral</s>, you can get listed here by comment your experience with using JekyllEx and providing a link to your blog!</p> <hr/> <h2 id="-final-words">😊 Final Words</h2> <p>On an ending note, I would say making JekyllEx for this hackathon was extremely fun. I couldn’t have put myself to learn more new things if I would have procrastinated more. I also made really good new friends on the hashnode server.</p> <p>I would really appreciate it if you could take a moment and comment on your views on my project! Also, react to the post to spread some love :)</p> <p>All kinds of feedbacks are welcome 😄</p> <hr/> <h2 id="-connect-with-me">🌏 Connect with me!</h2> <ul> <li>Hashnode: <a href="https://hashnode.com/@gouravkhunger"><code class="language-plaintext highlighter-rouge">@gourav_khunger</code></a></li> <li>StackOverflow: <a href="https://stackoverflow.com/users/9819031"><code class="language-plaintext highlighter-rouge">Gourav</code></a></li> <li>Twitter: <a href="https://twitter.com/gourav_khunger"><code class="language-plaintext highlighter-rouge">@gourav_khunger</code></a></li> <li>Instagram: <a href="https://instagram.com/"><code class="language-plaintext highlighter-rouge">@_gourav.khunger_</code></a></li> <li>Youtube: <a href="https://www.youtube.com/channel/UCkv-J_D8jK2N02nBcyM92mQ"><code class="language-plaintext highlighter-rouge">Gourav Khunger</code></a></li> <li>Discord: <code class="language-plaintext highlighter-rouge">gourav#2215</code></li> </ul>]]></content><author><name>gouravkhunger</name></author><category term="android"/><category term="open-source"/><category term="apps"/><category term="jekyll"/><summary type="html"><![CDATA[A project I made for the Hashnode x Auth0 August Hackathon.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://raw.githubusercontent.com/jekyllex/jekyllex-android/main/media/cover-image.png"/><media:content medium="image" url="https://raw.githubusercontent.com/jekyllex/jekyllex-android/main/media/cover-image.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Introducing Quotes App</title><link href="https://genicsblog.com/introducing-quotes-app" rel="alternate" type="text/html" title="Introducing Quotes App"/><published>2021-05-23T00:00:00+00:00</published><updated>2021-05-23T00:00:00+00:00</updated><id>https://genicsblog.com/introducing-quotes-app</id><content type="html" xml:base="https://genicsblog.com/introducing-quotes-app"><![CDATA[<p>Hi everyone, how are y’all doing 😃</p> <p>It’s been a long time since I published my last blog post and all that is because it was getting difficult to manage studies and blogging. But in the meantime, I have been working on a really awesome project and this article is all about explaining that ✨</p> <h1 id="introducing-quotes-app-">Introducing Quotes App 🚀</h1> <h3 id="background">Background</h3> <p>If you ever read even one of my android articles, you will definitely be knowing I used Java to make android apps.</p> <p>And, as we all know Google is going on to promote Kotlin at its level best and encouraging developers to use Kotlin to develop android apps, I too was thinking for a long time of migrating to Kotlin as soon as possible.</p> <p>Also, a lot of open-source projects and articles on the internet about android development, these days are based on Kotlin and require you to understand Kotlin! So it was high time for me too to adopt Kotlin and get my hands dirty over it.</p> <p>If you too ever thought of starting to learn a new language from scratch, you definitely know how difficult it seems at first, to pick a new topic and start learning it by researching over the internet. And the same happened to me!</p> <p>But my learning process of Kotlin is a talk of another article, I will surely write articles about it and update this one to include them.</p> <p>So, after learning Kotlin, the thing I had left out was, I had not implemented things I learned in a project and I would say that’s a massive mistake that beginners make. It’s important to try out stuff in the real world if we wish to get good in any field!</p> <h3 id="idea">Idea</h3> <p>As soon I was done with learning modern tools and concepts about android development, like the MVVM pattern(I did not use it much before learning Kotlin), Room Database library, ViewModels, LiveData, and trying few things here and there, I had an idea of integrating all the things I learned into a single android app.</p> <p>I really wished to make something useful out of what I learned and not just implement any 3rd world demo app that does nothing.</p> <p>And hence it had to lead me to think about making a Quotes App 🎉. The concept of the app is really simple.</p> <p>I thought of having just two screens in the app, one for viewing the current quote and the other for viewing all the saved quotes of the user.</p> <p>On the quotes page, there would be a card that would show the currently loaded quote and the author of the quote. There would be a button on the bottom of the page to bookmark, or in other words, save the current quote. Look below in the design section to see the design I took inspiration from.</p> <p>The second page would be about showing the bookmarked quotes to the user. There we can long-press the quotes to copy them to the clipboard, and swipe them to delete them from our collection. Also, we can undo the action if the quote was deleted in error and it will get back into place.</p> <h3 id="design">Design</h3> <p>I thought over the designing aspect a lot, but since I am not that much interested in designing as I am fascinated with programming, I wished to focus on the coding part more than the design part.</p> <p>Hence, I looked over the internet for some design inspirations and ideas, I ended up with this image, and most of the design inspiration is taken from it, though not completely, but the major look and feel is derived from it.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1621707289953/fIkD18DZu.jpeg" alt="app-design-idea.jpg"/></p> <p>This design looked great to me and I made up my mind to use it as a reference while designing the whole UI</p> <h3 id="development">Development</h3> <p>It took me just 2 days to get working with a working base model of the app. I had done implementing Retrofit, Room Database, Recycler View, Navigation, and pretty much everything the basic version of the app would need.</p> <p>I have used the <a href="https://zenquotes.io/">ZenQuotes API</a> to load quotes into the app. Huge thanks to them for making such a quality API for free usage!!</p> <p>As of now, here’s a list of tools and frameworks this app uses:</p> <ul> <li>Material Design</li> <li>Android LifeCycle Components</li> <li>Room Database Library</li> <li>Kotlin Extensions and Coroutines</li> <li>Retrofit Library</li> <li>Android Navigation Components</li> </ul> <p>All the code for this app is hosted on <a href="https://github.com/GouravKhunger/QuotesApp">this Github repository</a>.</p> <p>Feel free to clone the repository and add new amazing features that you have in your mind 🙂</p> <p>Also, Don’t forget to smash the star button and show some love!</p> <h3 id="end-result">End result</h3> <p>Here’s a demo video showing all the features of the app:</p> <div class="mb-6 aspect-video"> <iframe src="https://www.youtube.com/embed/9Kl6WDmTK8g" class="w-full h-full rounded-xl" allowfullscreen="" loading="lazy"> </iframe> </div> <h1 id="final-thoughts">Final thoughts</h1> <p>It was an overall fun experience implementing all the new things I learned while diving even deeper into Android development.</p> <p>I learned a lot of new concepts along the way, also coming up with errors here and there and failing while learning Kotlin, but the quotes themselves from my app kept me motivated to continue the learning process 😇</p> <p>Please <a href="https://github.com/GouravKhunger/QuotesApp/releases/latest">download the latest <code class="language-plaintext highlighter-rouge">apk</code> file</a>, install it on your device, and provide feedback about what you think about the app 🔥</p> <p>I hope you would love the app as well as the article, thanks a lot for reading this far 😊</p>]]></content><author><name>gouravkhunger</name></author><category term="android"/><category term="open-source"/><category term="apps"/><summary type="html"><![CDATA[An Open Source Quotes App made by Gourav Khunger. The app is open source and uses zenquotes' API to fetch quotes]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1621705813818/nq9ltm2ud.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1621705813818/nq9ltm2ud.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry></feed>