<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://genicsblog.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://genicsblog.com/" rel="alternate" type="text/html"/><updated>2022-02-11T14:47:02+00:00</updated><id>https://genicsblog.com/feed.xml</id><title type="html">Genics Blog</title><subtitle>An open source developer publication aimed at sharing well explained tutorials on various topics for the developer community.</subtitle><entry><title type="html">Genics Log #1: Sponsorship from BeyondWords, Open Source, Organic Stats and more</title><link href="https://genicsblog.com/genics-log-1" rel="alternate" type="text/html" title="Genics Log #1: Sponsorship from BeyondWords, Open Source, Organic Stats and more"/><published>2022-02-10T00:00:00+00:00</published><updated>2022-02-10T00:00:00+00:00</updated><id>https://genicsblog.com/genics-log-1</id><content type="html" xml:base="https://genicsblog.com/genics-log-1"><![CDATA[<p>Hello there, I hope you are doing well!</p> <p>This is the first article in the <a href="/category/genics-log">Genics log</a> series where we will be documenting our monthly progress on the blog and report what’s been brewing up in the past months.</p> <p>Before diving into the latest news at Genics, I would like to introduce myself. I am <a href="/contributor/gouravkhunger">Gourav Khunger</a>, the founder of <a href="/">Genics Blog</a>. I am a teenager from India who is passionate about software development and <a href="/tag/open-source/">open source</a>.</p> <p>Let’s get started!</p> <h1 id="introduction">Introduction</h1> <p>Genics Blog went <a href="https://github.com/genicsblog">open-source</a> at this New Year, which means we started accepting community contributions for the blog.</p> <p>Within a month itself, we have reached huge milestones! Here’s a gist of some stats from the past month:</p> <ul> <li>The <strong>Core team</strong> members increased from <strong>1 to 5 members</strong>!</li> <li>A total of <strong>15 articles</strong> were posted in January!</li> <li>A total of <strong>40 members</strong> joined the <a href="https://discord.genicsblog.com">Genics Blog discord server</a>!</li> <li>Rose from <strong>200 monthly visitors to 500+</strong>!</li> </ul> <h1 id="how-it-all-started">How it all started</h1> <p>I always wanted to create a community of skilled developers who create quality content around topics!</p> <p>As the new year began, I grabbed the opportunity to open source my <a href="https://blog.gouravkhunger.xyz">existing blog</a> and build a community around the existing content.</p> <p>And since we chose the open source way, we quickly rose from 200 visitors/month to 500+ visitors/month!</p> <h1 id="open-source-setup">Open Source Setup</h1> <p>We use <a href="https://github.com">GitHub</a> for our open source projects. Everything we build around Genics is open source because we want to be as transparent as we can!</p> <p>For this blog, we used <a href="https://jekyllrb.com">Jekyll</a> to generate the website and render all the content. The beauty of Jekyll is we can use any design template, while writing the articles in markdown format. It renders the complete site with an easy build command!</p> <p><a href="https://pages.github.com">GitHub Pages</a> works really well for hosting the website, because jekyll generates static html pages which work seamlessly with GitHub Pages.</p> <p>There’s a lot more to share on how the site and management works. I’d love to write articles on how we build and operate our systems completely for <strong>FREE</strong>, so keep an eye out on the <a href="https://docs.genicsblog.com/developer">developer documentation</a> and future posts on Genics blog!</p> <h1 id="announcing-beyondwordsio-sponsorship">Announcing BeyondWords.io Sponsorship</h1> <p>Just a few days ago we got sponsored by <a href="https://beyondwords.io/?utm_source=genicsblog.com&amp;utm_medium=cpc&amp;utm_campaign=advertisement" rel="dofollow">BeyondWords.io</a>!</p> <blockquote> <p>BeyondWords is an AI voice and audio publishing platform that brings frictionless audio to writers, newsrooms, and businesses!</p> </blockquote> <p>It is a platform that allows anyone to publish their written scripts in audio format to the world. In my opinion, the best part about is its text to speech AI conversion modules are far better than those of Google and Amazon as the audio it generates seems to be near human voice!</p> <p><a href="/">Genics Blog</a> got sponsored by <a href="https://beyondwords.io">BeyondWords</a> where they generously offered us free services to convert our articles to audio formats! You can try out the audio functionality right at the top of this post!</p> <h1 id="stats">Stats</h1> <p>We have grown manifolds just because of the fact that we went open source!</p> <h2 id="open-source">Open Source</h2> <p>Here are the stats for the repositories under <a href="https:/github.com/genicsblog">Genics Blog</a> organization:</p> <ul> <li><a href="https://github.com/genicsblog/genicsblog.com"><code class="language-plaintext highlighter-rouge">genicsblog.com</code></a> (Main repo with posts and data files): <strong>21 stars</strong>, <strong>14 forks</strong></li> <li><a href="https://github.com/genicsblog/theme-files"><code class="language-plaintext highlighter-rouge">theme-files</code></a> (Basically template files): <strong>2 stars</strong>, <strong>1 fork</strong></li> <li><a href="https://github.com/genicsblog/docs"><code class="language-plaintext highlighter-rouge">docs</code></a> (<a href="https://docs.genicsblog.com">Documentation website</a>): <strong>3 stars</strong>, <strong>2 forks</strong></li> <li><a href="https://github.com/genicsblog/genics-bot"><code class="language-plaintext highlighter-rouge">genics-bot</code></a> (Bot for the <a href="https://discord.genicsblog.com">Discord server</a>): <strong>5 star</strong>, <strong>1 fork</strong></li> </ul> <h2 id="google-analytics">Google Analytics</h2> <p>Images speak louder than words!</p> <p><img src="https://user-images.githubusercontent.com/46792249/153484864-a8bf7f54-03aa-4f30-95d8-7f94e2e94949.png" alt="Genics blog's past 30 days Google Analytics Stats"/></p> <h2 id="organic-stats">Organic Stats</h2> <p><img src="https://user-images.githubusercontent.com/46792249/153484772-c2a0a786-0826-4771-85a8-c70f55dcb719.png" alt="Genics blog's past 30 days Google Search Console Stats"/></p> <h1 id="future-plans">Future Plans</h1> <p>We are looking forward to producing a lot of quality content in the future, as well as working on improving the platform.</p> <p>Here are a few examples of some things we’d work on in the near future:</p> <ul> <li>Building certain tools to aid the writing process for authors at Genics Blog.</li> <li>Adding table of content to the posts.</li> <li>Social previews for anchor tags in posts.</li> <li>Copy buttons for code blocks.</li> <li>Adding some cool webmention functionality to our articles, so as to highlight who shares our articles.</li> </ul> <p>And a lot more!</p> <p>You can check out the issues page on <a href="https://github.com/genicsblog/theme-files/issues"><code class="language-plaintext highlighter-rouge">theme-files</code></a> repo to see what’s on the roadmap.</p> <h1 id="final-words">Final Words</h1> <p>I’m really glad to be sharing this info with you!</p> <p>Did you know we have a discord bot that sends notifications on our analytics and stats everyday 👀. I bet you, hardly anyone would do that :P</p> <p><img src="https://user-images.githubusercontent.com/46792249/153487310-2dcd5854-4de9-47fa-a679-09a917d8564f.png" alt="Genics Blog's Discord Community Bot logging stats from Google Analytics everyday"/></p> <p>Do join us there to get notified of new posts and updates on Genics Blog.</p> <p>If you find what we are doing as high school students fascinating, consider joining us and be a part of Genics Blog! <a href="/contribute">Here</a> are the ways you could contribute to it.</p> <p>Looking forward to seeing you engage with the active community on our <a href="https://discord.genicsblog.com">Discord server</a> :)</p>]]></content><author><name>gouravkhunger</name></author><category term="genics-log"/><summary type="html"><![CDATA[Here's the issue #1 in the Genics log series containing all the latest news and updates on our blog's past month of January!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/153496992-8f711280-7740-4153-b825-0b1ba556bf6c.jpg"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/153496992-8f711280-7740-4153-b825-0b1ba556bf6c.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How I prefer to structure my Next.js projects</title><link href="https://genicsblog.com/anurag/how-i-prefer-to-structure-my-next-js-projects" rel="alternate" type="text/html" title="How I prefer to structure my Next.js projects"/><published>2022-02-07T00:00:00+00:00</published><updated>2022-02-07T00:00:00+00:00</updated><id>https://genicsblog.com/anurag/how-i-prefer-to-structure-my-nextjs-projects</id><content type="html" xml:base="https://genicsblog.com/anurag/how-i-prefer-to-structure-my-next-js-projects"><![CDATA[<p>Hello folks! Today I’m going to explain how I structure my Next.js projects.</p> <p><img src="https://c.tenor.com/-z2KfO5zAckAAAAC/hello-there-baby-yoda.gif" alt=""/></p> <blockquote> <p><strong>Note</strong>: There is no right or wrong way to structure a Next.js project, and this is highly opinionated.</p> </blockquote> <p>So, the structure of a Next.js project depends mainly on the complexity of a project.</p> <p>If a project needs only page and is small in terms of complexity, you should not over-structure it. With that being said, let’s see how to manage your project depending upon the complexity.</p> <h3 id="-single-pages">📃 Single Pages</h3> <p>Next.js automatically routes every file in the <code class="language-plaintext highlighter-rouge">pages/</code> directory to a name associated with the file name.</p> <p>For example, the React component inside the <code class="language-plaintext highlighter-rouge">pages/dashboard.jsx</code> will be routed to <code class="language-plaintext highlighter-rouge">${URL}/dashboard</code></p> <p>For single pages, you can just create a single file that will export a React component:</p> <p><code class="language-plaintext highlighter-rouge">pages/index.js</code></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Home</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>Hello world<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Home</span><span class="p">;</span>
</code></pre></div></div> <h3 id="-breaking-down-into-smaller-components">🧩 Breaking down into smaller components</h3> <p>Now, at some point, your file will have a lot of lines, so you can make smaller standalone components:</p> <p><code class="language-plaintext highlighter-rouge">pages/dashboard.jsx</code></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Header</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nt">header</span><span class="p">&gt;</span><span class="si">{</span><span class="cm">/* component code */</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">header</span><span class="p">&gt;;</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">Hero</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span><span class="si">{</span><span class="cm">/* component code */</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>
<span class="p">};</span>

<span class="kd">function</span> <span class="nx">Dashboard</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;&gt;</span>
      <span class="p">&lt;</span><span class="nc">Header</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Hero</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Dashboard</span><span class="p">;</span>
</code></pre></div></div> <h3 id="-creating-custom-files-for-components">📁 Creating custom files for components</h3> <p>The above example works if you have smaller components. But it is advisable to create standalone files for components.</p> <p>Conventionally, components should be stored in the <code class="language-plaintext highlighter-rouge">components</code> directory at the root directory of the app:</p> <p><code class="language-plaintext highlighter-rouge">components/Header.jsx</code>:</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Header</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">header</span><span class="p">&gt;</span>
      <span class="si">{</span><span class="cm">/* some code */</span><span class="si">}</span>
      <span class="si">{</span><span class="cm">/* some more code */</span><span class="si">}</span>
    <span class="p">&lt;/</span><span class="nt">header</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Header</span><span class="p">;</span>
</code></pre></div></div> <p>Then, in the desired file, you can import and use it.</p> <p><code class="language-plaintext highlighter-rouge">pages/index.js</code>:</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">Header</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../components/header.jsx</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">Home</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;&gt;</span>
      <span class="p">&lt;</span><span class="nc">Header</span> <span class="p">/&gt;</span>
      <span class="si">{</span><span class="cm">/* main component */</span><span class="si">}</span>
    <span class="p">&lt;/&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Home</span><span class="p">;</span>
</code></pre></div></div> <p>But as your app grows, it will contain more and more components, and while importing them, the code can be a little messy.</p> <p>Here’s a simple workaround for this!</p> <p>First, make a file inside the <code class="language-plaintext highlighter-rouge">components</code> directory named <code class="language-plaintext highlighter-rouge">index.js</code> or <code class="language-plaintext highlighter-rouge">index.jsx</code></p> <p>Then, inside the file, export all the components at once.</p> <p><code class="language-plaintext highlighter-rouge">components/index.js</code></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="o">*</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./Header.jsx</span><span class="dl">"</span><span class="p">;</span>
<span class="k">export</span> <span class="o">*</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./Hero.jsx</span><span class="dl">"</span><span class="p">;</span>
<span class="k">export</span> <span class="o">*</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./Footer</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div> <p>Next, you can import all the components inside your desired file at once:</p> <p><code class="language-plaintext highlighter-rouge">pages/index.js</code></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Header</span><span class="p">,</span> <span class="nx">Hero</span><span class="p">,</span> <span class="nx">Footer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../components</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">Home</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;&gt;</span>
      <span class="p">&lt;</span><span class="nc">Header</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Hero</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Footer</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="-making-categories-for-similar-components">🗃 Making categories for similar components</h3> <p>Now, let’s say you have components of similar kinds. Like the <code class="language-plaintext highlighter-rouge">Header</code> and the <code class="language-plaintext highlighter-rouge">Footer</code> component are navigation components. Similarly, you have different <code class="language-plaintext highlighter-rouge">Card</code> components that can be sorted into the Cards category.</p> <p>For this, you can create different folders inside the <code class="language-plaintext highlighter-rouge">components</code> directory as this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- components
    | - Navigation
        | - Header.component.jsx
        | - Footer.component.jsx
    | - Cards
        | - Confirm.card.jsx
        | - Checkout.card.jsx
</code></pre></div></div> <h3 id="-making-categories-for-similar-pages">📖 Making categories for similar pages</h3> <p>Back to pages, in some cases, pages can also fall into some categories. For example, the <code class="language-plaintext highlighter-rouge">sign-up</code> and <code class="language-plaintext highlighter-rouge">login</code> page falls into the auth category.</p> <p>So, for that case, you can make a directory inside the <code class="language-plaintext highlighter-rouge">pages</code> directory named <code class="language-plaintext highlighter-rouge">auth</code> containing the <code class="language-plaintext highlighter-rouge">sign-up</code> and <code class="language-plaintext highlighter-rouge">login</code> pages.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- pages
    | - auth
        | - sign-up.jsx
        | - login.jsx
</code></pre></div></div> <h3 id="-storing-files-fonts">🗄 Storing Files, Fonts</h3> <p>Moving from this, the conventional way to store external files such as Images, Fonts, etc. is to store them in the public directory.</p> <p>For example, you can store all the required images in the <code class="language-plaintext highlighter-rouge">public/assets</code> directory and the required fonts in the <code class="language-plaintext highlighter-rouge">public/fonts</code> directory:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- public
    | - assests
        | - cover.png
        | - logo.png
    | - fonts
        | - poppins-medium.woff2
        | - sen-regular.woff2
</code></pre></div></div> <h3 id="-managing-custom-hooks-types-functions">🔮 Managing custom hooks, types, functions</h3> <p>In addition to this, you can create separate folders for custom hooks, types, functions, etc.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- hooks
    | - useuser.jsx
- @types
    | - propTypes.ts
- utils
    | - uploadImage.js
</code></pre></div></div> <p>That’s a wrap for this article. If you liked this, make sure to drop some comments on this article!</p> <h3 id="about-the-author">About the Author</h3> <ul> <li><a href="https://anurag.tech">Portfolio</a></li> <li><a href="https://blog.anurag.tech">Blog</a></li> </ul>]]></content><author><name>anurag</name></author><category term="web"/><category term="next-js"/><category term="web-development"/><category term="tips"/><summary type="html"><![CDATA[A look into how Anurag prefers to maintain and scale his projects built with Next.js + some tips!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://res.cloudinary.com/ddum5vpp3/image/upload/v1644217454/Frame_2_rbhlxk.png"/><media:content medium="image" url="https://res.cloudinary.com/ddum5vpp3/image/upload/v1644217454/Frame_2_rbhlxk.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">10 SEO tools you need for your projects in 2022</title><link href="https://genicsblog.com/10-seo-tools-you-need-to-use-in-2022" rel="alternate" type="text/html" title="10 SEO tools you need for your projects in 2022"/><published>2022-02-02T00:00:00+00:00</published><updated>2022-02-02T00:00:00+00:00</updated><id>https://genicsblog.com/10-seo-tools-you-need-to-use-in-2022</id><content type="html" xml:base="https://genicsblog.com/10-seo-tools-you-need-to-use-in-2022"><![CDATA[<p>SEO tools are essential for growing organic traffic, maintaining and improving rankings, and delivering the proper target keywords. There are numerous SEO tools accessible today, both paid and free.</p> <p>Choosing the best SEO tool for your business or industry can be difficult and time-consuming at times.</p> <p>We’ve hand-picked the top <a href="/ten-best-seo-tools-for-2022">10 SEO tools</a> after extensive study. Also, we have some <strong>bonus content</strong> for you at the end. Let’s get this party started right away!</p> <h2 id="1-seoquake">1. <a href="https://www.seoquake.com/">SEOQuake</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152030058-fa0b3a7c-f550-4da8-871a-95a678f43b10.png" alt="SEOQuake Website screenshot"/></p> <p>SEOQuake is a free but a practical SEO analysis tool used by many. It’s on the list of one of the best SEO Tools which are completely <strong>FREE</strong>.</p> <p>With the help of this tool, you can quickly start tracking and analyzing site audits and compare them with that of your competitors.</p> <p>Suppose you’re working on your content and want accurate suggestions to get a better ranking. SEOQuake would be the best choice for you.</p> <p>You’ll get a complete in-depth report of your competitors so that you can Analyze and see what improvements you need to implement in your website.</p> <h2 id="2-semrush">2. <a href="https://www.semrush.com">SEMrush</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152028779-76725570-c113-499c-b64f-0594efac6657.png" alt="SEMrush website screenshot"/></p> <p>Most people utilise SEMrush, which is a really popular SEO tool. It is well-known for its ability to perform. SEMrush comes with a plethora of resources that are included in their SEO toolbox.</p> <p>These resources are extremely useful for analysis and tracking websites on the inside, such as which keywords your competitors are ranking for, what pages they are, and what the monthly volume of particular phrase gets the most hits for them.</p> <p>When you know this inside out as a blogger or website owner, you can make a lot of adjustments to your website and witness a significant improvement in its performance.</p> <p>As a result, having these kinds of SEO tools is essential for a higher ranking. SEMrush can assist you in improving the rank of your website.</p> <h2 id="3-ahrefs">3. <a href="https://ahrefs.com">Ahrefs</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152028671-6073bf04-86e2-4c4b-92d5-390bdcbd0464.png" alt="Ahrefs website screenshot"/></p> <p>Ahrefs is a popular SEO tool. It assists you in a variety of ways, including allowing you to make the best content decisions, thoroughly reviewing your website, offering target keywords, and much more.</p> <p>It can be used as a site explorer, a content explorer, a keyword explorer, and a rank tracker among other things.</p> <p>The Site Explorer, a primary features of the Ahrefs, displays the performance of web pages along with the highly regarded web pages for specific keywords and subjects.</p> <p>With its keyword explorer tool, you can rapidly look at the volume of a given keyword, such as how many hits it gets per month or how many searches it gets per month.</p> <p>It is widely used by digital marketers. It mostly works for backlinks and performs remarkable SEO analysis. Keep in mind that <strong>it is a paid tool</strong>.</p> <h2 id="4-moz-pro">4. <a href="https://moz.com">Moz Pro</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152028572-24be2fea-9021-452e-b73d-9bf19b350136.png" alt="Moz Pro website screenshot"/></p> <p>It’s an all-in-one SEO optimization tool that includes plethora of useful resources that primarily assist you in obtaining all of the information about your competitors’ rankings.</p> <p>You may optimise your website from its suggestions and make it more valuable for ranking with the help of this tool.</p> <p>When you start using this tool, you’ll be able to get a full report on your competition, which I believe is the greatest approach to figure out what’s working and what’s not, so you can optimise your website and attain a higher Google ranking.</p> <h2 id="5-answerthepublic">5. <a href="https://answerthepublic.com">AnswerThePublic</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152028620-be6ce039-6c4d-4da6-b573-12c1303f1393.png" alt="AnswerThePublic website screenshot"/></p> <p>This tool is mostly used for keyword research and analysis. Assume you’re seeking for a program that focuses largely on keywords so you can evaluate the websites of your competitors.</p> <p>You’ll get amazing insights into other websites that are doing great, as well as helpful suggestions for your own website, such as what you should do to improve your ranking.</p> <p>Many users report increased traffic and conversions after employing these solutions!</p> <h2 id="6-keyword-hero">6. <a href="https://keyword-hero.com">Keyword Hero</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152031859-47802489-53c0-4d17-896e-56d35ce73445.png" alt="Keyword Hero website screenshot"/></p> <p>Most of the times we write articles without doing proper keyword research. We do not optimize our posts to target specific keywords which we want the article to rank for.</p> <p>Have you considered which specific keyword your visitors search on Google before clicking on your website? If you know those keywords, I’m sure you’ll focus primarily on maintaining rankings for those!</p> <p>And for both the above reasons, Keyword-Hero is great because it lets us do comprehensive keyword research and it also assists you in a variety of methods!</p> <h2 id="7-spyfu">7. <a href="https://www.spyfu.com">SpyFu</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152028250-c34c8ad7-4963-419f-9329-03c3a516cf0b.png" alt="SpyFu website screenshot"/></p> <p>It’s a fantastic tool for analysing competitors!</p> <p>Spyfu is a reliable tool for spying on your competitor’s website keywords if you want to track each step, get detailed insights for ranking, and see what your competitors are up to.</p> <h2 id="8-seomater">8. <a href="https://seomator.com">SeoMater</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152027816-ecf8895e-53f8-462b-9308-b9454447c3bc.png" alt="SeoMater website screenshot"/></p> <p>It’s a one-of-a-kind SEO tool that includes SEO auditing and a website crawling tool!</p> <p>With this tool, you may perform on-page optimization based on the analysis of your competitors.</p> <p>It’s a really professional application that keeps you up to date with reports and essential suggestions that you should review and implement in your websites for higher Google rankings!</p> <h2 id="9-contentking">9. <a href="https://www.contentkingapp.com">ContentKing</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152028141-485e84df-72a9-4fac-8d62-d07a39d95702.png" alt="ContentKing website screenshot"/></p> <p>Here’s a tracking tool that meets all of your needs. If you’re searching for a bundle tool that has all the capabilities you need, I recommend ContentKing because it offers practically everything you need.</p> <p>It’s a tool that works 24 hours a day, 7 days a week to provide you with complete in-depth details on your competitors’ websites.</p> <p>Because you’ll get an accurate audit of your competitors’ websites when you use Content King, you could implement the strategies that work for them that’ll get you a higher chance of gaining a better rating.</p> <h2 id="10-woorank">10. <a href="https://woorank.com">Woorank</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152027898-65995c73-be0b-4140-8431-5c921ac22bce.png" alt="Woorank website screenshot"/></p> <p>According to the reports, this is one of the best SEO analysis tools. This tool has a wide range of applications due to the fact that both the free and paid plans perform admirably. I recommend that you start with its free plan and then upgrade if you’re happy with it.</p> <p>You may track and analyse your competitors’ websites using Woorank. This tool provides you with comprehensive reports.</p> <p>You can see which keywords your competitors rank higher for and how you may improve your own rankings. This tool will tell you where you’re falling short and what improvements you may make to improve your rankings.</p> <h2 id="bonus-tools">Bonus Tools</h2> <p>Here’s another list of 4 other <a href="/must-have-free-seo-tools-for-everyone">Must-Have Free SEO Tools For Everyone</a> that will help you with SEO analysis and growing in rankings!</p> <h2 id="thank-you-for-reading">Thank you for reading</h2> <p>If you liked this post, subscribe to my <a href="https://abhirajbhowmick.substack.com" rel="dofollow">newsletter</a> to never miss out on <a href="https://abhiraj.co" rel="dofollow">my articles</a>, product launches, and tech news. Follow me on <a href="https://twitter.com/rainboestrykr">Twitter</a> for daily threads on web dev resources.</p>]]></content><author><name>abhiraj</name></author><category term="seo"/><category term="beginners"/><category term="tools"/><summary type="html"><![CDATA[An amazing list of 10 Best SEO tools that will help you gain Organic traffic, increase Domain Authority and do Keyword research in 2022!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/152024220-417ecb24-2d82-41e5-bb93-fff77b575b3c.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/152024220-417ecb24-2d82-41e5-bb93-fff77b575b3c.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Next generation Hello World program</title><link href="https://genicsblog.com/next-generation-hello-world-program" rel="alternate" type="text/html" title="Next generation Hello World program"/><published>2022-01-31T00:00:00+00:00</published><updated>2022-01-31T00:00:00+00:00</updated><id>https://genicsblog.com/next-generation-hello-world-program</id><content type="html" xml:base="https://genicsblog.com/next-generation-hello-world-program"><![CDATA[<p>Hey developers! Are you all bored of the pretty common <strong>Hello World!</strong> program you get to see in each programming tutorial?</p> <p>Well, <a href="#conclusion">we</a> have come up with a unique <strong>Next-gen Hello World program challenge</strong> that would surely flex your coding muscles and help you learn advanced concepts in your favourite programming language in a fun and interesting way!</p> <h1 id="the-challenge">The Challenge</h1> <p>The challenge is pretty simple :wink:, here’s what you have to do:</p> <blockquote> <p>Write a program that keeps on printing <strong>Hello World</strong> to the console in a loop, but after a time delay that is mentioned by the user.<br/><br/></p> <p>The delay between each console output should be <strong>1 second</strong>.<br/><br/></p> <p>At the time of execution of the code, the user may enter the letter “<strong>s</strong>” (without quotes) on the console to stop the process.</p> </blockquote> <p>Here’s basically what you have to do:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>&lt;Command to run your code&gt;
Please enter the delay duration <span class="k">in </span>Seconds: 5 &lt;- user wants 5 second delay between each output
Type <span class="s1">'s'</span> without the quotes to stop the program.
5
4
3
2
1
Hello World!
5
4
3
s &lt;- User inputs <span class="s2">"s"</span> to stop the program
<span class="nv">$ </span>&lt;Back to terminal&gt;
</code></pre></div></div> <p><em>Seems pretty easy, right?</em> :eyes:</p> <p><strong>WAIT BEFORE MOVING AHEAD!</strong> At this point, I’d like you to think over the problem and share what you come up with in the comments section below!</p> <p>You could use any language of your choice! Here, in this article, I’ll explain how to implement the above logic in Java.</p> <h2 id="why-java">Why Java?</h2> <blockquote> <p>Spoiler alert! Reading any further would reveal the concepts needed to solve this problem!</p> </blockquote> <p>We’ll use Java for this problem because it supports <strong>Multi-Threading</strong> out of the box. This means that we can run multiple blocks of codes at the same time, using different cores of the CPU. Any language with this capability can easily solve this problem.</p> <h2 id="general-solution">General Solution</h2> <p>Here’s the thought process needed to solve this problem: We would run two threads, one for handling the console outputs and the other for user inputs. The user input thread would be responsible for checking if the user has entered “<strong>s</strong>” on the console. If yes, the output thread would be terminated.</p> <p>We will use a <code class="language-plaintext highlighter-rouge">flag</code> boolean variable (initially set to <code class="language-plaintext highlighter-rouge">true</code>) that would be set to <code class="language-plaintext highlighter-rouge">false</code> when the user enters “<strong>s</strong>” on the console. The output thread would terminate once the flag is set to <code class="language-plaintext highlighter-rouge">false</code>.</p> <h2 id="java-solution">Java Solution</h2> <p>Let’s dig into the coding part!</p> <h3 id="creating-and-initializing-required-variables">Creating and initializing required variables</h3> <p>Here’s the blueprint of the code we’ll start with:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span> <span class="c1">// all the classes we need to use are imported here</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NextGenHelloWorld</span> <span class="o">{</span>

    <span class="c1">// variables</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">time</span><span class="o">;</span> <span class="c1">// stores the time delay for "Hello World!" to appear on console</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="n">input</span> <span class="o">=</span> <span class="s">"nothing"</span><span class="o">;</span> <span class="c1">// stores what is entered by the user to the console</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Thread</span> <span class="n">outputThread</span><span class="o">,</span> <span class="n">inputThread</span><span class="o">;</span> <span class="c1">// threads for output and input</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Scanner</span> <span class="n">scanner</span><span class="o">;</span> <span class="c1">// Scanner object handles console inputs</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// checks if threads should be stopped or should continue</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="c1">// code goes here</span>

    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div> <p>These variables will help us to keep track of the state of the program:</p> <ul> <li><code class="language-plaintext highlighter-rouge">time</code> : This variable stores the time delay entered by the user for <strong>Hello World!</strong> to appear on the console.</li> <li><code class="language-plaintext highlighter-rouge">input</code> : This variable stores the input by the user to the console. Later, it would be used to check if what the user has entered is the letter “<strong>s</strong>”.</li> <li><code class="language-plaintext highlighter-rouge">outputThread</code> and <code class="language-plaintext highlighter-rouge">inputThread</code> : These variables store the thread instances for the output and input threads respectively.</li> <li><code class="language-plaintext highlighter-rouge">scanner</code> : This variable stores the <code class="language-plaintext highlighter-rouge">Scanner</code> object that handles console inputs.</li> <li><code class="language-plaintext highlighter-rouge">flag</code> : This variable is a boolean variable that is set to <code class="language-plaintext highlighter-rouge">true</code> initially. It is set to <code class="language-plaintext highlighter-rouge">false</code> when the user enters “<strong>s</strong>” on the console.</li> </ul> <h3 id="init-block"><code class="language-plaintext highlighter-rouge">init()</code> block</h3> <p>We will make an <code class="language-plaintext highlighter-rouge">init()</code> function inside the class to initialize the undeclared variables.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>

    <span class="c1">// until a valid integer value is provided for the time</span>
    <span class="c1">// keep asking for it</span>
    <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Please enter the delay duration in Seconds: "</span><span class="o">);</span>
            <span class="n">time</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">time</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">InputMismatchException</span><span class="o">();</span> <span class="c1">// we don't want negative integers</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InputMismatchException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Not a valid positive integer, try again"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">// general info</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Type 's' without the quotes to stop the program."</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div> <p>Here, we initialize the <code class="language-plaintext highlighter-rouge">scanner</code> variable and create a loop to ask for user input.</p> <p>The loop will keep asking for the input until the user enters a valid integer value for the <code class="language-plaintext highlighter-rouge">time</code> delay. The code for asking for user input is wrapped inside a <code class="language-plaintext highlighter-rouge">try</code>-<code class="language-plaintext highlighter-rouge">catch</code> block, to handle the case where the user enters an invalid input.</p> <p>When a valid input is received, we <code class="language-plaintext highlighter-rouge">break</code> the loop and print some general information for the user on how to close the program.</p> <p>Don’t forget to call the <code class="language-plaintext highlighter-rouge">init()</code> function inside the <code class="language-plaintext highlighter-rouge">main()</code> function!</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

    <span class="c1">// initialise stuff</span>
    <span class="n">init</span><span class="o">();</span>

    <span class="c1">// other things should start after init()</span>

<span class="o">}</span>
</code></pre></div></div> <h3 id="creating-threads">Creating threads</h3> <h4 id="the-sleep-function">The sleep function</h4> <p>Before creating the threads, we need to create a function that would simulate 1 second delay. We will use this function to add 1 second delays whenever we need to.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sleep</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span> <span class="c1">// 1000 millisecond = 1 second</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>Here, we call the <code class="language-plaintext highlighter-rouge">sleep()</code> function of the thread class to add a 1 second delay. Let’s move ahead to the threads!</p> <h4 id="output-thread">Output Thread</h4> <p>As discussed earlier, the output thread will keep logging <strong>Hello World!</strong> along with a count-down timer that starts with what the user has entered for the <code class="language-plaintext highlighter-rouge">time</code> delay.</p> <p>Let’s code this thread! Threads in java require <code class="language-plaintext highlighter-rouge">Runnable</code> objects to be created, inside which we override the <code class="language-plaintext highlighter-rouge">run()</code> method and define what needs to be executed inside the thread.</p> <p>Here’s the code for the output thread:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">outputThread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span>
    <span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="c1">// continue printing if not stopped</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">flag</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">time</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(!</span><span class="n">flag</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span> <span class="c1">// if stopped, break loop</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                    <span class="n">sleep</span><span class="o">();</span> <span class="c1">// 1 second delay</span>
                <span class="o">}</span>

                <span class="k">if</span> <span class="o">(!</span><span class="n">flag</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span> <span class="c1">// if stopped, leave prining</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello World!"</span><span class="o">);</span>
                <span class="n">sleep</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">);</span>
</code></pre></div></div> <p>Here, we run a while loop that keeps a check on the <code class="language-plaintext highlighter-rouge">flag</code> variable. Unless it is <code class="language-plaintext highlighter-rouge">false</code>, it keeps printing the count-down and the <strong>Hello World!</strong> message using a <code class="language-plaintext highlighter-rouge">for</code> loop.</p> <p>Notice how we put <code class="language-plaintext highlighter-rouge">if (!flag) break;</code> at 2 places. This is because we want the loop to break as soon as <code class="language-plaintext highlighter-rouge">flag</code> becomes <code class="language-plaintext highlighter-rouge">false</code>.</p> <p>That’s it for the output thread!</p> <h4 id="input-thread">Input Thread</h4> <p>The input thread would follow the same logic as the output thread. It would keep on listening for user inputs and store it inside the <code class="language-plaintext highlighter-rouge">input</code> variable. Once the <code class="language-plaintext highlighter-rouge">input</code> matches “<strong>s</strong>”, the variable <code class="language-plaintext highlighter-rouge">flag</code> would become <code class="language-plaintext highlighter-rouge">false</code> and the output thread would terminate because of this!</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">inputThread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span>
    <span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="c1">// while not stopped, continue to listen for inputs</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">flag</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">input</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>

                <span class="c1">// if "s" found, break the loop</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"s"</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">);</span>
</code></pre></div></div> <p>We use the <code class="language-plaintext highlighter-rouge">toLowerCase()</code> method to convert the <code class="language-plaintext highlighter-rouge">input</code> to lower case so as to avoid case sensitivity issues.</p> <p>Try to run the program and see what happens! To your surprise, it won’t do anything after asking input for the <code class="language-plaintext highlighter-rouge">time</code> delay.</p> <p>That happens because we didn’t call the <code class="language-plaintext highlighter-rouge">start()</code> function on the threads! It’s important to start the threads otherwise they won’t run after initialization.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// start the threads</span>
<span class="n">inputThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="n">outputThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</code></pre></div></div> <h2 id="final-code">Final Code</h2> <p>By now, the final <code class="language-plaintext highlighter-rouge">NextGenHelloWorld.java</code> file should look like this:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NextGenHelloWorld</span> <span class="o">{</span>
    <span class="c1">// variables</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">time</span><span class="o">;</span> <span class="c1">// time to be taken to print Hello World</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="n">input</span> <span class="o">=</span> <span class="s">"nothing"</span><span class="o">;</span> <span class="c1">// checks what is entered</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Thread</span> <span class="n">outputThread</span><span class="o">,</span> <span class="n">inputThread</span><span class="o">;</span> <span class="c1">// threads for output and input</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Scanner</span> <span class="n">scanner</span><span class="o">;</span> <span class="c1">// gets inputs</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// checks if threads should be stopped or continued to run</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// initialise variables and input timer seconds</span>
        <span class="n">init</span><span class="o">();</span>

        <span class="c1">// output thread handles console outputs</span>
        <span class="n">outputThread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span>
            <span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
                <span class="nd">@Override</span>
                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>

                    <span class="c1">// continue printing if not stopped</span>
                    <span class="k">while</span> <span class="o">(</span><span class="n">flag</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">time</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
                            <span class="k">if</span> <span class="o">(!</span><span class="n">flag</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span> <span class="c1">// if stopped, break loop</span>
                            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                            <span class="n">sleep</span><span class="o">();</span> <span class="c1">// 1 second delay</span>
                        <span class="o">}</span>

                        <span class="k">if</span> <span class="o">(!</span><span class="n">flag</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span> <span class="c1">// if stopped, leave prining</span>
                        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello World!"</span><span class="o">);</span>
                        <span class="n">sleep</span><span class="o">();</span>
                    <span class="o">}</span>

                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">);</span>

        <span class="c1">// input thread handles whether to stop the program or not</span>
        <span class="n">inputThread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span>
            <span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
                <span class="nd">@Override</span>
                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                    <span class="c1">// while not stopped, continue to listen for inputs</span>
                    <span class="k">while</span> <span class="o">(</span><span class="n">flag</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">input</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>

                        <span class="c1">// if "s" found, break the loop</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"s"</span><span class="o">))</span> <span class="o">{</span>
                            <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                            <span class="k">break</span><span class="o">;</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">);</span>

        <span class="c1">// start the threads</span>
        <span class="n">inputThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">outputThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">// simulates 1 second delay</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sleep</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// initialise stuff</span>
    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>

        <span class="c1">// until a valid integer value is provided for the time</span>
        <span class="c1">// keep asking for it</span>
        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Please Enter the delay duration in Seconds: "</span><span class="o">);</span>
                <span class="n">time</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">time</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">InputMismatchException</span><span class="o">();</span> <span class="c1">// we don't want negative integers</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InputMismatchException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Not a valid positive integer, try again"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="c1">// general info</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Type 's' without the quotes to stop the program."</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>It’s pretty long but I’m sure you understand most of it!</p> <p>You can find all the code for this tutorial in <a href="https://github.com/Kushagra-Jain99/NextGenHelloWorld">this repository</a>.</p> <h2 id="conclusion">Conclusion</h2> <p>In this article, we got to learn how to use the <strong>Multi-Threading</strong> approach to solve this unique <strong>Next-gen Hello World program Challenge</strong>.</p> <p>I would like to thank <a href="/contributor/kushagra">Kushagra</a> for providing the idea for the problem. He came up with it some months ago and we spent time solving it together. I find this concept very intuitive and enjoyed writing this article.</p> <p>I hope you find this article useful. I would love to hear your feedback and suggestions on how to improve this tutorial in the comments section below!</p> <p>And yes, don’t forget to share the code for the implementation of the logic, in your favourite programming language :)</p>]]></content><author><name>gouravkhunger</name></author><category term="coding"/><category term="advanced"/><category term="tips"/><summary type="html"><![CDATA[Done writing simple Hello World code? Give yourself a challenge by building this Next-gen Hello World program!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/151851304-f4c3746f-7c60-4cf9-84b6-cf551e627ada.jpg"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/151851304-f4c3746f-7c60-4cf9-84b6-cf551e627ada.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">5 projects you can make to become a better web developer</title><link href="https://genicsblog.com/five-projects-to-become-better-at-webdev" rel="alternate" type="text/html" title="5 projects you can make to become a better web developer"/><published>2022-01-26T00:00:00+00:00</published><updated>2022-01-26T00:00:00+00:00</updated><id>https://genicsblog.com/five-projects-to-become-better-at-webdev</id><content type="html" xml:base="https://genicsblog.com/five-projects-to-become-better-at-webdev"><![CDATA[<p>The demand for web developers is growing as web development becomes more popular in the market. Web development has evolved as a viable field, attracting students and professionals from a wide range of academic and professional backgrounds.</p> <p>Working on web development projects is the ideal approach to gain experience in this sector if you’re also interested in it. Your skills will improve the more you practise and experiment with web development projects.</p> <h2 id="1-simple-clock">1. Simple Clock</h2> <p>It’s a simple app that you can develop using HTML and CSS. In this project, you have to build a simple webpage and then update the time.</p> <p>To make it more attractive, you can add start, stop features. Also, you can add an alarm function, ringtone function for alarms, Etc.</p> <div class="mb-6 aspect-video"> <iframe class="w-full h-full rounded-xl" scrolling="no" src="https://codepen.io/rainboestrykr/embed/preview/MWOWyNJ?default-tab=html%2Cresult&amp;theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true"> </iframe> </div> <h2 id="2-weathernews-app">2. Weather/News App</h2> <p>Making a weather/news app will test your skills, and in this project, you can use two APIs:</p> <ul> <li>One to get the user’s location.</li> <li>Another to fetch weather data based on the user’s location.</li> </ul> <p>As a beginner, having this project in your resume will help you stand apart from the crowd.</p> <h2 id="3-to-do-list">3. To-do list</h2> <p>It’s one of the best and simple projects that you can develop using HTML, CSS and JS. This project will help you to store your personal to-do lists and it will be saved in your local storage, which can be accessed anytime.</p> <p>Moreover, even if you host the app, the data will be stored in the user’s computer’s local storage which will maintain privacy.</p> <div class="mb-6 aspect-video"> <iframe class="w-full h-full rounded-xl" scrolling="no" src="https://codepen.io/rainboestrykr/embed/preview/mdqdPvv?default-tab=html%2Cresult&amp;theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true"> </iframe> </div> <h2 id="4-forms">4. Forms</h2> <p>HTML, CSS, and JavaScript can all be used to make forms. You can create a gorgeous landing page design with a little effort and attention. You can begin with a modest project, such as designing a survey form or a consultation form, depending on the type of business you’re starting.</p> <p>Name, address, e-mail, date of birth, phone number, and other pertinent information can be included in the form. You can send the form to your friends and see what they have to say!</p> <p>Companies nowadays use survey forms to gather information from their target audiences. In addition, having a landing page project on your resume will be a bonus!</p> <h2 id="5-coinflip">5. Coinflip</h2> <p>This is the most unexpected item on the list but it can teach concepts that can be very helpful in the long run. You can learn about using the <code class="language-plaintext highlighter-rouge">Math.random()</code> method to simulate a random result from an array of options.</p> <div class="mb-6 aspect-video"> <iframe class="w-full h-full rounded-xl" scrolling="no" src="https://codepen.io/rainboestrykr/embed/preview/ExbxyvR?default-tab=html%2Cresult&amp;theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true"> </iframe> </div> <h2 id="conclusion">Conclusion</h2> <p>These were the top 5 web development projects. All of the projects listed are beginner-friendly, and working on them will help you improve your web development abilities and enhance your career.</p> <h3 id="thank-you-for-reading">Thank you for reading</h3> <p>If you liked this post, you can subscribe to my <a href="https://abhirajbhowmick.substack.com/" rel="dofollow">newsletter</a> to never miss out on <a href="https://abhiraj.co" rel="dofollow">my blogs</a>, product launches, and tech news. Follow me on <a href="https://twitter.com/rainboestrykr">Twitter</a> for daily threads on web dev resources.</p>]]></content><author><name>abhiraj</name></author><category term="web"/><category term="web-development"/><category term="tips"/><category term="beginners"/><summary type="html"><![CDATA[If you are interested in web development, the best way to create experience in this field is to work on web development projects.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/151173908-5358883e-7e44-41d3-bc5c-c7cea7086795.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/151173908-5358883e-7e44-41d3-bc5c-c7cea7086795.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Intro to GraphQL with Node.js and TypeScript</title><link href="https://genicsblog.com/dhruva/intro-to-graphql-with-node-and-typescript" rel="alternate" type="text/html" title="Intro to GraphQL with Node.js and TypeScript"/><published>2022-01-26T00:00:00+00:00</published><updated>2022-01-26T00:00:00+00:00</updated><id>https://genicsblog.com/dhruva/intro-to-graphql-with-node-and-typescript</id><content type="html" xml:base="https://genicsblog.com/dhruva/intro-to-graphql-with-node-and-typescript"><![CDATA[<p>In this post, I’ll help you get a solid understanding of working with GraphQL in Node.js and TypeScript using a library called <a href="https://typegraphql.com">TypeGraphQL</a>.</p> <p>TypeGraphQL is an awesome way to create your GraphQL resolvers and it has seamless integration capabilities with ORMs like <code class="language-plaintext highlighter-rouge">TypeORM</code> (we’ll be using it in this post!) and mikro-orm. It uses classes and decorators to beautifully generate our schemas using very less code.</p> <p>Also stick around till the end to find some challenges to reinforce your skills!</p> <h1 id="what-were-gonna-do">What we’re gonna do</h1> <ul> <li>First, we’ll setup a basic TypeScript project</li> <li>Then, we’ll configure <strong>TypeORM</strong>, to interact with our database</li> <li>We’ll create a <code class="language-plaintext highlighter-rouge">Task</code> database entity and hook it up with TypeORM</li> <li>After that, we’ll set up a basic Apollo/Express web server</li> <li>And finally, we’ll create our own GraphQL resolver using TypeGraphQL with CRUD (create, read, update, delete) functionality</li> </ul> <p>Alright, let’s get started!</p> <h1 id="setting-up-a-typescript-project">Setting up a TypeScript project</h1> <p>First let’s create an empty directory called <code class="language-plaintext highlighter-rouge">graphql-crud</code>.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>graphql-crud
</code></pre></div></div> <p>And you can open this directory with the editor of your choice (I’ll be using Visual Studio Code).</p> <p>Now let’s initialize this as an NPM project using</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm init <span class="nt">-y</span>
</code></pre></div></div> <p>This creates a basic <code class="language-plaintext highlighter-rouge">package.json</code>.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"graphql-crud"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"index.js"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"echo </span><span class="se">\"</span><span class="s2">Error: no test specified</span><span class="se">\"</span><span class="s2"> &amp;&amp; exit 1"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"keywords"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
  </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ISC"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Alright cool!</p> <p>So now since we have an NPM project set up, we can install TypeScript and the type definitions for Node:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add typescript
</code></pre></div></div> <p>and</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add <span class="nt">-D</span> @types/node
</code></pre></div></div> <p><strong>Note:</strong> I’ll be using Yarn throughout this post, feel free to use NPM.</p> <p>Also we need to make a <code class="language-plaintext highlighter-rouge">tsconfig.json</code> file to configure the TypeScript compiler, so to do that we’ll use a library called <code class="language-plaintext highlighter-rouge">tsconfig.json</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx tsconfig.json
</code></pre></div></div> <p>Select <code class="language-plaintext highlighter-rouge">node</code> from the options</p> <p><img src="https://i.imgur.com/cSC9N19.png" alt="Untitled"/></p> <p>And now, it will create a TSConfig in your root directory.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es2017"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"commonjs"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lib"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"dom"</span><span class="p">,</span><span class="w"> </span><span class="s2">"es6"</span><span class="p">,</span><span class="w"> </span><span class="s2">"es2017"</span><span class="p">,</span><span class="w"> </span><span class="s2">"esnext.asynciterable"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"skipLibCheck"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"sourceMap"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"outDir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./dist"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"moduleResolution"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"removeComments"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noImplicitAny"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"strictNullChecks"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"strictFunctionTypes"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noImplicitThis"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noUnusedLocals"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noUnusedParameters"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noImplicitReturns"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noFallthroughCasesInSwitch"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"allowSyntheticDefaultImports"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"esModuleInterop"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"emitDecoratorMetadata"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"experimentalDecorators"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"resolveJsonModule"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"baseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"."</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"exclude"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"node_modules"</span><span class="p">],</span><span class="w">
  </span><span class="nl">"include"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"./src/**/*.ts"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Now, let’s create a simple TypeScript file.</p> <p><code class="language-plaintext highlighter-rouge">src/index.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hellooooo</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> <p>We cannot run this file directly using Node, so we need to compile this into JavaScript. To do this, let’s create a <code class="language-plaintext highlighter-rouge">watch</code> script in our <code class="language-plaintext highlighter-rouge">package.json</code> to watch our TypeScript files for changes and compile them to JavaScript in the <code class="language-plaintext highlighter-rouge">dist/</code> directory.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"graphql-crud"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"index.js"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"watch"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsc -w"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"keywords"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
  </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ISC"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Now if we run <code class="language-plaintext highlighter-rouge">npm watch</code> in our terminal, it will create a <code class="language-plaintext highlighter-rouge">dist</code> folder with our compiled JavaScript code. We’ll create a <code class="language-plaintext highlighter-rouge">dev</code> command to run this compiled code with the following script:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"watch"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsc -w"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"dev"</span><span class="p">:</span><span class="w"> </span><span class="s2">"nodemon dist/index.js"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div> <p>By the way, make sure you install <code class="language-plaintext highlighter-rouge">nodemon</code> either globally or in this project for this command to work.</p> <p>Now to run this code you will run both <code class="language-plaintext highlighter-rouge">yarn watch</code> and <code class="language-plaintext highlighter-rouge">yarn dev</code> together, to compile our TypeScript and run the compiled code automatically.</p> <p>Alright, now our TypeScript project is ready to go! 🔥🔥</p> <h1 id="setting-up-typeorm">Setting up TypeORM</h1> <p><a href="https://typeorm.io">TypeORM</a> is an amazing ORM, which we can use to interact with various databases. It also has really good TypeScript support and the way we define database entities in TypeORM will be very useful when we setup TypeGraphQL later in this post.</p> <p>In this tutorial, I will be using PostgreSQL as my database and really you can follow along with any relational database which you have set up.</p> <p>Let’s install TypeORM and the native Postgres driver for Node:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add typeorm pg
</code></pre></div></div> <p>Now we can replace the code in <code class="language-plaintext highlighter-rouge">src/index.ts</code> to this:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">pass</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p>This basically just specifies all the options for your database connection. We are using a <code class="language-plaintext highlighter-rouge">main</code> function because top-level awaits are not a thing unless you’re using ES7 or something like that.</p> <h1 id="creating-our-entity">Creating our <code class="language-plaintext highlighter-rouge">Entity</code></h1> <p>First things first, I think some people don’t exactly know what an Entity is, so I’ll just explain that part a bit now.</p> <p>As you should already know, SQL databases (like Postgres, MySQL etc.) are made up of <strong>Tables</strong> and <strong>Columns.</strong> Like an Excel spreadsheet. Each table will contain fields related to it. For example:</p> <ul> <li>A table of <strong>Cars,</strong> may have columns like <strong>Manufacturer</strong>, <strong>Engine Type</strong>, <strong>Color</strong> etc.</li> </ul> <p>An <code class="language-plaintext highlighter-rouge">Entity</code> basically defines the structure of a database table and its corresponding columns. In this post, we’ll perform our CRUD operations with Tasks or Todos. So lets create an entity for a <strong>Task.</strong></p> <p>First off, create a new file in the <code class="language-plaintext highlighter-rouge">src/entities</code> directory.</p> <p>To keep it simple, we’re going to have 2 columns for our <code class="language-plaintext highlighter-rouge">Task</code> table:</p> <ul> <li>The <strong>title</strong> of the task</li> <li>The <strong>description</strong> of the task</li> </ul> <p>We’ll also have an <code class="language-plaintext highlighter-rouge">id</code>, a <code class="language-plaintext highlighter-rouge">created</code>, and an <code class="language-plaintext highlighter-rouge">updated</code> column.</p> <p>We won’t really use the created and updated column, but its kind of a best practice 😉</p> <p><code class="language-plaintext highlighter-rouge">src/entities/Task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span>
  <span class="nx">BaseEntity</span><span class="p">,</span>
  <span class="nx">Column</span><span class="p">,</span>
  <span class="nx">CreateDateColumn</span><span class="p">,</span>
  <span class="nx">Entity</span><span class="p">,</span>
  <span class="nx">PrimaryGeneratedColumn</span><span class="p">,</span>
  <span class="nx">UpdateDateColumn</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Entity</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">Task</span> <span class="kd">extends</span> <span class="nx">BaseEntity</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">PrimaryGeneratedColumn</span><span class="p">()</span>
  <span class="nx">id</span><span class="o">!</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">CreateDateColumn</span><span class="p">()</span>
  <span class="nx">created</span><span class="p">:</span> <span class="nb">Date</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">UpdateDateColumn</span><span class="p">()</span>
  <span class="nx">updated</span><span class="p">:</span> <span class="nb">Date</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">Column</span><span class="p">()</span>
  <span class="nx">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">Column</span><span class="p">()</span>
  <span class="nx">description</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Woah, woah, what is that?!</p> <p>This my friend, is the ✨ magic of decorators ✨</p> <p>This code is extremely clean and self-documenting:</p> <ul> <li>We are creating a class called <code class="language-plaintext highlighter-rouge">Task</code> with the <code class="language-plaintext highlighter-rouge">Entity</code> decorating specifying that this class is an Entity.</li> <li>We are extending this class from <code class="language-plaintext highlighter-rouge">BaseEntity</code> so that some useful methods like <code class="language-plaintext highlighter-rouge">create</code>, <code class="language-plaintext highlighter-rouge">delete</code> etc. will be exposed to us with this class. You’ll see what I mean later on.</li> <li>Then we’re creating a primary column, for our ID. This is ID field is an integer and its automatically generated by TypeORM!</li> <li>Next is the created and updated column and this too is automatically generated by TypeORM.</li> <li>The <code class="language-plaintext highlighter-rouge">title</code> and <code class="language-plaintext highlighter-rouge">description</code> is a normal column, containing the title and the description of our task.</li> </ul> <p>And don’t forget to add the <code class="language-plaintext highlighter-rouge">Task</code> entity to your <code class="language-plaintext highlighter-rouge">entities</code> array in your TypeORM config:</p> <p><code class="language-plaintext highlighter-rouge">src/index.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./entities/Task</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[</span><span class="nx">Task</span><span class="p">],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p>Phew! Finally, let’s get started with the GraphQL part!</p> <h1 id="setting-up-express-with-apollo-server">Setting up Express with Apollo Server</h1> <p>We’ll be using Express as our server and we’ll tell Express to use Apollo Server as middleware.</p> <p>But, what <strong>is</strong> Apollo Server??</p> <p>To understand what Apollo Server does, you’ll need to know how GraphQL works at its core. Basically, in an API there will be a REST endpoint for the GraphQL stuff (kinda ironic but yeah) from where you can run Queries and Mutations from your Resolvers.</p> <p>What Apollo Server does, is just create an endpoint for your GraphQL to be served with some extra dev tools, like GraphQL Playground which helps you test your GraphQL queries in a cool environment.</p> <p>So let’s start!</p> <p>We’ll install these libraries:</p> <ul> <li><code class="language-plaintext highlighter-rouge">express</code></li> <li><code class="language-plaintext highlighter-rouge">apollo-server-express</code>: Express middleware for Apollo Server</li> <li><code class="language-plaintext highlighter-rouge">graphql</code>: The JavaScript implementation of GraphQL</li> <li><code class="language-plaintext highlighter-rouge">type-graphql</code></li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add express apollo-server-express graphql type-graphql 
</code></pre></div></div> <p>Let’s also install the type definitions for express:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add <span class="nt">-D</span> @types/express
</code></pre></div></div> <p>Cool!</p> <p>Let’s now create our Express app:</p> <p><code class="language-plaintext highlighter-rouge">src/index.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">express</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Express</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./entities/Task</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>

  <span class="kd">const</span> <span class="na">app</span><span class="p">:</span> <span class="nx">Express</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`server started on port </span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p>Let’s also create a test route to see that everything’s working properly:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">express</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Express</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./entities/Task</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[</span><span class="nx">Task</span><span class="p">],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>

  <span class="kd">const</span> <span class="na">app</span><span class="p">:</span> <span class="nx">Express</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">_req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">you have not screwed up!</span><span class="dl">"</span><span class="p">));</span>

  <span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`server started on port </span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p><strong>Note:</strong> I am using an <code class="language-plaintext highlighter-rouge">_</code> in front of <code class="language-plaintext highlighter-rouge">req</code> because I won’t be using that variable and if you don’t use a variable you can prefix it with an underscore.</p> <p>Now let’s open up our browser and go to <code class="language-plaintext highlighter-rouge">[localhost:8000/](http://localhost:8000/)</code> and you should see something like this:</p> <p><img src="https://i.imgur.com/pKpSU2B.png" alt="Untitled"/></p> <p>To add Apollo Server as a middleware for Express, we can add the following code:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">express</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Express</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ApolloServer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">apollo-server-express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">buildSchema</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>

  <span class="kd">const</span> <span class="nx">apolloServer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ApolloServer</span><span class="p">({</span>
    <span class="na">schema</span><span class="p">:</span> <span class="k">await</span> <span class="nx">buildSchema</span><span class="p">({</span>
      <span class="na">resolvers</span><span class="p">:</span> <span class="p">[],</span>
      <span class="na">validate</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="p">}),</span>
  <span class="p">});</span>

  <span class="k">await</span> <span class="nx">apolloServer</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
  <span class="kd">const</span> <span class="na">app</span><span class="p">:</span> <span class="nx">Express</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

  <span class="nx">apolloServer</span><span class="p">.</span><span class="nx">applyMiddleware</span><span class="p">({</span> <span class="nx">app</span> <span class="p">});</span>

  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">_req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">you have not screwed up!</span><span class="dl">"</span><span class="p">));</span>

  <span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`server started on port </span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p>Now you’ll get TypeScript yelling at you because the <code class="language-plaintext highlighter-rouge">resolvers</code> array is empty but bear with me for a sec.</p> <p>Here what we’re basically doing is, creating an instance of <code class="language-plaintext highlighter-rouge">ApolloServer</code> and passing our GraphQL schema as the <code class="language-plaintext highlighter-rouge">buildSchema</code> function from <code class="language-plaintext highlighter-rouge">type-graphql</code>.</p> <p>So what TypeGraphQL does is it converts our GraphQL resolvers (TypeScript classes) which are present in the <code class="language-plaintext highlighter-rouge">resolvers</code> arrays into SDL or GraphQL Schema Definition Language, and passes this SDL as our final GraphQL schema to Apollo Server.</p> <p>Lets also quickly create a simple GraphQL Resolver:</p> <p>For those of you who don’t know what a Resolver is:</p> <blockquote> <p>Resolver is <strong>a collection of functions that generate response for a GraphQL query</strong>. In simple terms, a resolver acts as a GraphQL query handler.</p> <p>~ tutorialspoint.com</p> </blockquote> <p><code class="language-plaintext highlighter-rouge">src/resolvers/task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Query</span><span class="p">,</span> <span class="nx">Resolver</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Resolver</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">TaskResolver</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">Query</span><span class="p">()</span>
  <span class="nx">hello</span><span class="p">():</span> <span class="kr">string</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>That’s all there is to it!</p> <p>Of course, now we should add this resolver in our <code class="language-plaintext highlighter-rouge">resolvers</code> array:</p> <p><code class="language-plaintext highlighter-rouge">src/index.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">express</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Express</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ApolloServer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">apollo-server-express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">buildSchema</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./entities/Task</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">TaskResolver</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./resolvers/task</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[</span><span class="nx">Task</span><span class="p">],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>

  <span class="kd">const</span> <span class="nx">apolloServer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ApolloServer</span><span class="p">({</span>
    <span class="na">schema</span><span class="p">:</span> <span class="k">await</span> <span class="nx">buildSchema</span><span class="p">({</span>
      <span class="na">resolvers</span><span class="p">:</span> <span class="p">[</span><span class="nx">TaskResolver</span><span class="p">],</span>
      <span class="na">validate</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="p">}),</span>
  <span class="p">});</span>

  <span class="k">await</span> <span class="nx">apolloServer</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
  <span class="kd">const</span> <span class="na">app</span><span class="p">:</span> <span class="nx">Express</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

  <span class="nx">apolloServer</span><span class="p">.</span><span class="nx">applyMiddleware</span><span class="p">({</span> <span class="nx">app</span> <span class="p">});</span>

  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">_req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">you have not screwed up!</span><span class="dl">"</span><span class="p">));</span>

  <span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`server started on port </span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p>Cool! Now let’s look at our output in the terminal aaaandd…</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">UnmetGraphQLPeerDependencyError</span><span class="p">:</span> <span class="nx">Looks</span> <span class="nx">like</span> <span class="nx">you</span> <span class="nx">use</span> <span class="nx">an</span> <span class="nx">incorrect</span> <span class="nx">version</span> <span class="k">of</span> <span class="nx">the</span> <span class="dl">'</span><span class="s1">graphql</span><span class="dl">'</span> <span class="kr">package</span><span class="p">:</span> <span class="dl">"</span><span class="s2">16.2.0</span><span class="dl">"</span><span class="p">.</span> <span class="nx">Please</span> <span class="nx">ensure</span> <span class="nx">that</span> <span class="nx">you</span> <span class="nx">have</span> <span class="nx">installed</span> <span class="nx">a</span> <span class="nx">version</span> <span class="nx">that</span> <span class="nx">meets</span> <span class="nx">TypeGraphQL</span><span class="dl">'</span><span class="s1">s requirement: "^15.3.0".
    at Object.ensureInstalledCorrectGraphQLPackage (/Users/dhruvasrinivas/Documents/graphql-crud/node_modules/type-graphql/dist/utils/graphql-version.js:20:15)
    at Function.checkForErrors (/Users/dhruvasrinivas/Documents/graphql-crud/node_modules/type-graphql/dist/schema/schema-generator.js:47:27)
    at Function.generateFromMetadataSync (/Users/dhruvasrinivas/Documents/graphql-crud/node_modules/type-graphql/dist/schema/schema-generator.js:26:14)
    at Function.generateFromMetadata (/Users/dhruvasrinivas/Documents/graphql-crud/node_modules/type-graphql/dist/schema/schema-generator.js:16:29)
    at buildSchema (/Users/dhruvasrinivas/Documents/graphql-crud/node_modules/type-graphql/dist/utils/buildSchema.js:10:61)
    at main (/Users/dhruvasrinivas/Documents/graphql-crud/dist/index.js:23:54)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
</span></code></pre></div></div> <p>UH OH! We have an error! But it’s pretty obvious what we have to do to fix it. We just have to use the specified version of the graphql package in our <code class="language-plaintext highlighter-rouge">package.json</code></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"graphql-crud"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"index.js"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"watch"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsc -w"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"dev"</span><span class="p">:</span><span class="w"> </span><span class="s2">"nodemon dist/index.js"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"keywords"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
  </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ISC"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"@types/node"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^17.0.10"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"apollo-server-express"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^3.6.2"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"express"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.17.2"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"graphql"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^15.3.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"pg"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^8.7.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type-graphql"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.1.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"typeorm"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^0.2.41"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"typescript"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.5.5"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"devDependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"@types/express"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.17.13"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Now let’s reinstall all of our dependencies:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn
</code></pre></div></div> <p>Now if we run our code, we shouldn’t get any errors!</p> <p>Apollo Server serves our GraphQL at the <code class="language-plaintext highlighter-rouge">/graphql</code> endpoint.</p> <p>So let’s open it up in our browser.</p> <p><img src="https://i.imgur.com/uYKIjOp.png" alt="apollo propaganda page"/></p> <p>And oof we’re greeted by Apollo Server’s propaganda page 💀</p> <p>Fun fact: This is actually a new Apollo Server update, earlier it used to directly open up GraphQL Playground, an interactive environment to test our GraphQL queries.</p> <p>No worries though, we can spin up GraphQL playground using this Apollo Server Plugin:</p> <p><code class="language-plaintext highlighter-rouge">src/index.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">express</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Express</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ApolloServer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">apollo-server-express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">buildSchema</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./entities/Task</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">TaskResolver</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./resolvers/task</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ApolloServerPluginLandingPageGraphQLPlayground</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">apollo-server-core</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[</span><span class="nx">Task</span><span class="p">],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>

  <span class="kd">const</span> <span class="nx">apolloServer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ApolloServer</span><span class="p">({</span>
    <span class="na">schema</span><span class="p">:</span> <span class="k">await</span> <span class="nx">buildSchema</span><span class="p">({</span>
      <span class="na">resolvers</span><span class="p">:</span> <span class="p">[</span><span class="nx">TaskResolver</span><span class="p">],</span>
      <span class="na">validate</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="p">}),</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="nx">ApolloServerPluginLandingPageGraphQLPlayground</span><span class="p">()],</span>
  <span class="p">});</span>

  <span class="k">await</span> <span class="nx">apolloServer</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
  <span class="kd">const</span> <span class="na">app</span><span class="p">:</span> <span class="nx">Express</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

  <span class="nx">apolloServer</span><span class="p">.</span><span class="nx">applyMiddleware</span><span class="p">({</span> <span class="nx">app</span> <span class="p">});</span>

  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">_req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">you have not screwed up!</span><span class="dl">"</span><span class="p">));</span>

  <span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`server started on port </span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p>Now, if you refresh you can find something like this:</p> <p><img src="https://i.imgur.com/eKHWisM.png" alt="Untitled"/></p> <p>Now let’s run our <code class="language-plaintext highlighter-rouge">hello</code> query:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="n">hello</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>And you’ll see our output:</p> <p><img src="https://i.imgur.com/fRSycbD.png" alt="Untitled"/></p> <p>Awesome!!</p> <h1 id="building-crud-functionality">Building CRUD functionality</h1> <p>Now, let’s get to the main part, which is building out our CRUD functionality. Let’s start with the easiest, which is to fetch all the posts:</p> <p>BUT WAIT A MINUTE! Remember that <code class="language-plaintext highlighter-rouge">Task</code> entity we made? Like a hundred years back? Yep, that one.</p> <p>That is a database <strong>Entity</strong>, but when we get all tasks we have to return a <code class="language-plaintext highlighter-rouge">Task</code> and we can’t return an <strong>Entity</strong> cause that’s dumb. So what we’re gonna have to do is, to make <code class="language-plaintext highlighter-rouge">Task</code> a GraphQL type.</p> <p>Before you start complaining, remember that I told you that TypeGraphQL can integrate with TypeORM well? Let’s see that in action!</p> <p><code class="language-plaintext highlighter-rouge">src/entities/Task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Field</span><span class="p">,</span> <span class="nx">Int</span><span class="p">,</span> <span class="nx">ObjectType</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
  <span class="nx">BaseEntity</span><span class="p">,</span>
  <span class="nx">Column</span><span class="p">,</span>
  <span class="nx">CreateDateColumn</span><span class="p">,</span>
  <span class="nx">Entity</span><span class="p">,</span>
  <span class="nx">PrimaryGeneratedColumn</span><span class="p">,</span>
  <span class="nx">UpdateDateColumn</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Entity</span><span class="p">()</span>
<span class="p">@</span><span class="nd">ObjectType</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">Task</span> <span class="kd">extends</span> <span class="nx">BaseEntity</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">PrimaryGeneratedColumn</span><span class="p">()</span>
  <span class="p">@</span><span class="nd">Field</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">Int</span><span class="p">)</span>
  <span class="nx">id</span><span class="o">!</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">CreateDateColumn</span><span class="p">()</span>
  <span class="p">@</span><span class="nd">Field</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">)</span>
  <span class="nx">created</span><span class="p">:</span> <span class="nb">Date</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">UpdateDateColumn</span><span class="p">()</span>
  <span class="p">@</span><span class="nd">Field</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">)</span>
  <span class="nx">updated</span><span class="p">:</span> <span class="nb">Date</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">Column</span><span class="p">()</span>
  <span class="p">@</span><span class="nd">Field</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">,</span> <span class="p">{</span> <span class="na">nullable</span><span class="p">:</span> <span class="kc">false</span> <span class="p">})</span>
  <span class="nx">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">Column</span><span class="p">()</span>
  <span class="p">@</span><span class="nd">Field</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">,</span> <span class="p">{</span> <span class="na">nullable</span><span class="p">:</span> <span class="kc">false</span> <span class="p">})</span>
  <span class="nx">description</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Get a load of that ✨ decorator magic ✨</p> <p>What we’re essentially doing here is:</p> <ul> <li>Specifying that this <code class="language-plaintext highlighter-rouge">Task</code> class is <strong>also a GraphQL type!</strong></li> <li>We are then decorating each column with the <code class="language-plaintext highlighter-rouge">Field</code> decorator, saying that each of these columns are also Fields of the <code class="language-plaintext highlighter-rouge">Task</code> type.</li> <li>We are also explicitly stating the GraphQL type of each <code class="language-plaintext highlighter-rouge">Field</code> , which are all coming from <code class="language-plaintext highlighter-rouge">type-graphql</code></li> <li>We are also specifying that the title and description field <strong>has to have a value and can never be declared as null.</strong></li> </ul> <p>The cool thing about defining your entity and GraphQL type like this is that you may have a column in your database like a password which <strong>you don’t want to expose</strong> in a response and you can just not decorate it with a <code class="language-plaintext highlighter-rouge">Field</code> to do this!</p> <h2 id="getting-all-tasks">Getting all tasks</h2> <p>Now, let’s fetch all of our Tasks:</p> <p><code class="language-plaintext highlighter-rouge">src/resolvers/task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Query</span><span class="p">,</span> <span class="nx">Resolver</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../entities/Task</span><span class="dl">"</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Resolver</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">TaskResolver</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">Query</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nx">Task</span><span class="p">])</span>
  <span class="k">async</span> <span class="nx">tasks</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Task</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">find</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Here you can see that we’re specifying the GraphQL return type as an array of <code class="language-plaintext highlighter-rouge">Task</code>s since we also made it a GraphQL type.</p> <p>One fault you may find with this approach is that we’re defining the return types <strong>twice:</strong> once for the GraphQL return type, and once for the function’s return type. But that’s just how we do things in the TypeGraphQL world 😅</p> <p>Ok cool, let’s now run our query:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="n">tasks</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="w">
    </span><span class="n">created</span><span class="w">
    </span><span class="n">updated</span><span class="w">
    </span><span class="n">title</span><span class="w">
    </span><span class="n">description</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>And we will get a response like this:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"tasks"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>The array is empty because we haven’t created any tasks yet.</p> <h2 id="creating-a-task">Creating a task</h2> <p>Now I’d like to ask you a question, if we use a <code class="language-plaintext highlighter-rouge">Query</code> to fetch data, will we be able to use the same <code class="language-plaintext highlighter-rouge">Query</code> to change (create, update, delete) data? No, we can’t. We will use something called a <strong><code class="language-plaintext highlighter-rouge">Mutation</code></strong> to achieve our task.</p> <p>One more thing you might be thinking is how exactly do we take inputs because when we create a task, we’ll need to provide the title and description of the task, right? Guess what, TypeGraphQL has a decorator for it!</p> <p>Let’s see all of this in action. We’ll define a new function in our task resolver.</p> <p><code class="language-plaintext highlighter-rouge">src/resolvers/task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Arg</span><span class="p">,</span> <span class="nx">Mutation</span><span class="p">,</span> <span class="nx">Query</span><span class="p">,</span> <span class="nx">Resolver</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../entities/Task</span><span class="dl">"</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Resolver</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">TaskResolver</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">Query</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nx">Task</span><span class="p">])</span>
  <span class="k">async</span> <span class="nx">tasks</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Task</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">find</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="p">@</span><span class="nd">Mutation</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">Task</span><span class="p">)</span>
  <span class="nx">createTask</span><span class="p">(</span>
    <span class="p">@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">title</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">)</span> <span class="nx">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
    <span class="p">@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">)</span> <span class="nx">description</span><span class="p">:</span> <span class="kr">string</span>
  <span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Task</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span> <span class="nx">title</span><span class="p">,</span> <span class="nx">description</span> <span class="p">}).</span><span class="nx">save</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>I’ll walk you through this new function line by line since it’s a bit confusing at first.</p> <ul> <li>We are first declaring this <code class="language-plaintext highlighter-rouge">createTask</code> as a GraphQL mutation, which returns the GraphQL <code class="language-plaintext highlighter-rouge">Task</code> type which we created. We are returning a <code class="language-plaintext highlighter-rouge">Task</code> because after the task is saved to the database we want to show that it has successfully added it.</li> <li>Then we have 2 variables, <code class="language-plaintext highlighter-rouge">title</code> and <code class="language-plaintext highlighter-rouge">string</code> decorated with <code class="language-plaintext highlighter-rouge">Arg</code>. This <code class="language-plaintext highlighter-rouge">Arg</code> specifies that these two variables will be passed as arguments when we are running this mutation (which we will do in a sec). The GraphQL type is given as <code class="language-plaintext highlighter-rouge">String</code> but this is optional because in most cases TypeGraphQL can <strong>infer</strong> the GraphQL type after looking at the variable’s TypeScript type.</li> <li>Then we’re creating a Task using <code class="language-plaintext highlighter-rouge">Task.create</code> and passing the title and description variables to it and then we’re calling <code class="language-plaintext highlighter-rouge">.save</code>.</li> </ul> <p>But why are we doing both <code class="language-plaintext highlighter-rouge">.create</code> and <code class="language-plaintext highlighter-rouge">.save</code>?</p> <p>What <code class="language-plaintext highlighter-rouge">.create</code> essentially does is, that it <strong>creates an instance of the <code class="language-plaintext highlighter-rouge">Task</code> class!</strong></p> <p>Something like this:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">task</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Task</span><span class="p">(....)</span> 
</code></pre></div></div> <p>And <code class="language-plaintext highlighter-rouge">.save</code> actually saves this new instance to our Postgres database.</p> <p>You might also be wondering why we’re specifying the name of the variable both as an argument for <code class="language-plaintext highlighter-rouge">@Arg</code> and for the TypeScript variable. What we’re specifying as the string is actually the name we’re going to use to provide GraphQL with the argument. For example:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">myrandomarg</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">)</span> <span class="nx">arg</span><span class="p">:</span> <span class="kr">string</span>
</code></pre></div></div> <p>To run this mutation we would do it like this:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">mutation</span><span class="w"> </span><span class="p">{</span><span class="w">
	</span><span class="n">myQuery</span><span class="p">(</span><span class="n">myrandomarg</span><span class="p">:</span><span class="w"> </span><span class="s2">"val"</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="p">...</span><span class="w">
	</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Since we got all of that cleared, let’s run our mutation!</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">mutation</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">createTask</span><span class="p">(</span><span class="w">
    </span><span class="n">title</span><span class="p">:</span><span class="w"> </span><span class="s2">"my first post!"</span><span class="p">,</span><span class="w">
    </span><span class="n">description</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
  </span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="w">
    </span><span class="n">created</span><span class="w">
    </span><span class="n">updated</span><span class="w">
    </span><span class="n">title</span><span class="w">
    </span><span class="n">description</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w"> 
</span></code></pre></div></div> <p>And we get our response back!</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"createTask"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"created"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1643090973749"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"updated"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1643090973749"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my first post!"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Awesome!</p> <p>Another thing we can do now is since we have created a post, we can try fetching all of our posts again.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"tasks"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
        </span><span class="nl">"created"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1643090973749"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"updated"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1643090973749"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my first post!"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>And it’s all working yay 🎉</p> <h2 id="getting-a-single-post-by-id">Getting a single post by ID</h2> <p>This should be pretty straight-forward since we already know how to include an argument.</p> <p><code class="language-plaintext highlighter-rouge">src/resolvers/task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Query</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">Task</span><span class="p">,</span> <span class="p">{</span> <span class="na">nullable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span>
<span class="k">async</span> <span class="nx">task</span><span class="p">(@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">Int</span><span class="p">)</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Task</span> <span class="o">|</span> <span class="kc">undefined</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> <span class="nx">id</span> <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div> <p>Here we’re saying that this <code class="language-plaintext highlighter-rouge">Query</code> returns a single <code class="language-plaintext highlighter-rouge">Task</code> and it can return a <code class="language-plaintext highlighter-rouge">null</code> if a post with this ID is not found.</p> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">Int</code> comes from <code class="language-plaintext highlighter-rouge">type-graphql</code></p> <p>Also the TypeScript return type is:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Task</span> <span class="o">|</span> <span class="kc">undefined</span><span class="o">&gt;</span>
</code></pre></div></div> <p>This basically says that this function can either return a Promise of a Task if a post with such and such ID is found, but otherwise it will return an <code class="language-plaintext highlighter-rouge">undefined</code>.</p> <p>And we’re using <code class="language-plaintext highlighter-rouge">Task.findOne()</code> to get a single task and providing the ID as the search query.</p> <p>So, if we run this query using:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="n">task</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="w">
    </span><span class="n">title</span><span class="w">
    </span><span class="n">description</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>We’ll get this response:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"task"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my first post!"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>And if we provide an ID that doesn’t exist, we’ll get a null as the response:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="n">task</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="mi">1717</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="w">
    </span><span class="n">title</span><span class="w">
    </span><span class="n">description</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"task"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my first post!"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="deleting-a-post">Deleting a post</h2> <p>Deleting a post is quite similar to the function we created for getting a single post.</p> <p><code class="language-plaintext highlighter-rouge">src/resolvers/task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Mutation</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nb">Boolean</span><span class="p">)</span>
<span class="k">async</span> <span class="nx">deleteTask</span><span class="p">(@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">Int</span><span class="p">)</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">await</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> <span class="nx">id</span> <span class="p">}))</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">Task</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Here we are returning the <code class="language-plaintext highlighter-rouge">Boolean</code> GraphQL type. We first check if a post with the ID provided exists, then we delete it and return <code class="language-plaintext highlighter-rouge">true</code>, but if it doesn’t, we return <code class="language-plaintext highlighter-rouge">false</code>.</p> <p>Let’s run this mutation:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">mutation</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">deleteTask</span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> 
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p><strong>Note:</strong> First, create another Task and then run this mutation.</p> <p>And you will get this response!</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"deleteTask"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Now, finally we’re gonna create one final function to update our Task.</p> <h2 id="updating-a-task">Updating a Task</h2> <p>To update a task, we’ll need to get:</p> <ul> <li>the ID of the task</li> <li>the new title</li> <li>the new description</li> </ul> <p>And then we’ll need to check if a post with the mentioned ID exists, if it doesn’t we will return <code class="language-plaintext highlighter-rouge">null</code></p> <p>Then we will check if a title or a description if provided and if it is, we will update the Task using <code class="language-plaintext highlighter-rouge">Task.update</code></p> <p><code class="language-plaintext highlighter-rouge">src/resolvers/task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Mutation</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">Task</span><span class="p">,</span> <span class="p">{</span> <span class="na">nullable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span>
<span class="k">async</span> <span class="nx">updateTask</span><span class="p">(</span>
  <span class="p">@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">title</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">,</span> <span class="p">{</span> <span class="na">nullable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span> <span class="nx">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
  <span class="p">@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">,</span> <span class="p">{</span> <span class="na">nullable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span> <span class="nx">description</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
  <span class="p">@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">Int</span><span class="p">)</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">number</span>
<span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Task</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">task</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">findOne</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">task</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">title</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">undefined</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span> <span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">title</span> <span class="p">});</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">description</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">undefined</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span> <span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">description</span> <span class="p">});</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">task</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>All this is familiar code, it’s just that the complexity of our operation is a bit higher. Let’s now test this mutation:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">mutation</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">updateTask</span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">title</span><span class="p">:</span><span class="w"> </span><span class="s2">"first post by me!"</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="w">
    </span><span class="n">title</span><span class="w">
    </span><span class="n">description</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>And we’ll get our response:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"updateTask"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my first post!"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>If we run the get task by ID query we can see our updated Task:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="n">task</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="w">
    </span><span class="n">title</span><span class="w">
    </span><span class="n">description</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Response:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"task"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"first post by me!"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>And that’s it!! We’re done with our CRUD!! 🚀🚀</p> <h1 id="challenge">Challenge</h1> <p>As promised, you can try implementing the features listed below to improve your understanding of the concept 💪</p> <ul> <li>Make an <code class="language-plaintext highlighter-rouge">isComplete</code> boolean field in the <code class="language-plaintext highlighter-rouge">Task</code> entity</li> <li>Make a <code class="language-plaintext highlighter-rouge">markComplete</code> mutation to change the value of <code class="language-plaintext highlighter-rouge">isComplete</code> of a Task</li> <li>You can also make a simple <code class="language-plaintext highlighter-rouge">filter</code> query to search for tasks based on the <code class="language-plaintext highlighter-rouge">title</code> arg given by the user.</li> </ul> <p>If you need help implementing any of these, leave a comment and I’ll answer your query!</p> <p>You can find the source code <a href="https://github.com/carrotfarmer/graphql-crud">here</a>.</p> <p>And that’s it for this post, see ya in the next one!</p>]]></content><author><name>dhruva</name></author><category term="backend"/><category term="api"/><category term="node-js"/><category term="web-development"/><summary type="html"><![CDATA[The complete guide to working with GraphQL using TypeGraphQL and building a basic CRUD functionality with TypeORM and Postgres.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/151178959-781d2ea4-a4dc-4f89-90d9-b98d62821944.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/151178959-781d2ea4-a4dc-4f89-90d9-b98d62821944.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">6 Free websites to learn Web 3.0</title><link href="https://genicsblog.com/6-free-websites-to-learn-web3" rel="alternate" type="text/html" title="6 Free websites to learn Web 3.0"/><published>2022-01-25T00:00:00+00:00</published><updated>2022-01-25T00:00:00+00:00</updated><id>https://genicsblog.com/6-free-websites-to-learn-web3</id><content type="html" xml:base="https://genicsblog.com/6-free-websites-to-learn-web3"><![CDATA[<p>Hi everyone, I have some great websites for you to learn <strong>web3.0</strong>, which I found when I was searching for web3 knowledge.</p> <p>Let’s have some basic understanding of what <a href="/category/web3/">web3</a> is before we dive into this awesome list. <a href="https://eshita.mirror.xyz/H5bNIXATsWUv_QbbEz6lckYcgAa2rhXEPDRkecOlCOI">Eshita’s article</a> describes it in a very simple way:</p> <ul> <li>Web1 <em>(read only)</em> 😬</li> <li>Web2 <em>(read and write)</em> 😨</li> <li>Web3 <em>(read, write, and own)</em> 😱</li> </ul> <p>We are currently in the middle of this transition from <a href="/category/web/">web2</a> to web3. For me, web3 is not just hype. Web3 was here a long time ago waiting for us to adapt, transition, and accept the future of the internet.</p> <p>You should start learning web3 right now and while it is early, we have nothing to lose. If you know both Web2 and web3, it would be better than anything!</p> <p>Here’s the list of resources to learn web3:</p> <h3 id="1-buildspace">1. <a href="https://buildspace.so">BuildSpace</a></h3> <p><img src="https://user-images.githubusercontent.com/46792249/150972372-92d2553f-816d-472c-bf13-7c5abcf6e4e1.png" alt="BuildSpace.so website"/></p> <p>Let’s start this awesome list with BuildSpace! This is indeed a top notch place to learn and build real-world web3 projects.</p> <p>Why is BuildSpace on the top? It offers different kinds of projects for you to start hacking your way through web3!</p> <p>You’ll earn free exclusive and unique NFTs when you’re able to complete a project tutorial. On top of that, you’ll get a special Discord role in their official Discord community to represent what you’ve learned and where you enroll!</p> <p>With every project you complete, you’ll gain the required experience that can get you a full-time remote job at popular web3 company!</p> <h3 id="2-odyssey-dao">2. <a href="https://odysseydao.com">Odyssey DAO</a></h3> <p><img src="https://user-images.githubusercontent.com/46792249/150972450-295b1999-a9e4-44fa-bbde-5210b685a918.png" alt="OdysseyDAO.com website"/></p> <p>Another personal favourite! This is a good alternative to BuildSpace. The only difference is that this is a learning DAO community. <strong>DAO means a decentralised autonomous organisation</strong> and Odyssey is a pretty good definition of this.</p> <blockquote> <p>A DAO is a community that’s owned and managed by its members.</p> <p>~ <a href="https://www.odysseydao.com/articles/what-is-dao">odysseydao.com</a></p> </blockquote> <p>Here’s a good thing about Odyssey, they made it possible to provide <strong>100% free web3 education</strong> with the help of their community by offering NFTs and tokens!</p> <p>For me, this is a great use of NFTs and tokens because they’re using NFTs and tokens for a good cause, not just because they want to trade them.</p> <h3 id="3-cryptozombies">3. <a href="https://cryptozombies.io">CryptoZombies</a></h3> <p><img src="https://user-images.githubusercontent.com/46792249/150972618-5bf2879b-664b-461b-b0cc-93a561efa6fd.png" alt="CryptoZombies.io website"/></p> <p>Honestly, unlike BuildSpace and Odyssey, CryptoZombies is a pretty good place to learn web3 in a <em>fun and interactive way</em> for free. And guess what, <strong>it is open-source <a href="https://github.com/genicsblog">like us</a></strong>!</p> <p>On a side note, it is recommended and also helpful to have a little bit of technical background in programming, but that’s not absolutely required for you to start learning blockchain development. Just go with the flow and take their courses and learn as much as possible.</p> <p>Currently, they offer 4 learning paths — <strong>Solidity, Advance Solidity, Chainlink, and Beyond Ethereum</strong>, which are enough for you to be considered as a blockchain developer once you complete them.</p> <p>With the help of these paths, you will be able to develop your own smart contracts, launch NFTs, and build NFT games on your own!</p> <h3 id="4-cryptodevhub">4. <a href="https://cryptodevhub.io">CryptoDevHub</a></h3> <p><img src="https://user-images.githubusercontent.com/46792249/150972763-e7b87a32-4ac3-4759-ad54-43c3e0ba46f3.png" alt="CryptoDevHub.io website"/></p> <p>If you like the wiki-style of learning about web3 then this is the right place for you.</p> <p>CryptoDevHub is a <strong>wiki-type website</strong> where you can find tons of information about web3. It also offers guides for you to get started with web3 development. There is a community around it where web3 learners, developers hang out by helping each other to build web3 apps.</p> <h3 id="5-nft-school">5. <a href="https://nftschool.dev">NFT School</a></h3> <p><img src="https://user-images.githubusercontent.com/46792249/150972831-fae80e24-b787-4007-80c3-2fe6b10900ca.png" alt="NFTSchool.dev website"/></p> <p>NFT is one of the features of web3 so why not add related resources to the list. <strong>NFT School can be described as the web3 version of W3 School but for NFTs.</strong></p> <p>Wait, what is NFT? Well, <strong>NFT stands for <a href="https://nftschool.dev/concepts/non-fungible-tokens/#a-bit-of-history">Non-Fungible Tokens</a></strong>.</p> <p>To keep it simple, NFTs are just like a ticket to a concert where you can buy it and keep it forever. You might also sell it to collectors in the future since it retains value, which holds the same idea with paintings and artworks.</p> <h3 id="6-useweb3">6. <a href="https://useweb3.xyz">UseWeb3</a></h3> <p><img src="https://user-images.githubusercontent.com/46792249/150972909-6a8c9012-aab9-4031-b773-63056158c662.png" alt="UseWeb3.xyz"/></p> <p>UseWeb3 is a great opensource community-contributed resource for web3 enthusiasts like you. Better to check this out and bookmark it to your favourite browser because you’re gonna use it on your entire web3 journey!</p> <p>It is a simple website that has a list of very useful information related to web3 space.</p> <p>No more to say, they are very useful web3 resource!</p> <h3 id="bonus-content">Bonus Content</h3> <p>Imagine if you could build web3 applications without coding 👀</p> <p>That’s actually possible with the help of <a href="https://thirdweb.com">thirdweb</a>!</p> <p>It enables no-code developers to participate in web3 space without knowing Solidity or Rust to interact with smart contracts.</p> <p>Aside from being a no-code platform itself, you can actually use the programming language you already know such as JavaScript, Python, and many more… just to build some cool web3 stuff!</p> <p>Check out <a href="https://thirdweb.com/portal/guides/release-an-nft-drop-with-no-code">this guide</a> to get started!</p> <p>In addition, <strong>Hashnode is currently hosting a <a href="https://townhall.hashnode.com/thirdweb-hackathon">web3 hackathon event</a> together with thirdweb</strong> (at the time of writing this article). So it is better to check that out and win some cool prizes.</p> <p><strong>Are there any web3 resources that we forgot to add? Let us know in the comments below!</strong></p> <p>Thanks for reading, good luck with your web3 journey! 💖</p>]]></content><author><name>adityasingh</name></author><category term="web3"/><category term="blockchain"/><category term="beginners"/><summary type="html"><![CDATA[An awesome list of 6 free websites to learn Web 3.0 development.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/76763565/150826259-e68d86cd-1164-4d6c-98d7-0e2251874f3e.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/76763565/150826259-e68d86cd-1164-4d6c-98d7-0e2251874f3e.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Add google analytics to your Next.js app ✨</title><link href="https://genicsblog.com/avneesh/add-google-analytics-to-your-next-js-app" rel="alternate" type="text/html" title="Add google analytics to your Next.js app ✨"/><published>2022-01-24T00:00:00+00:00</published><updated>2022-01-24T00:00:00+00:00</updated><id>https://genicsblog.com/avneesh/add-google-analytics-to-your-next-js-app</id><content type="html" xml:base="https://genicsblog.com/avneesh/add-google-analytics-to-your-next-js-app"><![CDATA[<p>Wassup everyone, let’s see how to add google analytics to your Next.js site. Google Analytics will help you to see the performance of each page, how well the site is doing in countries, different devices, etc.</p> <h2 id="setup-google-analytics">Setup Google Analytics</h2> <p>Go to <a href="https://analytics.google.com/analytics/web/#/report-home/a215528627w297101680p257398486">Google Analytics</a> and click on admin in the sidebar.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642347546151/V_VNBwjDM.png" alt="image.png"/></p> <p>After clicking on admin you will see a screen similar to this-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642347749350/EkD2EHa3Z.png" alt="image.png"/></p> <p>Click on “Create Property”, now fill in the form with your details.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642347967831/C2JOHnX-W.png" alt="image.png"/></p> <p>You also need to give basic business details.</p> <p>After you click submit your property will be created! You will see this screen and as we are using Next.js, select web-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642348270857/uZb1Ioz8s.png" alt="image.png"/></p> <p>Fill in your website URL and title-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642348443210/En2V_kUHK.png" alt="image.png"/></p> <p>Click on add on Add new on-page inside <strong>Tagging instructions</strong>-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642348649689/0fbjYdwFL.png" alt="image.png"/></p> <p>Copy the ID that you see and copy it as we are going to need it!</p> <h2 id="using-google-analytics-in-nextjs-app">Using Google Analytics in Next.js app</h2> <p>Go inside <code class="language-plaintext highlighter-rouge">pages/_app.tsx</code> and these two Next.js Scripts-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">&lt;</span><span class="nc">Script</span>
    <span class="na">strategy</span><span class="p">=</span><span class="s">"lazyOnload"</span>
    <span class="na">src</span><span class="p">=</span><span class="si">{</span><span class="s2">`https://www.googletagmanager.com/gtag/js?id=</span><span class="p">${</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_GOOGLE_ANALYTICS</span><span class="p">}</span><span class="s2">`</span><span class="si">}</span>
  <span class="p">/&gt;</span>

  <span class="p">&lt;</span><span class="nc">Script</span> <span class="na">id</span><span class="p">=</span><span class="s">"google-analytics"</span> <span class="na">strategy</span><span class="p">=</span><span class="s">"lazyOnload"</span><span class="p">&gt;</span>
    <span class="si">{</span><span class="s2">`
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', '</span><span class="p">${</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_GOOGLE_ANALYTICS</span><span class="p">}</span><span class="s2">', {
              page_path: window.location.pathname,
            });
                `</span><span class="si">}</span>
  <span class="p">&lt;/</span><span class="nc">Script</span><span class="p">&gt;</span>
</code></pre></div></div> <p>This is going to load google analytics via this script. As you can see we are using env variables for the google-analytics tag because it must remain a secret 🤫, so if you don’t already have a <code class="language-plaintext highlighter-rouge">.env.local</code> file create one and add the following-</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NEXT_PUBLIC_GOOGLE_ANALYTICS=YOUR_GOOGLE_ANALYTICS_ID
</code></pre></div></div> <p>Paste in the ID that we copied in the last step! Since we are changing the env variables you need to restart the server too.</p> <p>As we are using the Next.js script we also need to import it-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">Script</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next/script</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div> <p>Open your localhost app in one tab and google analytics in another. If you click on Real-time inside of Reports you will see that you have 1 user!</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642350505812/oMFfF0elgj.png" alt="image.png"/></p> <h2 id="conclusion">Conclusion</h2> <p>Adding google analytics to your Next.js app was this easy! Hope you found it useful and insightful. See ya next time ✌️</p> <h3 id="useful-links">Useful links</h3> <p><a href="https://analytics.google.com/analytics/web/#/report-home/a215528627w297101680p257398486">Google Analytics</a></p> <p><a href="https://nextjs.org/">Next.js</a></p> <p><a href="https://links.avneesh.tech/">Connect with me</a></p>]]></content><author><name>avneesh</name></author><category term="web"/><category term="beginners"/><category term="next-js"/><summary type="html"><![CDATA[Learn how to add Google Analytics script to your Next.js app.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/150820378-8ba79cd6-b0e9-484b-93b7-6445b0680cd1.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/150820378-8ba79cd6-b0e9-484b-93b7-6445b0680cd1.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Metamask authentication in Next.js with Clerk 🔒</title><link href="https://genicsblog.com/avneesh/metamask-authentication-in-next-js-with-clerk" rel="alternate" type="text/html" title="Metamask authentication in Next.js with Clerk 🔒"/><published>2022-01-24T00:00:00+00:00</published><updated>2022-01-24T00:00:00+00:00</updated><id>https://genicsblog.com/avneesh/metamask-authentication-in-next-js-with-clerk</id><content type="html" xml:base="https://genicsblog.com/avneesh/metamask-authentication-in-next-js-with-clerk"><![CDATA[<p>Hello everyone! As you have seen web3 is very popular right now. Clerk has recently released metamask authentication. So let’s take a look at how to implement it in our app!</p> <h2 id="what-is-clerk">What is Clerk?</h2> <p><a href="https://clerk.dev/">Clerk</a> is one of the best ways to add authentication to a Next.js or a react application. It gives us things that are a pain to handle on our own like user management and multiple sessions.</p> <p>Why use Clerk?</p> <ul> <li>Easy to work with</li> <li>Customizable</li> <li>2-step verification</li> <li>New device notifications</li> <li>Single sign-on</li> <li>Passwordless sign-in</li> <li>Multi-sessions</li> </ul> <h2 id="setup">Setup</h2> <h3 id="setting-up-our-nextjs-app">Setting up our Next.js app</h3> <p>Creating a new Next.js app</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx create-next-app next-clerk-demo
</code></pre></div></div> <p>Installing <a href="https://clerk.dev/">Clerk</a></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i @clerk/clerk-react <span class="c"># npm</span>
yarn add @clerk/clerk-react <span class="c"># yarn</span>
</code></pre></div></div> <h3 id="setting-up-clerk">Setting up Clerk</h3> <p>Go to <a href="https://clerk.dev">Clerk</a>, sign up/in, then create a new app. Select “Sign in with Metamask” as the Authentication strategy-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642933471226/6hFpFKly_.png" alt="image.png"/></p> <p>If you now go to “API Keys” in the sidebar, you will be able to see your frontend API key. Copy it as we are going to need it soon.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642933643582/0uZGe5OP1.png" alt="image.png"/></p> <h2 id="integrating-clerk-into-nextjs">Integrating Clerk into Next.js</h2> <h3 id="configuring-clerk">Configuring Clerk</h3> <p>Inside <code class="language-plaintext highlighter-rouge">_app.js</code> wrap the in a ClerkProvider-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">ClerkProvider</span>
  <span class="na">frontendApi</span><span class="p">=</span><span class="si">{</span><span class="nx">clerkFrontendApi</span><span class="si">}</span>
  <span class="na">navigate</span><span class="p">=</span><span class="si">{</span><span class="p">(</span><span class="nx">to</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">router</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">to</span><span class="p">)</span><span class="si">}</span>
<span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nc">Component</span> <span class="si">{</span><span class="p">...</span><span class="nx">pageProps</span><span class="si">}</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nc">ClerkProvider</span><span class="p">&gt;</span>
</code></pre></div></div> <p>Get router from useRouter-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">useRouter</span><span class="p">();</span>
</code></pre></div></div> <p>Import useRouter and ClerkProvider-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ClerkProvider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@clerk/clerk-react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useRouter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next/router</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div> <p>As you can see we also need the <code class="language-plaintext highlighter-rouge">clerkFrontendApi</code>, so create a new variable-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">clerkFrontendApi</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_CLERK_FRONTEND_API</span><span class="p">;</span>
</code></pre></div></div> <p>We are going to use env variables for the API key, so create a new file <code class="language-plaintext highlighter-rouge">.env.local</code>, and add <code class="language-plaintext highlighter-rouge">NEXT_PUBLIC_CLERK_FRONTEND_API</code>-</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NEXT_PUBLIC_CLERK_FRONTEND_API=YOUR_API_KEY
</code></pre></div></div> <p>Paste in the API key that you got from the clerk dashboard. You also going to restart the dev server-</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run dev <span class="c"># npm</span>

yarn dev <span class="c"># yarn</span>
</code></pre></div></div> <h3 id="creating-the-sign-in-button">Creating the sign-in button</h3> <p>Inside <code class="language-plaintext highlighter-rouge">index.js</code> add the following-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">SignedOut</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nc">SignInWithMetamaskButton</span><span class="p">&gt;</span>Sign in with Metamask<span class="p">&lt;/</span><span class="nc">SignInWithMetamaskButton</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nc">SignedOut</span><span class="p">&gt;</span>
</code></pre></div></div> <p>You also need to import the following-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span>
  <span class="nx">SignedIn</span><span class="p">,</span>
  <span class="nx">SignedOut</span><span class="p">,</span>
  <span class="nx">SignInWithMetamaskButton</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@clerk/clerk-react</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div> <p>Now, if you go to <a href="http://localhost:3000/">http://localhost:3000/</a>, you will be able to see a sign-in button!</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642936017421/NM4fTVnvBE.png" alt="image.png"/></p> <p>If you try clicking on it, it works 🥳.</p> <h3 id="showing-userprofile-and-address-if-the-user-is-logged-in">Showing UserProfile and address if the user is logged in</h3> <p>Show a User component if the user is SignedIn-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">SignedIn</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nc">User</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nc">SignedIn</span><span class="p">&gt;</span>
</code></pre></div></div> <p>Create a new component in the components folder as <code class="language-plaintext highlighter-rouge">User.js</code> and add the following-</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">UserButton</span><span class="p">,</span> <span class="nx">useUser</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@clerk/clerk-react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">useUser</span><span class="p">();</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">UserButton</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">user</span><span class="p">.</span><span class="nx">web3Wallets</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">web3Wallet</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">User</span><span class="p">;</span>
</code></pre></div></div> <p>Clerk provides a <code class="language-plaintext highlighter-rouge">useUser</code> hook which allows us to access the user’s details like the wallet address.</p> <p>If you now login into the app then, it would show you a profile picture and your address-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642936338400/cP77poM852.png" alt="image.png"/></p> <p>If you click on the user profile, it will show you a popup. You can click on manage account to add details like name, email, profile picture, etc.</p> <h3 id="keeping-the-users-on-our-site">Keeping the user’s on our site</h3> <p>When you clicked on manage account, you might have noticed that the URL was completely different and was not looking good. So let’s see how to keep users on our site itself!</p> <p>Create the sign in, sign up, and the user page Inside the <code class="language-plaintext highlighter-rouge">pages</code> folder we will create 3 folders named</p> <ul> <li>sign-in</li> <li>sign-up</li> <li>user</li> </ul> <p>Inside all the folders we will create a file named <code class="language-plaintext highlighter-rouge">[[…index]].js</code> Here is the code for all the files-</p> <p><strong><code class="language-plaintext highlighter-rouge">sign-in/[[…index]].js</code></strong></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">SignIn</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@clerk/clerk-react</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">SignInPage</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">SignIn</span> <span class="na">path</span><span class="p">=</span><span class="s">"/sign-in"</span> <span class="na">routing</span><span class="p">=</span><span class="s">"path"</span> <span class="p">/&gt;;</span>
<span class="p">}</span>
</code></pre></div></div> <p><strong><code class="language-plaintext highlighter-rouge">sign-up/[[…index]].js</code></strong></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">SignUp</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@clerk/clerk-react</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">SignUpPage</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">SignUp</span> <span class="na">path</span><span class="p">=</span><span class="s">"/sign-up"</span> <span class="na">routing</span><span class="p">=</span><span class="s">"path"</span> <span class="p">/&gt;;</span>
<span class="p">}</span>
</code></pre></div></div> <p><strong><code class="language-plaintext highlighter-rouge">user/[[…index]].js</code></strong></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">UserProfile</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@clerk/clerk-react</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">UserProfilePage</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">UserProfile</span> <span class="na">path</span><span class="p">=</span><span class="s">"/user"</span> <span class="na">routing</span><span class="p">=</span><span class="s">"path"</span> <span class="p">/&gt;;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Now, go to the clerk dashboard, and click on paths in the sidebar. Now edit the URLs with the following-</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642936667724/670892Zym.png" alt="image.png"/></p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1642936685668/_fkztjnDg.png" alt="image.png"/></p> <p>If you now try signing in, signing up, or viewing your profile then the user will be on the website itself (localhost in development).</p> <div class="mb-6 aspect-video"> <iframe src="https://www.loom.com/embed/f43d9d81f60947f28b30f7346f0d8ae0?hide_owner=true&amp;hide_share=true&amp;hide_title=true&amp;hideEmbedTopBar=true" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen="" class="w-full h-full rounded-xl" loading="lazy"> </iframe> </div> <h2 id="useful-links">Useful links</h2> <p><a href="https://clerk.dev/">Clerk</a></p> <p><a href="https://github.com/avneesh0612/Next-Clerk-metamask">GitHub Repo</a></p> <p><a href="https://blog.avneesh.tech/mastering-clerk-authentication-with-the-nextjs-standard-setup">Read more about Clerk</a></p> <p><a href="https://links.avneesh.tech/">Let’s connect</a></p>]]></content><author><name>avneesh</name></author><category term="web3"/><category term="authentication"/><category term="next-js"/><summary type="html"><![CDATA[Learn how to use add Metamask authentication to your Next.js app using Clerk.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/76690419/150726058-5520a79a-8f2a-4cac-8ceb-48a8ae2ac501.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/76690419/150726058-5520a79a-8f2a-4cac-8ceb-48a8ae2ac501.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How to build a REST API using NodeJS</title><link href="https://genicsblog.com/kira/how-to-build-a-rest-api-using-nodejs" rel="alternate" type="text/html" title="How to build a REST API using NodeJS"/><published>2022-01-23T00:00:00+00:00</published><updated>2022-01-23T00:00:00+00:00</updated><id>https://genicsblog.com/kira/how-to-build-a-rest-api-using-nodejs</id><content type="html" xml:base="https://genicsblog.com/kira/how-to-build-a-rest-api-using-nodejs"><![CDATA[<p>👋 Hey everyone, in this blog post we are doing to build a REST API that would serve as a source of motivation for developers using NodeJS and MongoDB. So let’s get started 🏄‍♂️</p> <p><img src="https://c.tenor.com/r3XdvPsAV3kAAAAS/despicable-me-minions.gif" alt=""/></p> <h1 id="whats-an-api-">What’s an API? 🤔</h1> <p>API stands for “Application Programming Interface” which is a tool that allows two applications to talk to each other 📞. Let’s understand the meaning of API by some real-life examples ✨</p> <p>So you have built an amazing e-store application and you wanted other developers to build applications on it. Now you have to build some sort of software that communicates between your web service and the developer’s application and that’s where API comes in.</p> <p><img src="https://user-images.githubusercontent.com/26124625/104198884-ca1bcf80-544c-11eb-94d1-22548426ad4d.png" alt=""/></p> <h2 id="whats-a-rest-api-">What’s a REST API? 🤔</h2> <p>Now as you have let’s talk something about “REST APIs”. REST stands for <strong>Representational State Transfer</strong>, it’s one of the most popularly known type of API architecture. These types of APIs follow the client-server model, where one program sends a request and the other response with some data. The requests are HTTP methods such as POST, GET, PUT, DELETE…</p> <p><img src="https://user-images.githubusercontent.com/26124625/104204412-431e2580-5453-11eb-9827-29a65aa6ff82.png" alt=""/></p> <p>You would have a more clear understanding of APIs and REST APIs when we build a project 👀. So what are we waiting for, let’s dive started into coding 👨‍💻.</p> <h1 id="setting-up-the-project-">Setting up the project 🛠</h1> <p>Let’s set up our project so that we can start coding 👨‍💻.</p> <ol> <li> <p>Creating a separate folder for our project</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>dev-credits-api
</code></pre></div> </div> </li> <li> <p>Navigate into the folder</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>dev-credits-api
</code></pre></div> </div> </li> <li> <p>Initializing the project</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm init
</code></pre></div> </div> </li> <li> <p>Installing the required packages</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install </span>mongoose express dotenv cors

<span class="c"># or</span>

<span class="nv">$ </span>yarn add mongoose express dotenv cors
</code></pre></div> </div> <ul> <li>Express is the framework by which we are going to our REST API</li> <li> <p>Mongoose is the tool that we are going to use to communicate with our MongoDB database</p> <p>4.1. Installing nodemon as a dev dependency</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install </span>nodemon <span class="nt">-D</span>

<span class="c"># or</span>

<span class="nv">$ </span>yarn add nodemon <span class="nt">-D</span>
</code></pre></div> </div> <ul> <li>Nodemon is used for automatically restarting the server on file changes detected in the directory. This would be helpful as we would not be restarting the server each time we do changes</li> </ul> </li> </ul> </li> </ol> <h1 id="building-the-rest-api-">Building the REST API 👨‍💻</h1> <p>As we have completed the setup for our project, let’s get started building the REST API.</p> <p>Create a new file named <code class="language-plaintext highlighter-rouge">index.js</code></p> <p>Here is the boilerplate code for a basic express app</p> <p><code class="language-plaintext highlighter-rouge">index.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Server is running at port </span><span class="p">${</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>Let’s breakdown it into and understand each part:</p> <ul> <li> <p>We are requiring the express package into our file so that we can use it.</p> </li> <li> <p>We are assigning some value to the variable port, the port where our server would be running. You might be thinking why is there a <code class="language-plaintext highlighter-rouge">process.env.PORT</code>? It’s because during deployment on services such as Heroku the port number might vary, it may not be 3000 so we are telling that if there is a PORT environment variable then use that else use <code class="language-plaintext highlighter-rouge">3000</code>.</p> </li> <li> <p>The last piece of code is telling to which port the server should listen, in our case it’s the <code class="language-plaintext highlighter-rouge">PORT</code> variable.</p> </li> </ul> <p>Let’s add a new script named <code class="language-plaintext highlighter-rouge">start</code> to the <code class="language-plaintext highlighter-rouge">package.json</code> file which uses nodemon to automatically restart the server on file changes detected. So after the changes our scripts in <code class="language-plaintext highlighter-rouge">package.json</code> would look something like this:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
   </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"nodemon index.js"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Let’s start our server by running the <code class="language-plaintext highlighter-rouge">npm start</code> command. The server would be running at <a href="http://localhost:3000">http://localhost:3000</a>. You prompted with an error something like this:</p> <p><img src="https://imgur.com/XeUfz0l.png" alt=""/></p> <p>This is happening because we haven’t defined the <code class="language-plaintext highlighter-rouge">/</code> (aka the root route)</p> <h2 id="http-methods-explained">HTTP methods explained</h2> <p>Let’s take a break from coding and understand what do they do and what’s the success and error status so that it would be easy for debugging 😎</p> <h3 id="get">GET</h3> <p><strong>What it does</strong>: Request data from a specified resource</p> <p><strong>Successful response</strong>: 200 OK</p> <p><strong>Error response</strong>: 404 not found</p> <h3 id="post">POST</h3> <p><strong>What it does</strong>: Send data to the server to create a new resource</p> <p><strong>Successful response</strong>: 201 Created</p> <p><strong>Error response</strong>: 404 not found or 409 conflict - if the resource already exists</p> <h3 id="put">PUT</h3> <p><strong>What it does</strong>: Send data to the server to update a pre-existing resource</p> <p><strong>Successful response</strong>: 200 OK</p> <p><strong>Error response</strong>: 204 no content, 404 not found or 405 method not allowed</p> <h3 id="delete">DELETE</h3> <p><strong>What it does</strong>: Deletes a resource from the server</p> <p><strong>Successful response</strong>: 200 OK</p> <p><strong>Error response</strong>: 404 not found or 405 method not allowed</p> <p>Check out <a href="https://http.cat/">http.cat</a> for understanding what each HTTP status code means via funny cat images 😹</p> <h2 id="adding-routes-">Adding routes 🛣</h2> <p>Routes are different URL paths of an express app that are associated with different HTTP methods, such as <code class="language-plaintext highlighter-rouge">GET</code>, <code class="language-plaintext highlighter-rouge">POST</code>, <code class="language-plaintext highlighter-rouge">DELETE</code>, <code class="language-plaintext highlighter-rouge">PUT</code>.</p> <p>Let’s get started by creating <code class="language-plaintext highlighter-rouge">/</code> which sends “Hello, World!”</p> <p>Add the below piece of code above the line where we declared the <code class="language-plaintext highlighter-rouge">port</code> variable</p> <p><code class="language-plaintext highlighter-rouge">index.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello, World!</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>Let’s breakdown this piece of code:</p> <ul> <li>The <code class="language-plaintext highlighter-rouge">get</code> method specifies the HTTP method for that route. You could use other HTTP methods like <code class="language-plaintext highlighter-rouge">post</code>, <code class="language-plaintext highlighter-rouge">delete</code>… <ul> <li>There is a special routing method <code class="language-plaintext highlighter-rouge">all</code> which is used for the routes which handle all kinds of HTTP methods</li> </ul> </li> <li>There is a callback method that is called when the server receives a request from that endpoint with that specified HTTP method</li> </ul> <p>🥳 Horray! “Hello, World” is now visible in the <code class="language-plaintext highlighter-rouge">/</code> route</p> <p><img src="https://imgur.com/Lw35Azu.png" alt=""/></p> <h2 id="setting-up-mongodb">Setting up MongoDB</h2> <p>Let’s get in the MongoDB database now 😎.</p> <p>Head over <a href="https://www.mongodb.com/">MongoDB</a> and sign up/sign in and create a new project</p> <p><img src="https://imgur.com/P1PiZ7r.png" alt=""/></p> <p>You could your co-worker into the project if you wanted too.</p> <p>After the creation of the project, click on <code class="language-plaintext highlighter-rouge">Build a Database</code></p> <p><img src="https://imgur.com/COT14kz.png" alt=""/></p> <p>You would be shown with a screen something like this:</p> <p><img src="https://imgur.com/gLTxjxN.png" alt=""/></p> <p>Let’s go ahead and choose the free plan 👀</p> <p>You would be shown some more options about the cloud provider and the location</p> <p>Let’s choose the nearest region and move forward.</p> <p>You would be asked to create a user. This is required as you would need the username and password to generate a connection URL which is then used to connect MongoDB with your NodeJS app.</p> <p>The creation of the cluster would take 1 - 3 minutes. So let’s grab a cup of coffee until then ☕. Ahh… it’s been successfully created so let’s get back to coding 👨‍💻</p> <p>Click on <code class="language-plaintext highlighter-rouge">Connect</code></p> <p><img src="https://imgur.com/YXMw142.png" alt=""/></p> <p>Click on <code class="language-plaintext highlighter-rouge">Connect your application</code></p> <p><img src="https://imgur.com/26S40MA.png" alt=""/></p> <p>Copy the connection URL</p> <p><img src="https://imgur.com/YqtMG1i.png" alt=""/></p> <p>Create a <code class="language-plaintext highlighter-rouge">.env</code> file and replace <code class="language-plaintext highlighter-rouge">&lt;password&gt;</code> with the password of the user which you have replaced previously</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MONGODB_URL="mongodb+srv://kira272921:&lt;password&gt;@dev-credits-api.t5tkf.mongodb.net/myFirstDatabase?retryWrites=true&amp;w=majority"
</code></pre></div></div> <p>Let’s head back to the good old <code class="language-plaintext highlighter-rouge">index.js</code> file</p> <h2 id="connecting-express-app-to-mongodb">Connecting Express app to MongoDB</h2> <p>Let’s start by requiring <code class="language-plaintext highlighter-rouge">mongoose</code> and <code class="language-plaintext highlighter-rouge">dotenv</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">dotenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">dotenv</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div> <p>Let’s configure dotenv as well</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">();</span>
</code></pre></div></div> <p>Let’s finally add the piece of code which connects our express application to MongoDB</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">mongoose</span>
  <span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGODB_URL</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">useNewUrlParser</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">useUnifiedTopology</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Connected to MongoDB</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
  <span class="p">});</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">index.js</code> file show looks something like this now</p> <p><code class="language-plaintext highlighter-rouge">index.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">dotenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">dotenv</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">mongoose</span>
  <span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGODB_URL</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">useNewUrlParser</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">useUnifiedTopology</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Connected to MongoDB</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
  <span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello, World!</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Server is running at port </span><span class="p">${</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>🥳 We successfully connected our express app to the MongoDB database.</p> <h2 id="creating-schema-and-model-">Creating Schema and Model 📝</h2> <p>A Schema is the structure of the documents in our database. It tells what fields are required, what’s the data type of each field.</p> <p>A model provides a programming interface for interacting with the database (read, insert, update, etc).</p> <p>Let’s create a new folder named <code class="language-plaintext highlighter-rouge">model</code> and inside it let’s create a <code class="language-plaintext highlighter-rouge">model.js</code> where we will define our schema</p> <p><code class="language-plaintext highlighter-rouge">model/model.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
  <span class="na">credits</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
    <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">id</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
    <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">});</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="dl">'</span><span class="s1">devCredits</span><span class="dl">'</span><span class="p">,</span> <span class="nx">devCredits</span><span class="p">);</span>
</code></pre></div></div> <p>Let’s breakdown it down and understand</p> <ul> <li>We imported the <code class="language-plaintext highlighter-rouge">mongoose</code> package into the <code class="language-plaintext highlighter-rouge">model/model.js</code> file</li> <li>We created a new schema named <code class="language-plaintext highlighter-rouge">devCredits</code>. The structure has the <code class="language-plaintext highlighter-rouge">credits</code> and <code class="language-plaintext highlighter-rouge">id</code>. Credits are the number of dev credits the person has and the id is the discord id of the user (This API was initially created for a discord bot <a href="https://github.com/Kira272921/dev-credits-bot">Dev credits bot</a> so the schema of the database is kinda based on discord 🤷‍♂️)</li> <li>We have finally created a model named “devCredits”</li> </ul> <h2 id="adding-more-features-">Adding more features 😎</h2> <p>Let’s add more routes to our REST API. Let’s add routes where we can get the total dev credits of a user via their discord ID and give dev credits to other users using another route.</p> <h3 id="giving-dev-credits-to-other-devs">Giving dev credits to other devs</h3> <p>Let’s import our model which we have just created into the <code class="language-plaintext highlighter-rouge">index.js</code> file.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./model/model.js</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div> <p>Let’s add a new POST route in the <code class="language-plaintext highlighter-rouge">index.js</code> file</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/post</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">credit</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">devCredits</span><span class="p">({</span>
    <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="na">credits</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">credits</span><span class="p">,</span>
  <span class="p">});</span>

  <span class="nx">devCredits</span><span class="p">.</span><span class="nx">countDocuments</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">devCredits</span><span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">(</span>
        <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">$inc</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">credits</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">credits</span><span class="p">,</span>
          <span class="p">},</span>
        <span class="p">},</span>
        <span class="p">{</span> <span class="na">new</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
        <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">devCredit</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
          <span class="p">}</span> <span class="k">else</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">devCredit</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">credit</span><span class="p">.</span><span class="nx">save</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">credits</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">credits</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div> <p>Let’s understand what exactly is going on:</p> <ul> <li>We have created a new POST route (<code class="language-plaintext highlighter-rouge">/post</code>)</li> <li>We validate the data which we receive from the client using our model</li> <li>In the next piece of code we are checking if the user (user id) already exists in the database or not <ul> <li>If exists then we are going to increment the credits value</li> <li>Else we are going to create a new document with the user id and add the credits</li> </ul> </li> </ul> <h3 id="how-to-test-the-api">How to test the API?</h3> <p>We have successfully created added a new feature in our API 🥳. But wait how are we going to test it out 🤔</p> <p>👀 We are going to use a VSCode extension called <a href="https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client">Thunder Client</a>, which is used for API testing. So let’s quickly download it and test our new feature in our API 🥳.</p> <p>After the completion of the download, you are going to see a thunder icon in your sidebar 👀</p> <p><img src="https://imgur.com/xpDcJ9t.png" alt=""/></p> <p>Click the thunder icon and you are going to see a section something like this</p> <p><img src="https://imgur.com/FEa3FBo.png" alt=""/></p> <p>Click on <code class="language-plaintext highlighter-rouge">New Request</code>. You would be prompted to screen something like this</p> <p><img src="https://imgur.com/8Df3YZO.png" alt=""/></p> <p>Let’s test out our <code class="language-plaintext highlighter-rouge">/post</code> route now 🥳. Change the URL in the input box from to <code class="language-plaintext highlighter-rouge">localhost:3000/post</code></p> <p>Change the request method from <code class="language-plaintext highlighter-rouge">GET</code> to <code class="language-plaintext highlighter-rouge">POST</code></p> <p><img src="https://imgur.com/ID9Ieie.png" alt=""/></p> <p>Navigate to the <code class="language-plaintext highlighter-rouge">Body</code> tab, this is the section where we are going to write the body of the request.</p> <p>I have added my discord ID and gave 100 dev credits to it, <em>cuz why not</em></p> <p><img src="https://imgur.com/RUfKWjt.png" alt=""/></p> <p>Let’s click and hope that it works 🤞</p> <p>🥁🥁🥁🥁🥁 and we got an error</p> <p><img src="https://imgur.com/LP7dnOb.png" alt=""/></p> <p>This happened because we didn’t have any middleware so let’s them quickly</p> <p><code class="language-plaintext highlighter-rouge">index.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cors</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="na">extended</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}));</span>
</code></pre></div></div> <p><strong>NOTE</strong>: We had installed cors as a separated package, so don’t forget to import it as well</p> <p>Let’s try again now so that it works now 🤞</p> <p>🎉 <strong>TADA</strong>! We have successfully created our first feature in the API which interacts with the MongoDB database</p> <p><img src="https://imgur.com/JIJUj9f.png" alt=""/></p> <h3 id="getting-the-total-dev-credits-of-a-user">Getting the total dev credits of a user</h3> <p>Let’s import our model which we have just created into the <code class="language-plaintext highlighter-rouge">index.js</code> file.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./model/model.js</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div> <p>Let’s add a new route in the <code class="language-plaintext highlighter-rouge">index.js</code> file</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/get/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">devCredits</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="na">_id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">__v</span><span class="p">:</span> <span class="mi">0</span> <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div> <p>Let’s breakdown this down</p> <ul> <li>We have created a new route with the GET method</li> <li>We are finding in the database for the ID given in the parameters</li> </ul> <p>Let’s test it out again using Thunder Client 👀.</p> <p>🎉<strong>TADA</strong>! It’s works</p> <p><img src="https://imgur.com/GBIj7Xk.png" alt=""/></p> <h2 id="cleaning-up-the-codebase">Cleaning up the codebase</h2> <p>Let’s clean up the codebase a bit 😅.</p> <p>Let’s create a new folder called <code class="language-plaintext highlighter-rouge">routes</code> and inside it let’s create a new file <code class="language-plaintext highlighter-rouge">router.js</code> which contains the routes</p> <p><code class="language-plaintext highlighter-rouge">routes/router.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">).</span><span class="nx">Router</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../model/model.js</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/get/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">devCredits</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="na">_id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">__v</span><span class="p">:</span> <span class="mi">0</span> <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/post</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">credit</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">devCredits</span><span class="p">({</span>
    <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="na">credits</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">credits</span><span class="p">,</span>
  <span class="p">});</span>

  <span class="nx">devCredits</span><span class="p">.</span><span class="nx">countDocuments</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">devCredits</span><span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">(</span>
        <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">$inc</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">credits</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">credits</span><span class="p">,</span>
          <span class="p">},</span>
        <span class="p">},</span>
        <span class="p">{</span> <span class="na">new</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
        <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">devCredit</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
          <span class="p">}</span> <span class="k">else</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">devCredit</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">credit</span><span class="p">.</span><span class="nx">save</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">credits</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">credits</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</code></pre></div></div> <p>We have imported the <code class="language-plaintext highlighter-rouge">routes/router.js</code> file into the <code class="language-plaintext highlighter-rouge">index.js</code> file and used it</p> <p><code class="language-plaintext highlighter-rouge">index.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">dotenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">dotenv</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">cors</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">cors</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./routes/router.js</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cors</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="na">extended</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}));</span>

<span class="nx">mongoose</span>
  <span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGODB_URL</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">useNewUrlParser</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">useUnifiedTopology</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Connected to MongoDB</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
  <span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello, World!</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Server is running at port </span><span class="p">${</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>Let’s test it out so that we are sure that our code and we didn’t mess up by cleaning up the mess 😆</p> <p>🥳 Horray! There isn’t any error and the code still works as it was before</p> <p><img src="https://imgur.com/Jj9ee1L.png" alt=""/></p> <p>😅 Doesn’t <code class="language-plaintext highlighter-rouge">routes/router.js</code> seem kinda filled up with the logic and make it kinda messy?</p> <p>Let’s create a new folder named <code class="language-plaintext highlighter-rouge">controllers</code>. In this folder, we will store the logic related to each route.</p> <p>Let’s get started by creating a new file in the <code class="language-plaintext highlighter-rouge">controllers</code> folder named <code class="language-plaintext highlighter-rouge">getCredits.js</code> and <code class="language-plaintext highlighter-rouge">postCredits.js</code> which contains the logic related to the <code class="language-plaintext highlighter-rouge">/get</code> route and <code class="language-plaintext highlighter-rouge">/post</code> route respectively</p> <p><code class="language-plaintext highlighter-rouge">controllers/getCredits.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../model/model.js</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">getCredits</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">devCredits</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="na">_id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">__v</span><span class="p">:</span> <span class="mi">0</span> <span class="p">},</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">getCredits</span><span class="p">;</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">controllers/postCredits.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../model/model.js</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">postCredits</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">credit</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">devCredits</span><span class="p">({</span>
    <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="na">credits</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">credits</span><span class="p">,</span>
  <span class="p">});</span>

  <span class="nx">devCredits</span><span class="p">.</span><span class="nx">countDocuments</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">devCredits</span><span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">(</span>
        <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">$inc</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">credits</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">credits</span><span class="p">,</span>
          <span class="p">},</span>
        <span class="p">},</span>
        <span class="p">{</span> <span class="na">new</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
        <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">devCredit</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
          <span class="p">}</span> <span class="k">else</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">devCredit</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">credit</span><span class="p">.</span><span class="nx">save</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">image</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">image</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">postCredits</span><span class="p">;</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">routes/router.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">).</span><span class="nx">Router</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">devCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../model/model.js</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">getCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../controllers/getCredits.js</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">postCredits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../controllers/postCredits.js</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/get/:id</span><span class="dl">'</span><span class="p">,</span> <span class="nx">getCredits</span><span class="p">);</span>

<span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/post</span><span class="dl">'</span><span class="p">,</span> <span class="nx">postCredits</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</code></pre></div></div> <p>Phew, that was a lot of work 😹</p> <h2 id="adding-rate-limit">Adding rate limit</h2> <p>You don’t want some random guy to just spam your entire database 😆. So let’s add a rate limit to our API when restricts the client to perform only a few requests every x minutes</p> <p>Let’s install <a href="https://www.npmjs.com/package/express-rate-limit">express-rate-limit</a> package</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install </span>express-rate-limit

<span class="c"># or</span>

<span class="nv">$ </span>yarn add express-rate-limit
</code></pre></div></div> <p>Let’s create a <code class="language-plaintext highlighter-rouge">middleware</code> folder that contains all the middlewares of our API. Create a file named <code class="language-plaintext highlighter-rouge">rateLimiter.js</code> under the <code class="language-plaintext highlighter-rouge">middleware</code> folder</p> <p><code class="language-plaintext highlighter-rouge">middleware/rateLimiter.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">rateLimit</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express-rate-limit</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">rateLimiter</span> <span class="o">=</span> <span class="nx">rateLimit</span><span class="p">({</span>
  <span class="na">windowMs</span><span class="p">:</span> <span class="mi">1</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span> <span class="c1">// 1 minute</span>
  <span class="na">max</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
  <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Bonk 🔨</span><span class="dl">'</span><span class="p">,</span>
<span class="p">});</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">rateLimiter</span><span class="p">;</span>
</code></pre></div></div> <p>Let’s understand what this piece of code is doing?</p> <ul> <li>We are importing the <code class="language-plaintext highlighter-rouge">express-rate-limit</code> package</li> <li>The <code class="language-plaintext highlighter-rouge">windowMs</code> specifies the duration</li> <li>The <code class="language-plaintext highlighter-rouge">max</code> specifies the max amount of requests the client can make in the duration specified</li> <li>The <code class="language-plaintext highlighter-rouge">message</code> is the message which is shown to the client when he exceeds the max limit</li> </ul> <p>So let’s import into the <code class="language-plaintext highlighter-rouge">index.js</code> file and test it out</p> <p><code class="language-plaintext highlighter-rouge">index.js</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">rateLimiter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./middleware/rateLimiter.js</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">rateLimiter</span><span class="p">);</span>
</code></pre></div></div> <p>😹 I got bonked by myself</p> <p><img src="https://imgur.com/zDzExMZ.png" alt=""/></p> <h1 id="deploying-our-api-on-heroku">Deploying our API on Heroku</h1> <p>👀 We have successfully built an API but how would other developers use it if it isn’t deployed?</p> <p>Let’s deploy it on Heroku 🚀.</p> <p>Get started by initializing a git repository in the directory. Create a new GitHub repository and push your changes into that repository 👀</p> <p>Let’s create a new file named <code class="language-plaintext highlighter-rouge">Procfile</code> which is just a file that tells Heroku which command is need to be run. Add the below content to the <code class="language-plaintext highlighter-rouge">Procfile</code> file</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>web: node index.js
</code></pre></div></div> <p><strong>NOTE</strong>: nodemon doesn’t work in the production stage. It only works in the development stage, so we have to use the good old <code class="language-plaintext highlighter-rouge">node index.js</code></p> <p>Create an account on <a href="https://herokuapp.com/">Heroku</a> and click on <code class="language-plaintext highlighter-rouge">Create new app</code>, give some cool name to your API</p> <p><img src="https://imgur.com/pqdLULG.png" alt=""/></p> <p>Head over to the settings tab and click <code class="language-plaintext highlighter-rouge">Reveal Config Vars</code></p> <p>These are the environment variables <img src="https://imgur.com/aj7mHCD.png" alt=""/></p> <p>Add a new config var with the key as <code class="language-plaintext highlighter-rouge">MONGODB_URL</code> and the value as your MongoDB connection URL</p> <p>Head back to the deploy tab and connect the GitHub repository which you have created just before to your Heroku application</p> <p><img src="https://imgur.com/eBgS6pU.png" alt=""/></p> <p>Click the <code class="language-plaintext highlighter-rouge">Deploy branch</code> button. <strong>TADA</strong> 🚀 You have successfully created a REST API and deployed it as well :D</p> <p>The entire source code for this tutorial will be available on <a href="https://github.com/Kira272921/dev-credits-api">my GitHub</a>.</p> <p><a href="https://devcredits-api.herokuapp.com">Check out the API</a> which we built today.</p> <p>That’s it for this blog folks 🤞. Meet y’all in the next blog post</p>]]></content><author><name>kira</name></author><category term="backend"/><category term="node-js"/><category term="mongodb"/><category term="api"/><summary type="html"><![CDATA[The guide to teach you how to build a REST API from beginning till deployment.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/90365542/150640432-993a9fd8-4472-457c-9074-9e6fbd273743.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/90365542/150640432-993a9fd8-4472-457c-9074-9e6fbd273743.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry></feed>